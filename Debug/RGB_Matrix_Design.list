
RGB_Matrix_Design.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b38  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08004bf0  08004bf0  00014bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d78  08004d78  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004d78  08004d78  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d78  08004d78  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d78  08004d78  00014d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d7c  08004d7c  00014d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b90  20000068  08004de8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bf8  08004de8  00020bf8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b85d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002102  00000000  00000000  0002b930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  0002da38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000992  00000000  00000000  0002e6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015b8f  00000000  00000000  0002f03a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e521  00000000  00000000  00044bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086653  00000000  00000000  000530ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035b4  00000000  00000000  000d9740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000dccf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000068 	.word	0x20000068
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004bd8 	.word	0x08004bd8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000006c 	.word	0x2000006c
 80000fc:	08004bd8 	.word	0x08004bd8

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_lmul>:
 8000400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000402:	46ce      	mov	lr, r9
 8000404:	4699      	mov	r9, r3
 8000406:	0c03      	lsrs	r3, r0, #16
 8000408:	469c      	mov	ip, r3
 800040a:	0413      	lsls	r3, r2, #16
 800040c:	4647      	mov	r7, r8
 800040e:	0c1b      	lsrs	r3, r3, #16
 8000410:	001d      	movs	r5, r3
 8000412:	000e      	movs	r6, r1
 8000414:	4661      	mov	r1, ip
 8000416:	0404      	lsls	r4, r0, #16
 8000418:	0c24      	lsrs	r4, r4, #16
 800041a:	b580      	push	{r7, lr}
 800041c:	0007      	movs	r7, r0
 800041e:	0c10      	lsrs	r0, r2, #16
 8000420:	434b      	muls	r3, r1
 8000422:	4365      	muls	r5, r4
 8000424:	4341      	muls	r1, r0
 8000426:	4360      	muls	r0, r4
 8000428:	0c2c      	lsrs	r4, r5, #16
 800042a:	18c0      	adds	r0, r0, r3
 800042c:	1820      	adds	r0, r4, r0
 800042e:	468c      	mov	ip, r1
 8000430:	4283      	cmp	r3, r0
 8000432:	d903      	bls.n	800043c <__aeabi_lmul+0x3c>
 8000434:	2380      	movs	r3, #128	; 0x80
 8000436:	025b      	lsls	r3, r3, #9
 8000438:	4698      	mov	r8, r3
 800043a:	44c4      	add	ip, r8
 800043c:	4649      	mov	r1, r9
 800043e:	4379      	muls	r1, r7
 8000440:	4356      	muls	r6, r2
 8000442:	0c03      	lsrs	r3, r0, #16
 8000444:	042d      	lsls	r5, r5, #16
 8000446:	0c2d      	lsrs	r5, r5, #16
 8000448:	1989      	adds	r1, r1, r6
 800044a:	4463      	add	r3, ip
 800044c:	0400      	lsls	r0, r0, #16
 800044e:	1940      	adds	r0, r0, r5
 8000450:	18c9      	adds	r1, r1, r3
 8000452:	bcc0      	pop	{r6, r7}
 8000454:	46b9      	mov	r9, r7
 8000456:	46b0      	mov	r8, r6
 8000458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000462:	f000 fde5 	bl	8001030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000466:	f000 f88b 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800046a:	f000 f96d 	bl	8000748 <MX_GPIO_Init>
  MX_DMA_Init();
 800046e:	f000 f94d 	bl	800070c <MX_DMA_Init>
  MX_TIM3_Init();
 8000472:	f000 f8cd 	bl	8000610 <MX_TIM3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    if (sleepFlag == 1) {
 8000476:	4b3c      	ldr	r3, [pc, #240]	; (8000568 <main+0x10c>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	b2db      	uxtb	r3, r3
 800047c:	2b01      	cmp	r3, #1
 800047e:	d115      	bne.n	80004ac <main+0x50>
	        // Turn off LEDs in sleep mode
	        LEDS_OFF(pixel, NUM_PIXELS);
 8000480:	4b3a      	ldr	r3, [pc, #232]	; (800056c <main+0x110>)
 8000482:	2118      	movs	r1, #24
 8000484:	0018      	movs	r0, r3
 8000486:	f000 fa2e 	bl	80008e6 <LEDS_OFF>
	        SEND_DATA(pixel, dmaBuffer, NUM_PIXELS, NEOPIXEL_ONE, NEOPIXEL_ZERO);
 800048a:	4939      	ldr	r1, [pc, #228]	; (8000570 <main+0x114>)
 800048c:	4837      	ldr	r0, [pc, #220]	; (800056c <main+0x110>)
 800048e:	2306      	movs	r3, #6
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	230c      	movs	r3, #12
 8000494:	2218      	movs	r2, #24
 8000496:	f000 fa99 	bl	80009cc <SEND_DATA>
	        HAL_SuspendTick();
 800049a:	f000 fe4f 	bl	800113c <HAL_SuspendTick>
	        HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800049e:	2101      	movs	r1, #1
 80004a0:	2000      	movs	r0, #0
 80004a2:	f001 fbb7 	bl	8001c14 <HAL_PWR_EnterSLEEPMode>
	        HAL_ResumeTick();
 80004a6:	f000 fe57 	bl	8001158 <HAL_ResumeTick>
	        continue;
 80004aa:	e05b      	b.n	8000564 <main+0x108>
	    }

	    switch (colorCase)
 80004ac:	4b31      	ldr	r3, [pc, #196]	; (8000574 <main+0x118>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	2b04      	cmp	r3, #4
 80004b4:	d852      	bhi.n	800055c <main+0x100>
 80004b6:	009a      	lsls	r2, r3, #2
 80004b8:	4b2f      	ldr	r3, [pc, #188]	; (8000578 <main+0x11c>)
 80004ba:	18d3      	adds	r3, r2, r3
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	469f      	mov	pc, r3
	    {
	    case 0:
	        RGB_COLORS(pixel, NUM_PIXELS, 0, 200, 0);  // Blue
 80004c0:	482a      	ldr	r0, [pc, #168]	; (800056c <main+0x110>)
 80004c2:	2300      	movs	r3, #0
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	23c8      	movs	r3, #200	; 0xc8
 80004c8:	2200      	movs	r2, #0
 80004ca:	2118      	movs	r1, #24
 80004cc:	f000 fa3e 	bl	800094c <RGB_COLORS>
	        SEND_DATA(pixel, dmaBuffer, NUM_PIXELS, NEOPIXEL_ONE, NEOPIXEL_ZERO);
 80004d0:	4927      	ldr	r1, [pc, #156]	; (8000570 <main+0x114>)
 80004d2:	4826      	ldr	r0, [pc, #152]	; (800056c <main+0x110>)
 80004d4:	2306      	movs	r3, #6
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	230c      	movs	r3, #12
 80004da:	2218      	movs	r2, #24
 80004dc:	f000 fa76 	bl	80009cc <SEND_DATA>
	        break;
 80004e0:	e040      	b.n	8000564 <main+0x108>
	    case 1:
	        RGB_COLORS(pixel, NUM_PIXELS, 200, 0, 60);  // Orange
 80004e2:	4822      	ldr	r0, [pc, #136]	; (800056c <main+0x110>)
 80004e4:	233c      	movs	r3, #60	; 0x3c
 80004e6:	9300      	str	r3, [sp, #0]
 80004e8:	2300      	movs	r3, #0
 80004ea:	22c8      	movs	r2, #200	; 0xc8
 80004ec:	2118      	movs	r1, #24
 80004ee:	f000 fa2d 	bl	800094c <RGB_COLORS>
	    	SEND_DATA(pixel, dmaBuffer, NUM_PIXELS, NEOPIXEL_ONE, NEOPIXEL_ZERO);
 80004f2:	491f      	ldr	r1, [pc, #124]	; (8000570 <main+0x114>)
 80004f4:	481d      	ldr	r0, [pc, #116]	; (800056c <main+0x110>)
 80004f6:	2306      	movs	r3, #6
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	230c      	movs	r3, #12
 80004fc:	2218      	movs	r2, #24
 80004fe:	f000 fa65 	bl	80009cc <SEND_DATA>
	        break;
 8000502:	e02f      	b.n	8000564 <main+0x108>
	    case 2:
	        RGB_COLORS(pixel, NUM_PIXELS, 255, 255, 255);  // White
 8000504:	4819      	ldr	r0, [pc, #100]	; (800056c <main+0x110>)
 8000506:	23ff      	movs	r3, #255	; 0xff
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	23ff      	movs	r3, #255	; 0xff
 800050c:	22ff      	movs	r2, #255	; 0xff
 800050e:	2118      	movs	r1, #24
 8000510:	f000 fa1c 	bl	800094c <RGB_COLORS>
	        SEND_DATA(pixel, dmaBuffer, NUM_PIXELS, NEOPIXEL_ONE, NEOPIXEL_ZERO);
 8000514:	4916      	ldr	r1, [pc, #88]	; (8000570 <main+0x114>)
 8000516:	4815      	ldr	r0, [pc, #84]	; (800056c <main+0x110>)
 8000518:	2306      	movs	r3, #6
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	230c      	movs	r3, #12
 800051e:	2218      	movs	r2, #24
 8000520:	f000 fa54 	bl	80009cc <SEND_DATA>
	        break;
 8000524:	e01e      	b.n	8000564 <main+0x108>
	    case 3:
	    	DodgersBlueWhiteWave(pixel, dmaBuffer, NUM_PIXELS, 150, NEOPIXEL_ONE, NEOPIXEL_ZERO);
 8000526:	4912      	ldr	r1, [pc, #72]	; (8000570 <main+0x114>)
 8000528:	4810      	ldr	r0, [pc, #64]	; (800056c <main+0x110>)
 800052a:	2306      	movs	r3, #6
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	230c      	movs	r3, #12
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2396      	movs	r3, #150	; 0x96
 8000534:	2218      	movs	r2, #24
 8000536:	f000 fb03 	bl	8000b40 <DodgersBlueWhiteWave>
	        break;
 800053a:	e013      	b.n	8000564 <main+0x108>
	        break;
	    case 4:
	        Twinkle(pixel, dmaBuffer, NUM_PIXELS, 0xFFFFFF, 400, 100, NEOPIXEL_ONE, NEOPIXEL_ZERO);  // White twinkle
 800053c:	4a0f      	ldr	r2, [pc, #60]	; (800057c <main+0x120>)
 800053e:	490c      	ldr	r1, [pc, #48]	; (8000570 <main+0x114>)
 8000540:	480a      	ldr	r0, [pc, #40]	; (800056c <main+0x110>)
 8000542:	2306      	movs	r3, #6
 8000544:	9303      	str	r3, [sp, #12]
 8000546:	230c      	movs	r3, #12
 8000548:	9302      	str	r3, [sp, #8]
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	23c8      	movs	r3, #200	; 0xc8
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	0013      	movs	r3, r2
 8000556:	2218      	movs	r2, #24
 8000558:	f000 fa94 	bl	8000a84 <Twinkle>
	    default:
	        colorCase = 0; // Reset to first case
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <main+0x118>)
 800055e:	2200      	movs	r2, #0
 8000560:	701a      	strb	r2, [r3, #0]
	        break;
 8000562:	46c0      	nop			; (mov r8, r8)
	    if (sleepFlag == 1) {
 8000564:	e787      	b.n	8000476 <main+0x1a>
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	20000a91 	.word	0x20000a91
 800056c:	2000012c 	.word	0x2000012c
 8000570:	2000018c 	.word	0x2000018c
 8000574:	20000a90 	.word	0x20000a90
 8000578:	08004bf0 	.word	0x08004bf0
 800057c:	00ffffff 	.word	0x00ffffff

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b093      	sub	sp, #76	; 0x4c
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	2414      	movs	r4, #20
 8000588:	193b      	adds	r3, r7, r4
 800058a:	0018      	movs	r0, r3
 800058c:	2334      	movs	r3, #52	; 0x34
 800058e:	001a      	movs	r2, r3
 8000590:	2100      	movs	r1, #0
 8000592:	f003 fc51 	bl	8003e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	0018      	movs	r0, r3
 800059a:	2310      	movs	r3, #16
 800059c:	001a      	movs	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	f003 fc4a 	bl	8003e38 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fb69 	bl	8001c80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	2202      	movs	r2, #2
 80005b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	2280      	movs	r2, #128	; 0x80
 80005b8:	0052      	lsls	r2, r2, #1
 80005ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	2240      	movs	r2, #64	; 0x40
 80005c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	193b      	adds	r3, r7, r4
 80005d0:	0018      	movs	r0, r3
 80005d2:	f001 fbd9 	bl	8001d88 <HAL_RCC_OscConfig>
 80005d6:	1e03      	subs	r3, r0, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005da:	f000 f965 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2207      	movs	r2, #7
 80005e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2100      	movs	r1, #0
 80005fa:	0018      	movs	r0, r3
 80005fc:	f001 fed4 	bl	80023a8 <HAL_RCC_ClockConfig>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000604:	f000 f950 	bl	80008a8 <Error_Handler>
  }
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	b013      	add	sp, #76	; 0x4c
 800060e:	bd90      	pop	{r4, r7, pc}

08000610 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08e      	sub	sp, #56	; 0x38
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000616:	2328      	movs	r3, #40	; 0x28
 8000618:	18fb      	adds	r3, r7, r3
 800061a:	0018      	movs	r0, r3
 800061c:	2310      	movs	r3, #16
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f003 fc09 	bl	8003e38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000626:	231c      	movs	r3, #28
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	0018      	movs	r0, r3
 800062c:	230c      	movs	r3, #12
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f003 fc01 	bl	8003e38 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000636:	003b      	movs	r3, r7
 8000638:	0018      	movs	r0, r3
 800063a:	231c      	movs	r3, #28
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f003 fbfa 	bl	8003e38 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000644:	4b2f      	ldr	r3, [pc, #188]	; (8000704 <MX_TIM3_Init+0xf4>)
 8000646:	4a30      	ldr	r2, [pc, #192]	; (8000708 <MX_TIM3_Init+0xf8>)
 8000648:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800064a:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <MX_TIM3_Init+0xf4>)
 800064c:	2200      	movs	r2, #0
 800064e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000650:	4b2c      	ldr	r3, [pc, #176]	; (8000704 <MX_TIM3_Init+0xf4>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 18;
 8000656:	4b2b      	ldr	r3, [pc, #172]	; (8000704 <MX_TIM3_Init+0xf4>)
 8000658:	2212      	movs	r2, #18
 800065a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800065c:	4b29      	ldr	r3, [pc, #164]	; (8000704 <MX_TIM3_Init+0xf4>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000662:	4b28      	ldr	r3, [pc, #160]	; (8000704 <MX_TIM3_Init+0xf4>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000668:	4b26      	ldr	r3, [pc, #152]	; (8000704 <MX_TIM3_Init+0xf4>)
 800066a:	0018      	movs	r0, r3
 800066c:	f002 f826 	bl	80026bc <HAL_TIM_Base_Init>
 8000670:	1e03      	subs	r3, r0, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000674:	f000 f918 	bl	80008a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000678:	2128      	movs	r1, #40	; 0x28
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	0152      	lsls	r2, r2, #5
 8000680:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000682:	187a      	adds	r2, r7, r1
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <MX_TIM3_Init+0xf4>)
 8000686:	0011      	movs	r1, r2
 8000688:	0018      	movs	r0, r3
 800068a:	f002 fca7 	bl	8002fdc <HAL_TIM_ConfigClockSource>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000692:	f000 f909 	bl	80008a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000696:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <MX_TIM3_Init+0xf4>)
 8000698:	0018      	movs	r0, r3
 800069a:	f002 f867 	bl	800276c <HAL_TIM_PWM_Init>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80006a2:	f000 f901 	bl	80008a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a6:	211c      	movs	r1, #28
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006b4:	187a      	adds	r2, r7, r1
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <MX_TIM3_Init+0xf4>)
 80006b8:	0011      	movs	r1, r2
 80006ba:	0018      	movs	r0, r3
 80006bc:	f003 fa1e 	bl	8003afc <HAL_TIMEx_MasterConfigSynchronization>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80006c4:	f000 f8f0 	bl	80008a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006c8:	003b      	movs	r3, r7
 80006ca:	2260      	movs	r2, #96	; 0x60
 80006cc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006ce:	003b      	movs	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d4:	003b      	movs	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006da:	003b      	movs	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006e0:	0039      	movs	r1, r7
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_TIM3_Init+0xf4>)
 80006e4:	2208      	movs	r2, #8
 80006e6:	0018      	movs	r0, r3
 80006e8:	f002 fb78 	bl	8002ddc <HAL_TIM_PWM_ConfigChannel>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80006f0:	f000 f8da 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006f4:	4b03      	ldr	r3, [pc, #12]	; (8000704 <MX_TIM3_Init+0xf4>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f000 fb42 	bl	8000d80 <HAL_TIM_MspPostInit>

}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b00e      	add	sp, #56	; 0x38
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000084 	.word	0x20000084
 8000708:	40000400 	.word	0x40000400

0800070c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_DMA_Init+0x38>)
 8000714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_DMA_Init+0x38>)
 8000718:	2101      	movs	r1, #1
 800071a:	430a      	orrs	r2, r1
 800071c:	639a      	str	r2, [r3, #56]	; 0x38
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_DMA_Init+0x38>)
 8000720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000722:	2201      	movs	r2, #1
 8000724:	4013      	ands	r3, r2
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	2009      	movs	r0, #9
 8000730:	f000 fdcc 	bl	80012cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000734:	2009      	movs	r0, #9
 8000736:	f000 fdde 	bl	80012f6 <HAL_NVIC_EnableIRQ>

}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b002      	add	sp, #8
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	40021000 	.word	0x40021000

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b089      	sub	sp, #36	; 0x24
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	240c      	movs	r4, #12
 8000750:	193b      	adds	r3, r7, r4
 8000752:	0018      	movs	r0, r3
 8000754:	2314      	movs	r3, #20
 8000756:	001a      	movs	r2, r3
 8000758:	2100      	movs	r1, #0
 800075a:	f003 fb6d 	bl	8003e38 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b28      	ldr	r3, [pc, #160]	; (8000800 <MX_GPIO_Init+0xb8>)
 8000760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000762:	4b27      	ldr	r3, [pc, #156]	; (8000800 <MX_GPIO_Init+0xb8>)
 8000764:	2101      	movs	r1, #1
 8000766:	430a      	orrs	r2, r1
 8000768:	635a      	str	r2, [r3, #52]	; 0x34
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <MX_GPIO_Init+0xb8>)
 800076c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800076e:	2201      	movs	r2, #1
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_GPIO_Init+0xb8>)
 8000778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <MX_GPIO_Init+0xb8>)
 800077c:	2102      	movs	r1, #2
 800077e:	430a      	orrs	r2, r1
 8000780:	635a      	str	r2, [r3, #52]	; 0x34
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_GPIO_Init+0xb8>)
 8000784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000786:	2202      	movs	r2, #2
 8000788:	4013      	ands	r3, r2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800078e:	23a0      	movs	r3, #160	; 0xa0
 8000790:	05db      	lsls	r3, r3, #23
 8000792:	2201      	movs	r2, #1
 8000794:	2110      	movs	r1, #16
 8000796:	0018      	movs	r0, r3
 8000798:	f001 f9ea 	bl	8001b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800079c:	193b      	adds	r3, r7, r4
 800079e:	2208      	movs	r2, #8
 80007a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2288      	movs	r2, #136	; 0x88
 80007a6:	0352      	lsls	r2, r2, #13
 80007a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	193a      	adds	r2, r7, r4
 80007b2:	23a0      	movs	r3, #160	; 0xa0
 80007b4:	05db      	lsls	r3, r3, #23
 80007b6:	0011      	movs	r1, r2
 80007b8:	0018      	movs	r0, r3
 80007ba:	f001 f875 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007be:	0021      	movs	r1, r4
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2210      	movs	r2, #16
 80007c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2201      	movs	r2, #1
 80007ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d8:	187a      	adds	r2, r7, r1
 80007da:	23a0      	movs	r3, #160	; 0xa0
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	0011      	movs	r1, r2
 80007e0:	0018      	movs	r0, r3
 80007e2:	f001 f861 	bl	80018a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2101      	movs	r1, #1
 80007ea:	2006      	movs	r0, #6
 80007ec:	f000 fd6e 	bl	80012cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80007f0:	2006      	movs	r0, #6
 80007f2:	f000 fd80 	bl	80012f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b009      	add	sp, #36	; 0x24
 80007fc:	bd90      	pop	{r4, r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2108      	movs	r1, #8
 8000810:	0018      	movs	r0, r3
 8000812:	f002 f9f9 	bl	8002c08 <HAL_TIM_PWM_Stop_DMA>
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	0002      	movs	r2, r0
 8000828:	1dbb      	adds	r3, r7, #6
 800082a:	801a      	strh	r2, [r3, #0]
    static uint32_t last_tick = 0;  // Stores the last tick when the button was pressed
    uint32_t current_tick = HAL_GetTick();  // Get the current system tick
 800082c:	f000 fc7c 	bl	8001128 <HAL_GetTick>
 8000830:	0003      	movs	r3, r0
 8000832:	60fb      	str	r3, [r7, #12]

    // Debounce: Ignore interrupts within 500ms of the last trigger
    if (GPIO_Pin == GPIO_PIN_3) {  // Ensure it's triggered by the correct pin
 8000834:	1dbb      	adds	r3, r7, #6
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	2b08      	cmp	r3, #8
 800083a:	d12c      	bne.n	8000896 <HAL_GPIO_EXTI_Rising_Callback+0x76>
        if ((current_tick - last_tick) < 500) {  // 200 ms debounce time
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <HAL_GPIO_EXTI_Rising_Callback+0x7c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	68fa      	ldr	r2, [r7, #12]
 8000842:	1ad2      	subs	r2, r2, r3
 8000844:	23fa      	movs	r3, #250	; 0xfa
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	429a      	cmp	r2, r3
 800084a:	d323      	bcc.n	8000894 <HAL_GPIO_EXTI_Rising_Callback+0x74>
            return;
        }

        last_tick = current_tick;  // Update the last tick
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <HAL_GPIO_EXTI_Rising_Callback+0x7c>)
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	601a      	str	r2, [r3, #0]

        if (sleepFlag == 1) {
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <HAL_GPIO_EXTI_Rising_Callback+0x80>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b01      	cmp	r3, #1
 800085a:	d106      	bne.n	800086a <HAL_GPIO_EXTI_Rising_Callback+0x4a>
            // Wake up from sleep mode
            sleepFlag = 0;
 800085c:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <HAL_GPIO_EXTI_Rising_Callback+0x80>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
            colorCase = 0;
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
 8000868:	e015      	b.n	8000896 <HAL_GPIO_EXTI_Rising_Callback+0x76>
        } else {
            // Cycle through color cases, including sleep mode
            colorCase = (colorCase + 1) % (LED_MODE_COUNT + 1); // Add one for sleep case
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	3301      	adds	r3, #1
 8000872:	2105      	movs	r1, #5
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff fdbd 	bl	80003f4 <__aeabi_idivmod>
 800087a:	000b      	movs	r3, r1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 8000880:	701a      	strb	r2, [r3, #0]
            if (colorCase == LED_MODE_COUNT) {
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b04      	cmp	r3, #4
 800088a:	d104      	bne.n	8000896 <HAL_GPIO_EXTI_Rising_Callback+0x76>
                sleepFlag = 1; // Enter sleep mode
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <HAL_GPIO_EXTI_Rising_Callback+0x80>)
 800088e:	2201      	movs	r2, #1
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	e000      	b.n	8000896 <HAL_GPIO_EXTI_Rising_Callback+0x76>
            return;
 8000894:	46c0      	nop			; (mov r8, r8)
            }
        }
    }
}
 8000896:	46bd      	mov	sp, r7
 8000898:	b004      	add	sp, #16
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000a94 	.word	0x20000a94
 80008a0:	20000a91 	.word	0x20000a91
 80008a4:	20000a90 	.word	0x20000a90

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <Error_Handler+0x8>

080008b2 <check_elapsed_time>:
#include "main.h"

extern TIM_HandleTypeDef htim3;

// Helper to check non-blocking delays
uint8_t check_elapsed_time(uint32_t *last_tick, uint32_t interval) {
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	6039      	str	r1, [r7, #0]
    if (HAL_GetTick() - *last_tick >= interval) {
 80008bc:	f000 fc34 	bl	8001128 <HAL_GetTick>
 80008c0:	0002      	movs	r2, r0
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	683a      	ldr	r2, [r7, #0]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d806      	bhi.n	80008dc <check_elapsed_time+0x2a>
        *last_tick = HAL_GetTick();
 80008ce:	f000 fc2b 	bl	8001128 <HAL_GetTick>
 80008d2:	0002      	movs	r2, r0
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	601a      	str	r2, [r3, #0]
        return 1;
 80008d8:	2301      	movs	r3, #1
 80008da:	e000      	b.n	80008de <check_elapsed_time+0x2c>
    }
    return 0;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	0018      	movs	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <LEDS_OFF>:

void LEDS_OFF(PixelRGB_t *colors, uint8_t num_of_leds) {
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b084      	sub	sp, #16
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	000a      	movs	r2, r1
 80008f0:	1cfb      	adds	r3, r7, #3
 80008f2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < num_of_leds; i++) {
 80008f4:	230f      	movs	r3, #15
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
 80008fc:	e01a      	b.n	8000934 <LEDS_OFF+0x4e>
        colors[i].color.r = 0;
 80008fe:	210f      	movs	r1, #15
 8000900:	187b      	adds	r3, r7, r1
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	18d3      	adds	r3, r2, r3
 800090a:	2200      	movs	r2, #0
 800090c:	705a      	strb	r2, [r3, #1]
        colors[i].color.g = 0;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	18d3      	adds	r3, r2, r3
 8000918:	2200      	movs	r2, #0
 800091a:	709a      	strb	r2, [r3, #2]
        colors[i].color.b = 0;
 800091c:	187b      	adds	r3, r7, r1
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	18d3      	adds	r3, r2, r3
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < num_of_leds; i++) {
 800092a:	187b      	adds	r3, r7, r1
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	187b      	adds	r3, r7, r1
 8000930:	3201      	adds	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	230f      	movs	r3, #15
 8000936:	18fa      	adds	r2, r7, r3
 8000938:	1cfb      	adds	r3, r7, #3
 800093a:	7812      	ldrb	r2, [r2, #0]
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	429a      	cmp	r2, r3
 8000940:	d3dd      	bcc.n	80008fe <LEDS_OFF+0x18>
    }
}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b004      	add	sp, #16
 800094a:	bd80      	pop	{r7, pc}

0800094c <RGB_COLORS>:

void RGB_COLORS(PixelRGB_t *colors, uint8_t num_of_leds, uint8_t red_hue, uint8_t blue_hue, uint8_t green_hue) {
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	000c      	movs	r4, r1
 8000956:	0010      	movs	r0, r2
 8000958:	0019      	movs	r1, r3
 800095a:	1cfb      	adds	r3, r7, #3
 800095c:	1c22      	adds	r2, r4, #0
 800095e:	701a      	strb	r2, [r3, #0]
 8000960:	1cbb      	adds	r3, r7, #2
 8000962:	1c02      	adds	r2, r0, #0
 8000964:	701a      	strb	r2, [r3, #0]
 8000966:	1c7b      	adds	r3, r7, #1
 8000968:	1c0a      	adds	r2, r1, #0
 800096a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < num_of_leds; i++) {
 800096c:	230f      	movs	r3, #15
 800096e:	18fb      	adds	r3, r7, r3
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	e01e      	b.n	80009b4 <RGB_COLORS+0x68>
        colors[i].color.r = red_hue;
 8000976:	210f      	movs	r1, #15
 8000978:	187b      	adds	r3, r7, r1
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	18d3      	adds	r3, r2, r3
 8000982:	1cba      	adds	r2, r7, #2
 8000984:	7812      	ldrb	r2, [r2, #0]
 8000986:	705a      	strb	r2, [r3, #1]
        colors[i].color.g = green_hue;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	18d2      	adds	r2, r2, r3
 8000992:	2320      	movs	r3, #32
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	7093      	strb	r3, [r2, #2]
        colors[i].color.b = blue_hue;
 800099a:	187b      	adds	r3, r7, r1
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	18d3      	adds	r3, r2, r3
 80009a4:	1c7a      	adds	r2, r7, #1
 80009a6:	7812      	ldrb	r2, [r2, #0]
 80009a8:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < num_of_leds; i++) {
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	3201      	adds	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	230f      	movs	r3, #15
 80009b6:	18fa      	adds	r2, r7, r3
 80009b8:	1cfb      	adds	r3, r7, #3
 80009ba:	7812      	ldrb	r2, [r2, #0]
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d3d9      	bcc.n	8000976 <RGB_COLORS+0x2a>
    }
}
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b005      	add	sp, #20
 80009ca:	bd90      	pop	{r4, r7, pc}

080009cc <SEND_DATA>:

void SEND_DATA(PixelRGB_t *colors, uint32_t *dma_buffer, uint8_t num_of_leds, uint32_t high_time, uint32_t low_time) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	701a      	strb	r2, [r3, #0]
    uint32_t *buffer_pointer = dma_buffer;
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	617b      	str	r3, [r7, #20]
    for (uint8_t i = 0; i < num_of_leds; i++) {
 80009e0:	2313      	movs	r3, #19
 80009e2:	18fb      	adds	r3, r7, r3
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
 80009e8:	e02f      	b.n	8000a4a <SEND_DATA+0x7e>
        for (int8_t j = 23; j >= 0; j--) {
 80009ea:	2312      	movs	r3, #18
 80009ec:	18fb      	adds	r3, r7, r3
 80009ee:	2217      	movs	r2, #23
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e01f      	b.n	8000a34 <SEND_DATA+0x68>
            *buffer_pointer++ = (colors[i].data >> j) & 0x01 ? high_time : low_time;
 80009f4:	2313      	movs	r3, #19
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	18d3      	adds	r3, r2, r3
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	2312      	movs	r3, #18
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b25b      	sxtb	r3, r3
 8000a0a:	40da      	lsrs	r2, r3
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4013      	ands	r3, r2
 8000a12:	d001      	beq.n	8000a18 <SEND_DATA+0x4c>
 8000a14:	683a      	ldr	r2, [r7, #0]
 8000a16:	e000      	b.n	8000a1a <SEND_DATA+0x4e>
 8000a18:	6a3a      	ldr	r2, [r7, #32]
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	1d19      	adds	r1, r3, #4
 8000a1e:	6179      	str	r1, [r7, #20]
 8000a20:	601a      	str	r2, [r3, #0]
        for (int8_t j = 23; j >= 0; j--) {
 8000a22:	2112      	movs	r1, #18
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b25b      	sxtb	r3, r3
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	701a      	strb	r2, [r3, #0]
 8000a34:	2312      	movs	r3, #18
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a3c:	d9da      	bls.n	80009f4 <SEND_DATA+0x28>
    for (uint8_t i = 0; i < num_of_leds; i++) {
 8000a3e:	2113      	movs	r1, #19
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	3201      	adds	r2, #1
 8000a48:	701a      	strb	r2, [r3, #0]
 8000a4a:	2313      	movs	r3, #19
 8000a4c:	18fa      	adds	r2, r7, r3
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	7812      	ldrb	r2, [r2, #0]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d3c8      	bcc.n	80009ea <SEND_DATA+0x1e>
        }
    }
    *buffer_pointer = 0; // Reset timing
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_3, dma_buffer, (num_of_leds * 24) + 1);
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	2218      	movs	r2, #24
 8000a66:	4353      	muls	r3, r2
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <SEND_DATA+0xb4>)
 8000a72:	2108      	movs	r1, #8
 8000a74:	f001 feda 	bl	800282c <HAL_TIM_PWM_Start_DMA>
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b006      	add	sp, #24
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000084 	.word	0x20000084

08000a84 <Twinkle>:
    }
}

void Twinkle(PixelRGB_t *pixels, uint32_t *dmaBuffer, uint8_t num_leds,
             uint32_t twinkle_color, uint8_t sparkles, uint8_t delay_ms,
             uint32_t high_time, uint32_t low_time) {
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	1dfb      	adds	r3, r7, #7
 8000a92:	701a      	strb	r2, [r3, #0]
    static uint32_t last_tick = 0;

    if (check_elapsed_time(&last_tick, delay_ms)) {
 8000a94:	232c      	movs	r3, #44	; 0x2c
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <Twinkle+0xb8>)
 8000a9c:	0011      	movs	r1, r2
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f7ff ff07 	bl	80008b2 <check_elapsed_time>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d045      	beq.n	8000b34 <Twinkle+0xb0>
        for (uint8_t i = 0; i < num_leds; i++) {
 8000aa8:	2317      	movs	r3, #23
 8000aaa:	18fb      	adds	r3, r7, r3
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	e01a      	b.n	8000ae8 <Twinkle+0x64>
            pixels[i].color.r = 50;
 8000ab2:	2117      	movs	r1, #23
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	18d3      	adds	r3, r2, r3
 8000abe:	2232      	movs	r2, #50	; 0x32
 8000ac0:	705a      	strb	r2, [r3, #1]
            pixels[i].color.g = 50;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	18d3      	adds	r3, r2, r3
 8000acc:	2232      	movs	r2, #50	; 0x32
 8000ace:	709a      	strb	r2, [r3, #2]
            pixels[i].color.b = 50;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	18d3      	adds	r3, r2, r3
 8000ada:	2232      	movs	r2, #50	; 0x32
 8000adc:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < num_leds; i++) {
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	781a      	ldrb	r2, [r3, #0]
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	3201      	adds	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
 8000ae8:	2317      	movs	r3, #23
 8000aea:	18fa      	adds	r2, r7, r3
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	7812      	ldrb	r2, [r2, #0]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d3dd      	bcc.n	8000ab2 <Twinkle+0x2e>
        }
        uint8_t index = rand() % num_leds;
 8000af6:	f003 f863 	bl	8003bc0 <rand>
 8000afa:	0002      	movs	r2, r0
 8000afc:	1dfb      	adds	r3, r7, #7
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	0019      	movs	r1, r3
 8000b02:	0010      	movs	r0, r2
 8000b04:	f7ff fc76 	bl	80003f4 <__aeabi_idivmod>
 8000b08:	000b      	movs	r3, r1
 8000b0a:	001a      	movs	r2, r3
 8000b0c:	2116      	movs	r1, #22
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	701a      	strb	r2, [r3, #0]
        pixels[index].data = twinkle_color;
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	68fa      	ldr	r2, [r7, #12]
 8000b1a:	18d3      	adds	r3, r2, r3
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	601a      	str	r2, [r3, #0]
        SEND_DATA(pixels, dmaBuffer, num_leds, high_time, low_time);
 8000b20:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	68b9      	ldr	r1, [r7, #8]
 8000b28:	68f8      	ldr	r0, [r7, #12]
 8000b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	0023      	movs	r3, r4
 8000b30:	f7ff ff4c 	bl	80009cc <SEND_DATA>
    }
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b007      	add	sp, #28
 8000b3a:	bd90      	pop	{r4, r7, pc}
 8000b3c:	20000a98 	.word	0x20000a98

08000b40 <DodgersBlueWhiteWave>:
    }
}

void DodgersBlueWhiteWave(PixelRGB_t *pixels, uint32_t *dmaBuffer, uint8_t num_leds,
                          uint8_t wave_speed, uint32_t high_time, uint32_t low_time)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af02      	add	r7, sp, #8
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	1dbb      	adds	r3, r7, #6
 8000b52:	1c0a      	adds	r2, r1, #0
 8000b54:	701a      	strb	r2, [r3, #0]
    static uint8_t wave_offset = 0; // Tracks the position of the wave
    static uint32_t last_tick = 0;  // Non-blocking timing for wave updates

    // Define Dodgers Blue color (RGB = 0, 0, 255)
    const uint8_t blue_r = 0;
 8000b56:	2316      	movs	r3, #22
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
    const uint8_t blue_g = 0;
 8000b5e:	2315      	movs	r3, #21
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
    const uint8_t blue_b = 200;
 8000b66:	2314      	movs	r3, #20
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	22c8      	movs	r2, #200	; 0xc8
 8000b6c:	701a      	strb	r2, [r3, #0]

    // Define White color (RGB = 255, 255, 255)
    const uint8_t white_r = 200;
 8000b6e:	2313      	movs	r3, #19
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	22c8      	movs	r2, #200	; 0xc8
 8000b74:	701a      	strb	r2, [r3, #0]
    const uint8_t white_g = 200;
 8000b76:	2312      	movs	r3, #18
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	22c8      	movs	r2, #200	; 0xc8
 8000b7c:	701a      	strb	r2, [r3, #0]
    const uint8_t white_b = 200;
 8000b7e:	2311      	movs	r3, #17
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	22c8      	movs	r2, #200	; 0xc8
 8000b84:	701a      	strb	r2, [r3, #0]

    if (check_elapsed_time(&last_tick, wave_speed)) {
 8000b86:	1dbb      	adds	r3, r7, #6
 8000b88:	781a      	ldrb	r2, [r3, #0]
 8000b8a:	4b42      	ldr	r3, [pc, #264]	; (8000c94 <DodgersBlueWhiteWave+0x154>)
 8000b8c:	0011      	movs	r1, r2
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f7ff fe8f 	bl	80008b2 <check_elapsed_time>
 8000b94:	1e03      	subs	r3, r0, #0
 8000b96:	d078      	beq.n	8000c8a <DodgersBlueWhiteWave+0x14a>
        for (uint8_t i = 0; i < num_leds; i++) {
 8000b98:	2317      	movs	r3, #23
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	e055      	b.n	8000c4e <DodgersBlueWhiteWave+0x10e>
            // Calculate wave position for alternating effect
            uint8_t position = (i + wave_offset) % num_leds;
 8000ba2:	2417      	movs	r4, #23
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4a3b      	ldr	r2, [pc, #236]	; (8000c98 <DodgersBlueWhiteWave+0x158>)
 8000baa:	7812      	ldrb	r2, [r2, #0]
 8000bac:	189a      	adds	r2, r3, r2
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	0010      	movs	r0, r2
 8000bb6:	f7ff fc1d 	bl	80003f4 <__aeabi_idivmod>
 8000bba:	000b      	movs	r3, r1
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2110      	movs	r1, #16
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	701a      	strb	r2, [r3, #0]

            // Alternate blue and white based on position
            if (position % 2 == 0) {
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4013      	ands	r3, r2
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d11b      	bne.n	8000c0a <DodgersBlueWhiteWave+0xca>
                // Blue
                pixels[i].color.r = blue_r;
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	18d3      	adds	r3, r2, r3
 8000bdc:	2216      	movs	r2, #22
 8000bde:	18ba      	adds	r2, r7, r2
 8000be0:	7812      	ldrb	r2, [r2, #0]
 8000be2:	705a      	strb	r2, [r3, #1]
                pixels[i].color.g = blue_g;
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	18d3      	adds	r3, r2, r3
 8000bee:	2215      	movs	r2, #21
 8000bf0:	18ba      	adds	r2, r7, r2
 8000bf2:	7812      	ldrb	r2, [r2, #0]
 8000bf4:	709a      	strb	r2, [r3, #2]
                pixels[i].color.b = blue_b;
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	18d3      	adds	r3, r2, r3
 8000c00:	2214      	movs	r2, #20
 8000c02:	18ba      	adds	r2, r7, r2
 8000c04:	7812      	ldrb	r2, [r2, #0]
 8000c06:	701a      	strb	r2, [r3, #0]
 8000c08:	e01b      	b.n	8000c42 <DodgersBlueWhiteWave+0x102>
            } else {
                // White
                pixels[i].color.r = white_r;
 8000c0a:	2117      	movs	r1, #23
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	18d3      	adds	r3, r2, r3
 8000c16:	2213      	movs	r2, #19
 8000c18:	18ba      	adds	r2, r7, r2
 8000c1a:	7812      	ldrb	r2, [r2, #0]
 8000c1c:	705a      	strb	r2, [r3, #1]
                pixels[i].color.g = white_g;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	18d3      	adds	r3, r2, r3
 8000c28:	2212      	movs	r2, #18
 8000c2a:	18ba      	adds	r2, r7, r2
 8000c2c:	7812      	ldrb	r2, [r2, #0]
 8000c2e:	709a      	strb	r2, [r3, #2]
                pixels[i].color.b = white_b;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	18d3      	adds	r3, r2, r3
 8000c3a:	2211      	movs	r2, #17
 8000c3c:	18ba      	adds	r2, r7, r2
 8000c3e:	7812      	ldrb	r2, [r2, #0]
 8000c40:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < num_leds; i++) {
 8000c42:	2117      	movs	r1, #23
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	781a      	ldrb	r2, [r3, #0]
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	3201      	adds	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	2317      	movs	r3, #23
 8000c50:	18fa      	adds	r2, r7, r3
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	7812      	ldrb	r2, [r2, #0]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d3a2      	bcc.n	8000ba2 <DodgersBlueWhiteWave+0x62>
            }
        }

        // Move the wave forward
        wave_offset = (wave_offset + 1) % num_leds;
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <DodgersBlueWhiteWave+0x158>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	1c5a      	adds	r2, r3, #1
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	0019      	movs	r1, r3
 8000c68:	0010      	movs	r0, r2
 8000c6a:	f7ff fbc3 	bl	80003f4 <__aeabi_idivmod>
 8000c6e:	000b      	movs	r3, r1
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <DodgersBlueWhiteWave+0x158>)
 8000c74:	701a      	strb	r2, [r3, #0]

        // Send the updated LED data
        SEND_DATA(pixels, dmaBuffer, num_leds, high_time, low_time);
 8000c76:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	781a      	ldrb	r2, [r3, #0]
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	68f8      	ldr	r0, [r7, #12]
 8000c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	0023      	movs	r3, r4
 8000c86:	f7ff fea1 	bl	80009cc <SEND_DATA>
    }
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b007      	add	sp, #28
 8000c90:	bd90      	pop	{r4, r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	20000a9c 	.word	0x20000a9c
 8000c98:	20000aa0 	.word	0x20000aa0

08000c9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca8:	2101      	movs	r1, #1
 8000caa:	430a      	orrs	r2, r1
 8000cac:	641a      	str	r2, [r3, #64]	; 0x40
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc0:	2180      	movs	r1, #128	; 0x80
 8000cc2:	0549      	lsls	r1, r1, #21
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	055b      	lsls	r3, r3, #21
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b002      	add	sp, #8
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a1f      	ldr	r2, [pc, #124]	; (8000d70 <HAL_TIM_Base_MspInit+0x8c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d137      	bne.n	8000d66 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <HAL_TIM_Base_MspInit+0x90>)
 8000cf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <HAL_TIM_Base_MspInit+0x90>)
 8000cfc:	2102      	movs	r1, #2
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d02:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <HAL_TIM_Base_MspInit+0x90>)
 8000d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d06:	2202      	movs	r2, #2
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Channel1;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <HAL_TIM_Base_MspInit+0x94>)
 8000d10:	4a1a      	ldr	r2, [pc, #104]	; (8000d7c <HAL_TIM_Base_MspInit+0x98>)
 8000d12:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_TIM_Base_MspInit+0x94>)
 8000d16:	2222      	movs	r2, #34	; 0x22
 8000d18:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <HAL_TIM_Base_MspInit+0x94>)
 8000d1c:	2210      	movs	r2, #16
 8000d1e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_TIM_Base_MspInit+0x94>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <HAL_TIM_Base_MspInit+0x94>)
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_TIM_Base_MspInit+0x94>)
 8000d2e:	2280      	movs	r2, #128	; 0x80
 8000d30:	0092      	lsls	r2, r2, #2
 8000d32:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_TIM_Base_MspInit+0x94>)
 8000d36:	2280      	movs	r2, #128	; 0x80
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_TIM_Base_MspInit+0x94>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <HAL_TIM_Base_MspInit+0x94>)
 8000d44:	22c0      	movs	r2, #192	; 0xc0
 8000d46:	0192      	lsls	r2, r2, #6
 8000d48:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_TIM_Base_MspInit+0x94>)
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 faef 	bl	8001330 <HAL_DMA_Init>
 8000d52:	1e03      	subs	r3, r0, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8000d56:	f7ff fda7 	bl	80008a8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <HAL_TIM_Base_MspInit+0x94>)
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_TIM_Base_MspInit+0x94>)
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b004      	add	sp, #16
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	40000400 	.word	0x40000400
 8000d74:	40021000 	.word	0x40021000
 8000d78:	200000d0 	.word	0x200000d0
 8000d7c:	40020008 	.word	0x40020008

08000d80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	240c      	movs	r4, #12
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	2314      	movs	r3, #20
 8000d90:	001a      	movs	r2, r3
 8000d92:	2100      	movs	r1, #0
 8000d94:	f003 f850 	bl	8003e38 <memset>
  if(htim->Instance==TIM3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <HAL_TIM_MspPostInit+0x70>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d121      	bne.n	8000de6 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_TIM_MspPostInit+0x74>)
 8000da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <HAL_TIM_MspPostInit+0x74>)
 8000da8:	2102      	movs	r1, #2
 8000daa:	430a      	orrs	r2, r1
 8000dac:	635a      	str	r2, [r3, #52]	; 0x34
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_TIM_MspPostInit+0x74>)
 8000db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db2:	2202      	movs	r2, #2
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dba:	0021      	movs	r1, r4
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <HAL_TIM_MspPostInit+0x78>)
 8000dde:	0019      	movs	r1, r3
 8000de0:	0010      	movs	r0, r2
 8000de2:	f000 fd61 	bl	80018a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b009      	add	sp, #36	; 0x24
 8000dec:	bd90      	pop	{r4, r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	40000400 	.word	0x40000400
 8000df4:	40021000 	.word	0x40021000
 8000df8:	50000400 	.word	0x50000400

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <NMI_Handler+0x4>

08000e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <HardFault_Handler+0x4>

08000e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e20:	f000 f970 	bl	8001104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000e2e:	2008      	movs	r0, #8
 8000e30:	f000 febc 	bl	8001bac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000e34:	46c0      	nop			; (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <DMA1_Channel1_IRQHandler+0x14>)
 8000e42:	0018      	movs	r0, r3
 8000e44:	f000 fbee 	bl	8001624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	200000d0 	.word	0x200000d0

08000e54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  return 1;
 8000e58:	2301      	movs	r3, #1
}
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <_kill>:

int _kill(int pid, int sig)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e6a:	f003 f83b 	bl	8003ee4 <__errno>
 8000e6e:	0003      	movs	r3, r0
 8000e70:	2216      	movs	r2, #22
 8000e72:	601a      	str	r2, [r3, #0]
  return -1;
 8000e74:	2301      	movs	r3, #1
 8000e76:	425b      	negs	r3, r3
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b002      	add	sp, #8
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <_exit>:

void _exit (int status)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e88:	2301      	movs	r3, #1
 8000e8a:	425a      	negs	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	0011      	movs	r1, r2
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff ffe5 	bl	8000e60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e96:	e7fe      	b.n	8000e96 <_exit+0x16>

08000e98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	e00a      	b.n	8000ec0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eaa:	e000      	b.n	8000eae <_read+0x16>
 8000eac:	bf00      	nop
 8000eae:	0001      	movs	r1, r0
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	60ba      	str	r2, [r7, #8]
 8000eb6:	b2ca      	uxtb	r2, r1
 8000eb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	dbf0      	blt.n	8000eaa <_read+0x12>
  }

  return len;
 8000ec8:	687b      	ldr	r3, [r7, #4]
}
 8000eca:	0018      	movs	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b006      	add	sp, #24
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	e009      	b.n	8000ef8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	1c5a      	adds	r2, r3, #1
 8000ee8:	60ba      	str	r2, [r7, #8]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	0018      	movs	r0, r3
 8000eee:	e000      	b.n	8000ef2 <_write+0x20>
 8000ef0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	dbf1      	blt.n	8000ee4 <_write+0x12>
  }
  return len;
 8000f00:	687b      	ldr	r3, [r7, #4]
}
 8000f02:	0018      	movs	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b006      	add	sp, #24
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <_close>:

int _close(int file)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f12:	2301      	movs	r3, #1
 8000f14:	425b      	negs	r3, r3
}
 8000f16:	0018      	movs	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	2280      	movs	r2, #128	; 0x80
 8000f2c:	0192      	lsls	r2, r2, #6
 8000f2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	0018      	movs	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b002      	add	sp, #8
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <_isatty>:

int _isatty(int file)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b002      	add	sp, #8
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b004      	add	sp, #16
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f6c:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <_sbrk+0x5c>)
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <_sbrk+0x60>)
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <_sbrk+0x64>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <_sbrk+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	18d3      	adds	r3, r2, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d207      	bcs.n	8000fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f94:	f002 ffa6 	bl	8003ee4 <__errno>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	425b      	negs	r3, r3
 8000fa2:	e009      	b.n	8000fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	18d2      	adds	r2, r2, r3
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <_sbrk+0x64>)
 8000fb4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b006      	add	sp, #24
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20002000 	.word	0x20002000
 8000fc4:	00000400 	.word	0x00000400
 8000fc8:	20000aa4 	.word	0x20000aa4
 8000fcc:	20000bf8 	.word	0x20000bf8

08000fd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe0:	f7ff fff6 	bl	8000fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe4:	480c      	ldr	r0, [pc, #48]	; (8001018 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fe6:	490d      	ldr	r1, [pc, #52]	; (800101c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <LoopForever+0xe>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ffc:	4c0a      	ldr	r4, [pc, #40]	; (8001028 <LoopForever+0x16>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800100a:	f002 ff71 	bl	8003ef0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800100e:	f7ff fa25 	bl	800045c <main>

08001012 <LoopForever>:

LoopForever:
  b LoopForever
 8001012:	e7fe      	b.n	8001012 <LoopForever>
  ldr   r0, =_estack
 8001014:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800101c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001020:	08004d80 	.word	0x08004d80
  ldr r2, =_sbss
 8001024:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001028:	20000bf8 	.word	0x20000bf8

0800102c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800102c:	e7fe      	b.n	800102c <ADC1_IRQHandler>
	...

08001030 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <HAL_Init+0x3c>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_Init+0x3c>)
 8001042:	2180      	movs	r1, #128	; 0x80
 8001044:	0049      	lsls	r1, r1, #1
 8001046:	430a      	orrs	r2, r1
 8001048:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104a:	2003      	movs	r0, #3
 800104c:	f000 f810 	bl	8001070 <HAL_InitTick>
 8001050:	1e03      	subs	r3, r0, #0
 8001052:	d003      	beq.n	800105c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001054:	1dfb      	adds	r3, r7, #7
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	e001      	b.n	8001060 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800105c:	f7ff fe1e 	bl	8000c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001060:	1dfb      	adds	r3, r7, #7
 8001062:	781b      	ldrb	r3, [r3, #0]
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	b002      	add	sp, #8
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40022000 	.word	0x40022000

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001078:	230f      	movs	r3, #15
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_InitTick+0x88>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d02b      	beq.n	80010e0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_InitTick+0x8c>)
 800108a:	681c      	ldr	r4, [r3, #0]
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <HAL_InitTick+0x88>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	0019      	movs	r1, r3
 8001092:	23fa      	movs	r3, #250	; 0xfa
 8001094:	0098      	lsls	r0, r3, #2
 8001096:	f7ff f83d 	bl	8000114 <__udivsi3>
 800109a:	0003      	movs	r3, r0
 800109c:	0019      	movs	r1, r3
 800109e:	0020      	movs	r0, r4
 80010a0:	f7ff f838 	bl	8000114 <__udivsi3>
 80010a4:	0003      	movs	r3, r0
 80010a6:	0018      	movs	r0, r3
 80010a8:	f000 f935 	bl	8001316 <HAL_SYSTICK_Config>
 80010ac:	1e03      	subs	r3, r0, #0
 80010ae:	d112      	bne.n	80010d6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d80a      	bhi.n	80010cc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	2301      	movs	r3, #1
 80010ba:	425b      	negs	r3, r3
 80010bc:	2200      	movs	r2, #0
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 f904 	bl	80012cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_InitTick+0x90>)
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	e00d      	b.n	80010e8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010cc:	230f      	movs	r3, #15
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	e008      	b.n	80010e8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010d6:	230f      	movs	r3, #15
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	e003      	b.n	80010e8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e0:	230f      	movs	r3, #15
 80010e2:	18fb      	adds	r3, r7, r3
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010e8:	230f      	movs	r3, #15
 80010ea:	18fb      	adds	r3, r7, r3
 80010ec:	781b      	ldrb	r3, [r3, #0]
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b005      	add	sp, #20
 80010f4:	bd90      	pop	{r4, r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000004 	.word	0x20000004

08001104 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <HAL_IncTick+0x1c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	001a      	movs	r2, r3
 800110e:	4b05      	ldr	r3, [pc, #20]	; (8001124 <HAL_IncTick+0x20>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	18d2      	adds	r2, r2, r3
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <HAL_IncTick+0x20>)
 8001116:	601a      	str	r2, [r3, #0]
}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	20000008 	.word	0x20000008
 8001124:	20000aa8 	.word	0x20000aa8

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b02      	ldr	r3, [pc, #8]	; (8001138 <HAL_GetTick+0x10>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	0018      	movs	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	20000aa8 	.word	0x20000aa8

0800113c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <HAL_SuspendTick+0x18>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_SuspendTick+0x18>)
 8001146:	2102      	movs	r1, #2
 8001148:	438a      	bics	r2, r1
 800114a:	601a      	str	r2, [r3, #0]
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	e000e010 	.word	0xe000e010

08001158 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <HAL_ResumeTick+0x18>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <HAL_ResumeTick+0x18>)
 8001162:	2102      	movs	r1, #2
 8001164:	430a      	orrs	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
}
 8001168:	46c0      	nop			; (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	e000e010 	.word	0xe000e010

08001174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	0002      	movs	r2, r0
 800117c:	1dfb      	adds	r3, r7, #7
 800117e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001180:	1dfb      	adds	r3, r7, #7
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b7f      	cmp	r3, #127	; 0x7f
 8001186:	d809      	bhi.n	800119c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001188:	1dfb      	adds	r3, r7, #7
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	001a      	movs	r2, r3
 800118e:	231f      	movs	r3, #31
 8001190:	401a      	ands	r2, r3
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_EnableIRQ+0x30>)
 8001194:	2101      	movs	r1, #1
 8001196:	4091      	lsls	r1, r2
 8001198:	000a      	movs	r2, r1
 800119a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	b002      	add	sp, #8
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	e000e100 	.word	0xe000e100

080011a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	0002      	movs	r2, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b7f      	cmp	r3, #127	; 0x7f
 80011bc:	d828      	bhi.n	8001210 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011be:	4a2f      	ldr	r2, [pc, #188]	; (800127c <__NVIC_SetPriority+0xd4>)
 80011c0:	1dfb      	adds	r3, r7, #7
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	33c0      	adds	r3, #192	; 0xc0
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	589b      	ldr	r3, [r3, r2]
 80011ce:	1dfa      	adds	r2, r7, #7
 80011d0:	7812      	ldrb	r2, [r2, #0]
 80011d2:	0011      	movs	r1, r2
 80011d4:	2203      	movs	r2, #3
 80011d6:	400a      	ands	r2, r1
 80011d8:	00d2      	lsls	r2, r2, #3
 80011da:	21ff      	movs	r1, #255	; 0xff
 80011dc:	4091      	lsls	r1, r2
 80011de:	000a      	movs	r2, r1
 80011e0:	43d2      	mvns	r2, r2
 80011e2:	401a      	ands	r2, r3
 80011e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	019b      	lsls	r3, r3, #6
 80011ea:	22ff      	movs	r2, #255	; 0xff
 80011ec:	401a      	ands	r2, r3
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	0018      	movs	r0, r3
 80011f4:	2303      	movs	r3, #3
 80011f6:	4003      	ands	r3, r0
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011fc:	481f      	ldr	r0, [pc, #124]	; (800127c <__NVIC_SetPriority+0xd4>)
 80011fe:	1dfb      	adds	r3, r7, #7
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b25b      	sxtb	r3, r3
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	430a      	orrs	r2, r1
 8001208:	33c0      	adds	r3, #192	; 0xc0
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800120e:	e031      	b.n	8001274 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001210:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <__NVIC_SetPriority+0xd8>)
 8001212:	1dfb      	adds	r3, r7, #7
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	0019      	movs	r1, r3
 8001218:	230f      	movs	r3, #15
 800121a:	400b      	ands	r3, r1
 800121c:	3b08      	subs	r3, #8
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	3306      	adds	r3, #6
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	18d3      	adds	r3, r2, r3
 8001226:	3304      	adds	r3, #4
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	1dfa      	adds	r2, r7, #7
 800122c:	7812      	ldrb	r2, [r2, #0]
 800122e:	0011      	movs	r1, r2
 8001230:	2203      	movs	r2, #3
 8001232:	400a      	ands	r2, r1
 8001234:	00d2      	lsls	r2, r2, #3
 8001236:	21ff      	movs	r1, #255	; 0xff
 8001238:	4091      	lsls	r1, r2
 800123a:	000a      	movs	r2, r1
 800123c:	43d2      	mvns	r2, r2
 800123e:	401a      	ands	r2, r3
 8001240:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	019b      	lsls	r3, r3, #6
 8001246:	22ff      	movs	r2, #255	; 0xff
 8001248:	401a      	ands	r2, r3
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	0018      	movs	r0, r3
 8001250:	2303      	movs	r3, #3
 8001252:	4003      	ands	r3, r0
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001258:	4809      	ldr	r0, [pc, #36]	; (8001280 <__NVIC_SetPriority+0xd8>)
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	001c      	movs	r4, r3
 8001260:	230f      	movs	r3, #15
 8001262:	4023      	ands	r3, r4
 8001264:	3b08      	subs	r3, #8
 8001266:	089b      	lsrs	r3, r3, #2
 8001268:	430a      	orrs	r2, r1
 800126a:	3306      	adds	r3, #6
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	18c3      	adds	r3, r0, r3
 8001270:	3304      	adds	r3, #4
 8001272:	601a      	str	r2, [r3, #0]
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b003      	add	sp, #12
 800127a:	bd90      	pop	{r4, r7, pc}
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	1e5a      	subs	r2, r3, #1
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	045b      	lsls	r3, r3, #17
 8001294:	429a      	cmp	r2, r3
 8001296:	d301      	bcc.n	800129c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001298:	2301      	movs	r3, #1
 800129a:	e010      	b.n	80012be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <SysTick_Config+0x44>)
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	3a01      	subs	r2, #1
 80012a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a4:	2301      	movs	r3, #1
 80012a6:	425b      	negs	r3, r3
 80012a8:	2103      	movs	r1, #3
 80012aa:	0018      	movs	r0, r3
 80012ac:	f7ff ff7c 	bl	80011a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <SysTick_Config+0x44>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <SysTick_Config+0x44>)
 80012b8:	2207      	movs	r2, #7
 80012ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012bc:	2300      	movs	r3, #0
}
 80012be:	0018      	movs	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b002      	add	sp, #8
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	e000e010 	.word	0xe000e010

080012cc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	210f      	movs	r1, #15
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	1c02      	adds	r2, r0, #0
 80012dc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	0011      	movs	r1, r2
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff ff5d 	bl	80011a8 <__NVIC_SetPriority>
}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b004      	add	sp, #16
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	0002      	movs	r2, r0
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b25b      	sxtb	r3, r3
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff ff33 	bl	8001174 <__NVIC_EnableIRQ>
}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	46bd      	mov	sp, r7
 8001312:	b002      	add	sp, #8
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff ffaf 	bl	8001284 <SysTick_Config>
 8001326:	0003      	movs	r3, r0
}
 8001328:	0018      	movs	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	b002      	add	sp, #8
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e077      	b.n	8001432 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a3d      	ldr	r2, [pc, #244]	; (800143c <HAL_DMA_Init+0x10c>)
 8001348:	4694      	mov	ip, r2
 800134a:	4463      	add	r3, ip
 800134c:	2114      	movs	r1, #20
 800134e:	0018      	movs	r0, r3
 8001350:	f7fe fee0 	bl	8000114 <__udivsi3>
 8001354:	0003      	movs	r3, r0
 8001356:	009a      	lsls	r2, r3, #2
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2225      	movs	r2, #37	; 0x25
 8001360:	2102      	movs	r1, #2
 8001362:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4934      	ldr	r1, [pc, #208]	; (8001440 <HAL_DMA_Init+0x110>)
 8001370:	400a      	ands	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6819      	ldr	r1, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	431a      	orrs	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	431a      	orrs	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	0018      	movs	r0, r3
 80013ae:	f000 fa2b 	bl	8001808 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	01db      	lsls	r3, r3, #7
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d102      	bne.n	80013c4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	213f      	movs	r1, #63	; 0x3f
 80013ce:	400a      	ands	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80013da:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d011      	beq.n	8001408 <HAL_DMA_Init+0xd8>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d80d      	bhi.n	8001408 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	0018      	movs	r0, r3
 80013f0:	f000 fa36 	bl	8001860 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	e008      	b.n	800141a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2225      	movs	r2, #37	; 0x25
 8001424:	2101      	movs	r1, #1
 8001426:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2224      	movs	r2, #36	; 0x24
 800142c:	2100      	movs	r1, #0
 800142e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	0018      	movs	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	b002      	add	sp, #8
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	bffdfff8 	.word	0xbffdfff8
 8001440:	ffff800f 	.word	0xffff800f

08001444 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001452:	2317      	movs	r3, #23
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2224      	movs	r2, #36	; 0x24
 800145e:	5c9b      	ldrb	r3, [r3, r2]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <HAL_DMA_Start_IT+0x24>
 8001464:	2302      	movs	r3, #2
 8001466:	e06f      	b.n	8001548 <HAL_DMA_Start_IT+0x104>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2224      	movs	r2, #36	; 0x24
 800146c:	2101      	movs	r1, #1
 800146e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2225      	movs	r2, #37	; 0x25
 8001474:	5c9b      	ldrb	r3, [r3, r2]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b01      	cmp	r3, #1
 800147a:	d157      	bne.n	800152c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2225      	movs	r2, #37	; 0x25
 8001480:	2102      	movs	r1, #2
 8001482:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2200      	movs	r2, #0
 8001488:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2101      	movs	r1, #1
 8001496:	438a      	bics	r2, r1
 8001498:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	68b9      	ldr	r1, [r7, #8]
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f000 f971 	bl	8001788 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d008      	beq.n	80014c0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	210e      	movs	r1, #14
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	e00f      	b.n	80014e0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2104      	movs	r1, #4
 80014cc:	438a      	bics	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	210a      	movs	r1, #10
 80014dc:	430a      	orrs	r2, r1
 80014de:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	025b      	lsls	r3, r3, #9
 80014ea:	4013      	ands	r3, r2
 80014ec:	d008      	beq.n	8001500 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	0049      	lsls	r1, r1, #1
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001512:	2180      	movs	r1, #128	; 0x80
 8001514:	0049      	lsls	r1, r1, #1
 8001516:	430a      	orrs	r2, r1
 8001518:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2101      	movs	r1, #1
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	e00a      	b.n	8001542 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2224      	movs	r2, #36	; 0x24
 8001536:	2100      	movs	r1, #0
 8001538:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800153a:	2317      	movs	r3, #23
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001542:	2317      	movs	r3, #23
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	781b      	ldrb	r3, [r3, #0]
}
 8001548:	0018      	movs	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	b006      	add	sp, #24
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001558:	210f      	movs	r1, #15
 800155a:	187b      	adds	r3, r7, r1
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2225      	movs	r2, #37	; 0x25
 8001564:	5c9b      	ldrb	r3, [r3, r2]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d006      	beq.n	800157a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2204      	movs	r2, #4
 8001570:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	e049      	b.n	800160e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	210e      	movs	r1, #14
 8001586:	438a      	bics	r2, r1
 8001588:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2101      	movs	r1, #1
 8001596:	438a      	bics	r2, r1
 8001598:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a4:	491d      	ldr	r1, [pc, #116]	; (800161c <HAL_DMA_Abort_IT+0xcc>)
 80015a6:	400a      	ands	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_DMA_Abort_IT+0xd0>)
 80015ac:	6859      	ldr	r1, [r3, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	221c      	movs	r2, #28
 80015b4:	4013      	ands	r3, r2
 80015b6:	2201      	movs	r2, #1
 80015b8:	409a      	lsls	r2, r3
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_DMA_Abort_IT+0xd0>)
 80015bc:	430a      	orrs	r2, r1
 80015be:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80015c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00c      	beq.n	80015ec <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015dc:	490f      	ldr	r1, [pc, #60]	; (800161c <HAL_DMA_Abort_IT+0xcc>)
 80015de:	400a      	ands	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80015ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2225      	movs	r2, #37	; 0x25
 80015f0:	2101      	movs	r1, #1
 80015f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2224      	movs	r2, #36	; 0x24
 80015f8:	2100      	movs	r1, #0
 80015fa:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001600:	2b00      	cmp	r3, #0
 8001602:	d004      	beq.n	800160e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	0010      	movs	r0, r2
 800160c:	4798      	blx	r3
    }
  }
  return status;
 800160e:	230f      	movs	r3, #15
 8001610:	18fb      	adds	r3, r7, r3
 8001612:	781b      	ldrb	r3, [r3, #0]
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	b004      	add	sp, #16
 800161a:	bd80      	pop	{r7, pc}
 800161c:	fffffeff 	.word	0xfffffeff
 8001620:	40020000 	.word	0x40020000

08001624 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800162c:	4b55      	ldr	r3, [pc, #340]	; (8001784 <HAL_DMA_IRQHandler+0x160>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	221c      	movs	r2, #28
 8001640:	4013      	ands	r3, r2
 8001642:	2204      	movs	r2, #4
 8001644:	409a      	lsls	r2, r3
 8001646:	0013      	movs	r3, r2
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	4013      	ands	r3, r2
 800164c:	d027      	beq.n	800169e <HAL_DMA_IRQHandler+0x7a>
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	2204      	movs	r2, #4
 8001652:	4013      	ands	r3, r2
 8001654:	d023      	beq.n	800169e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2220      	movs	r2, #32
 800165e:	4013      	ands	r3, r2
 8001660:	d107      	bne.n	8001672 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2104      	movs	r1, #4
 800166e:	438a      	bics	r2, r1
 8001670:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001672:	4b44      	ldr	r3, [pc, #272]	; (8001784 <HAL_DMA_IRQHandler+0x160>)
 8001674:	6859      	ldr	r1, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	221c      	movs	r2, #28
 800167c:	4013      	ands	r3, r2
 800167e:	2204      	movs	r2, #4
 8001680:	409a      	lsls	r2, r3
 8001682:	4b40      	ldr	r3, [pc, #256]	; (8001784 <HAL_DMA_IRQHandler+0x160>)
 8001684:	430a      	orrs	r2, r1
 8001686:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	2b00      	cmp	r3, #0
 800168e:	d100      	bne.n	8001692 <HAL_DMA_IRQHandler+0x6e>
 8001690:	e073      	b.n	800177a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	0010      	movs	r0, r2
 800169a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800169c:	e06d      	b.n	800177a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	221c      	movs	r2, #28
 80016a4:	4013      	ands	r3, r2
 80016a6:	2202      	movs	r2, #2
 80016a8:	409a      	lsls	r2, r3
 80016aa:	0013      	movs	r3, r2
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	4013      	ands	r3, r2
 80016b0:	d02e      	beq.n	8001710 <HAL_DMA_IRQHandler+0xec>
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	2202      	movs	r2, #2
 80016b6:	4013      	ands	r3, r2
 80016b8:	d02a      	beq.n	8001710 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2220      	movs	r2, #32
 80016c2:	4013      	ands	r3, r2
 80016c4:	d10b      	bne.n	80016de <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	210a      	movs	r1, #10
 80016d2:	438a      	bics	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2225      	movs	r2, #37	; 0x25
 80016da:	2101      	movs	r1, #1
 80016dc:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80016de:	4b29      	ldr	r3, [pc, #164]	; (8001784 <HAL_DMA_IRQHandler+0x160>)
 80016e0:	6859      	ldr	r1, [r3, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	221c      	movs	r2, #28
 80016e8:	4013      	ands	r3, r2
 80016ea:	2202      	movs	r2, #2
 80016ec:	409a      	lsls	r2, r3
 80016ee:	4b25      	ldr	r3, [pc, #148]	; (8001784 <HAL_DMA_IRQHandler+0x160>)
 80016f0:	430a      	orrs	r2, r1
 80016f2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2224      	movs	r2, #36	; 0x24
 80016f8:	2100      	movs	r1, #0
 80016fa:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	2b00      	cmp	r3, #0
 8001702:	d03a      	beq.n	800177a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	0010      	movs	r0, r2
 800170c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800170e:	e034      	b.n	800177a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	221c      	movs	r2, #28
 8001716:	4013      	ands	r3, r2
 8001718:	2208      	movs	r2, #8
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	4013      	ands	r3, r2
 8001722:	d02b      	beq.n	800177c <HAL_DMA_IRQHandler+0x158>
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2208      	movs	r2, #8
 8001728:	4013      	ands	r3, r2
 800172a:	d027      	beq.n	800177c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	210e      	movs	r1, #14
 8001738:	438a      	bics	r2, r1
 800173a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_DMA_IRQHandler+0x160>)
 800173e:	6859      	ldr	r1, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	221c      	movs	r2, #28
 8001746:	4013      	ands	r3, r2
 8001748:	2201      	movs	r2, #1
 800174a:	409a      	lsls	r2, r3
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <HAL_DMA_IRQHandler+0x160>)
 800174e:	430a      	orrs	r2, r1
 8001750:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2225      	movs	r2, #37	; 0x25
 800175c:	2101      	movs	r1, #1
 800175e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2224      	movs	r2, #36	; 0x24
 8001764:	2100      	movs	r1, #0
 8001766:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	0010      	movs	r0, r2
 8001778:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	46c0      	nop			; (mov r8, r8)
}
 800177e:	46bd      	mov	sp, r7
 8001780:	b004      	add	sp, #16
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40020000 	.word	0x40020000

08001788 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800179e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80017b0:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <DMA_SetConfig+0x7c>)
 80017b4:	6859      	ldr	r1, [r3, #4]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	221c      	movs	r2, #28
 80017bc:	4013      	ands	r3, r2
 80017be:	2201      	movs	r2, #1
 80017c0:	409a      	lsls	r2, r3
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <DMA_SetConfig+0x7c>)
 80017c4:	430a      	orrs	r2, r1
 80017c6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b10      	cmp	r3, #16
 80017d6:	d108      	bne.n	80017ea <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017e8:	e007      	b.n	80017fa <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	60da      	str	r2, [r3, #12]
}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b004      	add	sp, #16
 8001800:	bd80      	pop	{r7, pc}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	40020000 	.word	0x40020000

08001808 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	4a10      	ldr	r2, [pc, #64]	; (8001858 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001818:	4694      	mov	ip, r2
 800181a:	4463      	add	r3, ip
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	001a      	movs	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	001a      	movs	r2, r3
 800182a:	23ff      	movs	r3, #255	; 0xff
 800182c:	4013      	ands	r3, r2
 800182e:	3b08      	subs	r3, #8
 8001830:	2114      	movs	r1, #20
 8001832:	0018      	movs	r0, r3
 8001834:	f7fe fc6e 	bl	8000114 <__udivsi3>
 8001838:	0003      	movs	r3, r0
 800183a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a07      	ldr	r2, [pc, #28]	; (800185c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001840:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	221f      	movs	r2, #31
 8001846:	4013      	ands	r3, r2
 8001848:	2201      	movs	r2, #1
 800184a:	409a      	lsls	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001850:	46c0      	nop			; (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	b004      	add	sp, #16
 8001856:	bd80      	pop	{r7, pc}
 8001858:	10008200 	.word	0x10008200
 800185c:	40020880 	.word	0x40020880

08001860 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	223f      	movs	r2, #63	; 0x3f
 800186e:	4013      	ands	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001876:	4694      	mov	ip, r2
 8001878:	4463      	add	r3, ip
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	001a      	movs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001886:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	3b01      	subs	r3, #1
 800188c:	2203      	movs	r2, #3
 800188e:	4013      	ands	r3, r2
 8001890:	2201      	movs	r2, #1
 8001892:	409a      	lsls	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001898:	46c0      	nop			; (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	b004      	add	sp, #16
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	1000823f 	.word	0x1000823f
 80018a4:	40020940 	.word	0x40020940

080018a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b6:	e147      	b.n	8001b48 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2101      	movs	r1, #1
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4091      	lsls	r1, r2
 80018c2:	000a      	movs	r2, r1
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d100      	bne.n	80018d0 <HAL_GPIO_Init+0x28>
 80018ce:	e138      	b.n	8001b42 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2203      	movs	r2, #3
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d005      	beq.n	80018e8 <HAL_GPIO_Init+0x40>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2203      	movs	r2, #3
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d130      	bne.n	800194a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2203      	movs	r2, #3
 80018f4:	409a      	lsls	r2, r3
 80018f6:	0013      	movs	r3, r2
 80018f8:	43da      	mvns	r2, r3
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	409a      	lsls	r2, r3
 800190a:	0013      	movs	r3, r2
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800191e:	2201      	movs	r2, #1
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
 8001924:	0013      	movs	r3, r2
 8001926:	43da      	mvns	r2, r3
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	091b      	lsrs	r3, r3, #4
 8001934:	2201      	movs	r2, #1
 8001936:	401a      	ands	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
 800193c:	0013      	movs	r3, r2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2203      	movs	r2, #3
 8001950:	4013      	ands	r3, r2
 8001952:	2b03      	cmp	r3, #3
 8001954:	d017      	beq.n	8001986 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	409a      	lsls	r2, r3
 8001964:	0013      	movs	r3, r2
 8001966:	43da      	mvns	r2, r3
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	409a      	lsls	r2, r3
 8001978:	0013      	movs	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2203      	movs	r2, #3
 800198c:	4013      	ands	r3, r2
 800198e:	2b02      	cmp	r3, #2
 8001990:	d123      	bne.n	80019da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	08da      	lsrs	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3208      	adds	r2, #8
 800199a:	0092      	lsls	r2, r2, #2
 800199c:	58d3      	ldr	r3, [r2, r3]
 800199e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2207      	movs	r2, #7
 80019a4:	4013      	ands	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	220f      	movs	r2, #15
 80019aa:	409a      	lsls	r2, r3
 80019ac:	0013      	movs	r3, r2
 80019ae:	43da      	mvns	r2, r3
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	2107      	movs	r1, #7
 80019be:	400b      	ands	r3, r1
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	409a      	lsls	r2, r3
 80019c4:	0013      	movs	r3, r2
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	08da      	lsrs	r2, r3, #3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3208      	adds	r2, #8
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	6939      	ldr	r1, [r7, #16]
 80019d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	409a      	lsls	r2, r3
 80019e8:	0013      	movs	r3, r2
 80019ea:	43da      	mvns	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2203      	movs	r2, #3
 80019f8:	401a      	ands	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	409a      	lsls	r2, r3
 8001a00:	0013      	movs	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	23c0      	movs	r3, #192	; 0xc0
 8001a14:	029b      	lsls	r3, r3, #10
 8001a16:	4013      	ands	r3, r2
 8001a18:	d100      	bne.n	8001a1c <HAL_GPIO_Init+0x174>
 8001a1a:	e092      	b.n	8001b42 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001a1c:	4a50      	ldr	r2, [pc, #320]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3318      	adds	r3, #24
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	589b      	ldr	r3, [r3, r2]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	4013      	ands	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	220f      	movs	r2, #15
 8001a34:	409a      	lsls	r2, r3
 8001a36:	0013      	movs	r3, r2
 8001a38:	43da      	mvns	r2, r3
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	23a0      	movs	r3, #160	; 0xa0
 8001a44:	05db      	lsls	r3, r3, #23
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d013      	beq.n	8001a72 <HAL_GPIO_Init+0x1ca>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a45      	ldr	r2, [pc, #276]	; (8001b64 <HAL_GPIO_Init+0x2bc>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d00d      	beq.n	8001a6e <HAL_GPIO_Init+0x1c6>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a44      	ldr	r2, [pc, #272]	; (8001b68 <HAL_GPIO_Init+0x2c0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d007      	beq.n	8001a6a <HAL_GPIO_Init+0x1c2>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a43      	ldr	r2, [pc, #268]	; (8001b6c <HAL_GPIO_Init+0x2c4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_GPIO_Init+0x1be>
 8001a62:	2303      	movs	r3, #3
 8001a64:	e006      	b.n	8001a74 <HAL_GPIO_Init+0x1cc>
 8001a66:	2305      	movs	r3, #5
 8001a68:	e004      	b.n	8001a74 <HAL_GPIO_Init+0x1cc>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e002      	b.n	8001a74 <HAL_GPIO_Init+0x1cc>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <HAL_GPIO_Init+0x1cc>
 8001a72:	2300      	movs	r3, #0
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	2103      	movs	r1, #3
 8001a78:	400a      	ands	r2, r1
 8001a7a:	00d2      	lsls	r2, r2, #3
 8001a7c:	4093      	lsls	r3, r2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001a84:	4936      	ldr	r1, [pc, #216]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	089b      	lsrs	r3, r3, #2
 8001a8a:	3318      	adds	r3, #24
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a92:	4b33      	ldr	r3, [pc, #204]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	035b      	lsls	r3, r3, #13
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ab6:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001abc:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	43da      	mvns	r2, r3
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	039b      	lsls	r3, r3, #14
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ae6:	4a1e      	ldr	r2, [pc, #120]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001ae8:	2384      	movs	r3, #132	; 0x84
 8001aea:	58d3      	ldr	r3, [r2, r3]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	43da      	mvns	r2, r3
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	029b      	lsls	r3, r3, #10
 8001b00:	4013      	ands	r3, r2
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b0c:	4914      	ldr	r1, [pc, #80]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001b0e:	2284      	movs	r2, #132	; 0x84
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001b14:	4a12      	ldr	r2, [pc, #72]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	58d3      	ldr	r3, [r2, r3]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	025b      	lsls	r3, r3, #9
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b3a:	4909      	ldr	r1, [pc, #36]	; (8001b60 <HAL_GPIO_Init+0x2b8>)
 8001b3c:	2280      	movs	r2, #128	; 0x80
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	3301      	adds	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	40da      	lsrs	r2, r3
 8001b50:	1e13      	subs	r3, r2, #0
 8001b52:	d000      	beq.n	8001b56 <HAL_GPIO_Init+0x2ae>
 8001b54:	e6b0      	b.n	80018b8 <HAL_GPIO_Init+0x10>
  }
}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	46c0      	nop			; (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b006      	add	sp, #24
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40021800 	.word	0x40021800
 8001b64:	50000400 	.word	0x50000400
 8001b68:	50000800 	.word	0x50000800
 8001b6c:	50000c00 	.word	0x50000c00

08001b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	0008      	movs	r0, r1
 8001b7a:	0011      	movs	r1, r2
 8001b7c:	1cbb      	adds	r3, r7, #2
 8001b7e:	1c02      	adds	r2, r0, #0
 8001b80:	801a      	strh	r2, [r3, #0]
 8001b82:	1c7b      	adds	r3, r7, #1
 8001b84:	1c0a      	adds	r2, r1, #0
 8001b86:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b88:	1c7b      	adds	r3, r7, #1
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d004      	beq.n	8001b9a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b90:	1cbb      	adds	r3, r7, #2
 8001b92:	881a      	ldrh	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b98:	e003      	b.n	8001ba2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b9a:	1cbb      	adds	r3, r7, #2
 8001b9c:	881a      	ldrh	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	b002      	add	sp, #8
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	1dbb      	adds	r3, r7, #6
 8001bb6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	1dba      	adds	r2, r7, #6
 8001bbe:	8812      	ldrh	r2, [r2, #0]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d008      	beq.n	8001bd6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001bc6:	1dba      	adds	r2, r7, #6
 8001bc8:	8812      	ldrh	r2, [r2, #0]
 8001bca:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001bcc:	1dbb      	adds	r3, r7, #6
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f7fe fe25 	bl	8000820 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	1dba      	adds	r2, r7, #6
 8001bdc:	8812      	ldrh	r2, [r2, #0]
 8001bde:	4013      	ands	r3, r2
 8001be0:	d008      	beq.n	8001bf4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001be4:	1dba      	adds	r2, r7, #6
 8001be6:	8812      	ldrh	r2, [r2, #0]
 8001be8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001bea:	1dbb      	adds	r3, r7, #6
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f000 f806 	bl	8001c00 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001bf4:	46c0      	nop			; (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b002      	add	sp, #8
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40021800 	.word	0x40021800

08001c00 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	0002      	movs	r2, r0
 8001c08:	1dbb      	adds	r3, r7, #6
 8001c0a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001c0c:	46c0      	nop			; (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	b002      	add	sp, #8
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_PWR_EnterSLEEPMode>:
  * @note   When WFI entry is used, tick interrupt have to be disabled if not
  *         desired as the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	000a      	movs	r2, r1
 8001c1e:	1cfb      	adds	r3, r7, #3
 8001c20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator != PWR_MAINREGULATOR_ON)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d008      	beq.n	8001c3a <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if ((PWR->SR2 & PWR_SR2_REGLPF) == 0x00u)
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4013      	ands	r3, r2
 8001c32:	d10c      	bne.n	8001c4e <HAL_PWR_EnterSLEEPMode+0x3a>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8001c34:	f000 f864 	bl	8001d00 <HAL_PWREx_EnableLowPowerRunMode>
 8001c38:	e009      	b.n	8001c4e <HAL_PWR_EnterSLEEPMode+0x3a>
    }
  }
  else
  {
    /* If in low-power run mode at this point, exit it */
    if ((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_PWR_EnterSLEEPMode+0x64>)
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4013      	ands	r3, r2
 8001c44:	d003      	beq.n	8001c4e <HAL_PWR_EnterSLEEPMode+0x3a>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8001c46:	f000 f869 	bl	8001d1c <HAL_PWREx_DisableLowPowerRunMode>
 8001c4a:	1e03      	subs	r3, r0, #0
 8001c4c:	d10f      	bne.n	8001c6e <HAL_PWR_EnterSLEEPMode+0x5a>
      }
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_PWR_EnterSLEEPMode+0x68>)
 8001c50:	691a      	ldr	r2, [r3, #16]
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_PWR_EnterSLEEPMode+0x68>)
 8001c54:	2104      	movs	r1, #4
 8001c56:	438a      	bics	r2, r1
 8001c58:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001c5a:	1cfb      	adds	r3, r7, #3
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001c62:	bf30      	wfi
 8001c64:	e004      	b.n	8001c70 <HAL_PWR_EnterSLEEPMode+0x5c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001c66:	bf40      	sev
    __WFE();
 8001c68:	bf20      	wfe
    __WFE();
 8001c6a:	bf20      	wfe
 8001c6c:	e000      	b.n	8001c70 <HAL_PWR_EnterSLEEPMode+0x5c>
        return ;
 8001c6e:	46c0      	nop			; (mov r8, r8)
  }
}
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b002      	add	sp, #8
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	40007000 	.word	0x40007000
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001c88:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a19      	ldr	r2, [pc, #100]	; (8001cf4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	0019      	movs	r1, r3
 8001c92:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d11f      	bne.n	8001ce4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	0013      	movs	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	189b      	adds	r3, r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4912      	ldr	r1, [pc, #72]	; (8001cfc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f7fe fa2e 	bl	8000114 <__udivsi3>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	3301      	adds	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cbe:	e008      	b.n	8001cd2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	e001      	b.n	8001cd2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e009      	b.n	8001ce6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	401a      	ands	r2, r3
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d0ed      	beq.n	8001cc0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b004      	add	sp, #16
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	fffff9ff 	.word	0xfffff9ff
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	000f4240 	.word	0x000f4240

08001d00 <HAL_PWREx_EnableLowPowerRunMode>:
  *        low power run mode
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	01c9      	lsls	r1, r1, #7
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]
}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40007000 	.word	0x40007000

08001d1c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <HAL_PWREx_DisableLowPowerRunMode+0x5c>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	0013      	movs	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	189b      	adds	r3, r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4913      	ldr	r1, [pc, #76]	; (8001d7c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7fe f9ef 	bl	8000114 <__udivsi3>
 8001d36:	0003      	movs	r3, r0
 8001d38:	3301      	adds	r3, #1
 8001d3a:	607b      	str	r3, [r7, #4]

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8001d3c:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001d42:	4910      	ldr	r1, [pc, #64]	; (8001d84 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8001d44:	400a      	ands	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]

  /* Wait until REGLPF is reset */
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001d48:	e008      	b.n	8001d5c <HAL_PWREx_DisableLowPowerRunMode+0x40>
  {
    if (wait_loop_index != 0U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
    {
      wait_loop_index--;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	e001      	b.n	8001d5c <HAL_PWREx_DisableLowPowerRunMode+0x40>
    }
    else
    {
      return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e009      	b.n	8001d70 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8001d5e:	695a      	ldr	r2, [r3, #20]
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	401a      	ands	r2, r3
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d0ed      	beq.n	8001d4a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
    }
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	0018      	movs	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b002      	add	sp, #8
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	000f4240 	.word	0x000f4240
 8001d80:	40007000 	.word	0x40007000
 8001d84:	ffffbfff 	.word	0xffffbfff

08001d88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e2f3      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4013      	ands	r3, r2
 8001da2:	d100      	bne.n	8001da6 <HAL_RCC_OscConfig+0x1e>
 8001da4:	e07c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da6:	4bc3      	ldr	r3, [pc, #780]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2238      	movs	r2, #56	; 0x38
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001db0:	4bc0      	ldr	r3, [pc, #768]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2203      	movs	r2, #3
 8001db6:	4013      	ands	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	2b10      	cmp	r3, #16
 8001dbe:	d102      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x3e>
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d002      	beq.n	8001dcc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d10b      	bne.n	8001de4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dcc:	4bb9      	ldr	r3, [pc, #740]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	029b      	lsls	r3, r3, #10
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d062      	beq.n	8001e9e <HAL_RCC_OscConfig+0x116>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d15e      	bne.n	8001e9e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e2ce      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	025b      	lsls	r3, r3, #9
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d107      	bne.n	8001e00 <HAL_RCC_OscConfig+0x78>
 8001df0:	4bb0      	ldr	r3, [pc, #704]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4baf      	ldr	r3, [pc, #700]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001df6:	2180      	movs	r1, #128	; 0x80
 8001df8:	0249      	lsls	r1, r1, #9
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	e020      	b.n	8001e42 <HAL_RCC_OscConfig+0xba>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	23a0      	movs	r3, #160	; 0xa0
 8001e06:	02db      	lsls	r3, r3, #11
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d10e      	bne.n	8001e2a <HAL_RCC_OscConfig+0xa2>
 8001e0c:	4ba9      	ldr	r3, [pc, #676]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4ba8      	ldr	r3, [pc, #672]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	02c9      	lsls	r1, r1, #11
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	4ba6      	ldr	r3, [pc, #664]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	4ba5      	ldr	r3, [pc, #660]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001e20:	2180      	movs	r1, #128	; 0x80
 8001e22:	0249      	lsls	r1, r1, #9
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	e00b      	b.n	8001e42 <HAL_RCC_OscConfig+0xba>
 8001e2a:	4ba2      	ldr	r3, [pc, #648]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4ba1      	ldr	r3, [pc, #644]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001e30:	49a1      	ldr	r1, [pc, #644]	; (80020b8 <HAL_RCC_OscConfig+0x330>)
 8001e32:	400a      	ands	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	4b9f      	ldr	r3, [pc, #636]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4b9e      	ldr	r3, [pc, #632]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001e3c:	499f      	ldr	r1, [pc, #636]	; (80020bc <HAL_RCC_OscConfig+0x334>)
 8001e3e:	400a      	ands	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d014      	beq.n	8001e74 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7ff f96d 	bl	8001128 <HAL_GetTick>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e54:	f7ff f968 	bl	8001128 <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	; 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e28d      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e66:	4b93      	ldr	r3, [pc, #588]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	029b      	lsls	r3, r3, #10
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0xcc>
 8001e72:	e015      	b.n	8001ea0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff f958 	bl	8001128 <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e7c:	e008      	b.n	8001e90 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e7e:	f7ff f953 	bl	8001128 <HAL_GetTick>
 8001e82:	0002      	movs	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b64      	cmp	r3, #100	; 0x64
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e278      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e90:	4b88      	ldr	r3, [pc, #544]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	029b      	lsls	r3, r3, #10
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d1f0      	bne.n	8001e7e <HAL_RCC_OscConfig+0xf6>
 8001e9c:	e000      	b.n	8001ea0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d100      	bne.n	8001eac <HAL_RCC_OscConfig+0x124>
 8001eaa:	e099      	b.n	8001fe0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eac:	4b81      	ldr	r3, [pc, #516]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2238      	movs	r2, #56	; 0x38
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb6:	4b7f      	ldr	r3, [pc, #508]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2203      	movs	r2, #3
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d102      	bne.n	8001ecc <HAL_RCC_OscConfig+0x144>
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d002      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d135      	bne.n	8001f3e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed2:	4b78      	ldr	r3, [pc, #480]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4013      	ands	r3, r2
 8001edc:	d005      	beq.n	8001eea <HAL_RCC_OscConfig+0x162>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e24b      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eea:	4b72      	ldr	r3, [pc, #456]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	4a74      	ldr	r2, [pc, #464]	; (80020c0 <HAL_RCC_OscConfig+0x338>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	021a      	lsls	r2, r3, #8
 8001efa:	4b6e      	ldr	r3, [pc, #440]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001efc:	430a      	orrs	r2, r1
 8001efe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d112      	bne.n	8001f2c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f06:	4b6b      	ldr	r3, [pc, #428]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a6e      	ldr	r2, [pc, #440]	; (80020c4 <HAL_RCC_OscConfig+0x33c>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	0019      	movs	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	4b67      	ldr	r3, [pc, #412]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001f16:	430a      	orrs	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001f1a:	4b66      	ldr	r3, [pc, #408]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	0adb      	lsrs	r3, r3, #11
 8001f20:	2207      	movs	r2, #7
 8001f22:	4013      	ands	r3, r2
 8001f24:	4a68      	ldr	r2, [pc, #416]	; (80020c8 <HAL_RCC_OscConfig+0x340>)
 8001f26:	40da      	lsrs	r2, r3
 8001f28:	4b68      	ldr	r3, [pc, #416]	; (80020cc <HAL_RCC_OscConfig+0x344>)
 8001f2a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f2c:	4b68      	ldr	r3, [pc, #416]	; (80020d0 <HAL_RCC_OscConfig+0x348>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0018      	movs	r0, r3
 8001f32:	f7ff f89d 	bl	8001070 <HAL_InitTick>
 8001f36:	1e03      	subs	r3, r0, #0
 8001f38:	d051      	beq.n	8001fde <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e221      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d030      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f46:	4b5b      	ldr	r3, [pc, #364]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a5e      	ldr	r2, [pc, #376]	; (80020c4 <HAL_RCC_OscConfig+0x33c>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	0019      	movs	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	4b57      	ldr	r3, [pc, #348]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001f56:	430a      	orrs	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001f5a:	4b56      	ldr	r3, [pc, #344]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	4b55      	ldr	r3, [pc, #340]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001f60:	2180      	movs	r1, #128	; 0x80
 8001f62:	0049      	lsls	r1, r1, #1
 8001f64:	430a      	orrs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7ff f8de 	bl	8001128 <HAL_GetTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f72:	f7ff f8d9 	bl	8001128 <HAL_GetTick>
 8001f76:	0002      	movs	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e1fe      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f84:	4b4b      	ldr	r3, [pc, #300]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f90:	4b48      	ldr	r3, [pc, #288]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4a4a      	ldr	r2, [pc, #296]	; (80020c0 <HAL_RCC_OscConfig+0x338>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	0019      	movs	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	021a      	lsls	r2, r3, #8
 8001fa0:	4b44      	ldr	r3, [pc, #272]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	e01b      	b.n	8001fe0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001fa8:	4b42      	ldr	r3, [pc, #264]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001fae:	4949      	ldr	r1, [pc, #292]	; (80020d4 <HAL_RCC_OscConfig+0x34c>)
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb4:	f7ff f8b8 	bl	8001128 <HAL_GetTick>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fbe:	f7ff f8b3 	bl	8001128 <HAL_GetTick>
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e1d8      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fd0:	4b38      	ldr	r3, [pc, #224]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d1f0      	bne.n	8001fbe <HAL_RCC_OscConfig+0x236>
 8001fdc:	e000      	b.n	8001fe0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fde:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2208      	movs	r2, #8
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d047      	beq.n	800207a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fea:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2238      	movs	r2, #56	; 0x38
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b18      	cmp	r3, #24
 8001ff4:	d10a      	bne.n	800200c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001ff6:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8001ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffa:	2202      	movs	r2, #2
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d03c      	beq.n	800207a <HAL_RCC_OscConfig+0x2f2>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d138      	bne.n	800207a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e1ba      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d019      	beq.n	8002048 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002014:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8002016:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002018:	4b26      	ldr	r3, [pc, #152]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 800201a:	2101      	movs	r1, #1
 800201c:	430a      	orrs	r2, r1
 800201e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7ff f882 	bl	8001128 <HAL_GetTick>
 8002024:	0003      	movs	r3, r0
 8002026:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202a:	f7ff f87d 	bl	8001128 <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e1a2      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800203c:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 800203e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002040:	2202      	movs	r2, #2
 8002042:	4013      	ands	r3, r2
 8002044:	d0f1      	beq.n	800202a <HAL_RCC_OscConfig+0x2a2>
 8002046:	e018      	b.n	800207a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002048:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 800204a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 800204e:	2101      	movs	r1, #1
 8002050:	438a      	bics	r2, r1
 8002052:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7ff f868 	bl	8001128 <HAL_GetTick>
 8002058:	0003      	movs	r3, r0
 800205a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205e:	f7ff f863 	bl	8001128 <HAL_GetTick>
 8002062:	0002      	movs	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e188      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002070:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8002072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002074:	2202      	movs	r2, #2
 8002076:	4013      	ands	r3, r2
 8002078:	d1f1      	bne.n	800205e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2204      	movs	r2, #4
 8002080:	4013      	ands	r3, r2
 8002082:	d100      	bne.n	8002086 <HAL_RCC_OscConfig+0x2fe>
 8002084:	e0c6      	b.n	8002214 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002086:	231f      	movs	r3, #31
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2238      	movs	r2, #56	; 0x38
 8002094:	4013      	ands	r3, r2
 8002096:	2b20      	cmp	r3, #32
 8002098:	d11e      	bne.n	80020d8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_RCC_OscConfig+0x32c>)
 800209c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209e:	2202      	movs	r2, #2
 80020a0:	4013      	ands	r3, r2
 80020a2:	d100      	bne.n	80020a6 <HAL_RCC_OscConfig+0x31e>
 80020a4:	e0b6      	b.n	8002214 <HAL_RCC_OscConfig+0x48c>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d000      	beq.n	80020b0 <HAL_RCC_OscConfig+0x328>
 80020ae:	e0b1      	b.n	8002214 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e166      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
 80020b4:	40021000 	.word	0x40021000
 80020b8:	fffeffff 	.word	0xfffeffff
 80020bc:	fffbffff 	.word	0xfffbffff
 80020c0:	ffff80ff 	.word	0xffff80ff
 80020c4:	ffffc7ff 	.word	0xffffc7ff
 80020c8:	00f42400 	.word	0x00f42400
 80020cc:	20000000 	.word	0x20000000
 80020d0:	20000004 	.word	0x20000004
 80020d4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020d8:	4bac      	ldr	r3, [pc, #688]	; (800238c <HAL_RCC_OscConfig+0x604>)
 80020da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	055b      	lsls	r3, r3, #21
 80020e0:	4013      	ands	r3, r2
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_OscConfig+0x360>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_RCC_OscConfig+0x362>
 80020e8:	2300      	movs	r3, #0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d011      	beq.n	8002112 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	4ba7      	ldr	r3, [pc, #668]	; (800238c <HAL_RCC_OscConfig+0x604>)
 80020f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020f2:	4ba6      	ldr	r3, [pc, #664]	; (800238c <HAL_RCC_OscConfig+0x604>)
 80020f4:	2180      	movs	r1, #128	; 0x80
 80020f6:	0549      	lsls	r1, r1, #21
 80020f8:	430a      	orrs	r2, r1
 80020fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80020fc:	4ba3      	ldr	r3, [pc, #652]	; (800238c <HAL_RCC_OscConfig+0x604>)
 80020fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	055b      	lsls	r3, r3, #21
 8002104:	4013      	ands	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800210a:	231f      	movs	r3, #31
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002112:	4b9f      	ldr	r3, [pc, #636]	; (8002390 <HAL_RCC_OscConfig+0x608>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4013      	ands	r3, r2
 800211c:	d11a      	bne.n	8002154 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800211e:	4b9c      	ldr	r3, [pc, #624]	; (8002390 <HAL_RCC_OscConfig+0x608>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	4b9b      	ldr	r3, [pc, #620]	; (8002390 <HAL_RCC_OscConfig+0x608>)
 8002124:	2180      	movs	r1, #128	; 0x80
 8002126:	0049      	lsls	r1, r1, #1
 8002128:	430a      	orrs	r2, r1
 800212a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800212c:	f7fe fffc 	bl	8001128 <HAL_GetTick>
 8002130:	0003      	movs	r3, r0
 8002132:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7fe fff7 	bl	8001128 <HAL_GetTick>
 800213a:	0002      	movs	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e11c      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002148:	4b91      	ldr	r3, [pc, #580]	; (8002390 <HAL_RCC_OscConfig+0x608>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4013      	ands	r3, r2
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x3e2>
 800215c:	4b8b      	ldr	r3, [pc, #556]	; (800238c <HAL_RCC_OscConfig+0x604>)
 800215e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002160:	4b8a      	ldr	r3, [pc, #552]	; (800238c <HAL_RCC_OscConfig+0x604>)
 8002162:	2101      	movs	r1, #1
 8002164:	430a      	orrs	r2, r1
 8002166:	65da      	str	r2, [r3, #92]	; 0x5c
 8002168:	e01c      	b.n	80021a4 <HAL_RCC_OscConfig+0x41c>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b05      	cmp	r3, #5
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x404>
 8002172:	4b86      	ldr	r3, [pc, #536]	; (800238c <HAL_RCC_OscConfig+0x604>)
 8002174:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002176:	4b85      	ldr	r3, [pc, #532]	; (800238c <HAL_RCC_OscConfig+0x604>)
 8002178:	2104      	movs	r1, #4
 800217a:	430a      	orrs	r2, r1
 800217c:	65da      	str	r2, [r3, #92]	; 0x5c
 800217e:	4b83      	ldr	r3, [pc, #524]	; (800238c <HAL_RCC_OscConfig+0x604>)
 8002180:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002182:	4b82      	ldr	r3, [pc, #520]	; (800238c <HAL_RCC_OscConfig+0x604>)
 8002184:	2101      	movs	r1, #1
 8002186:	430a      	orrs	r2, r1
 8002188:	65da      	str	r2, [r3, #92]	; 0x5c
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0x41c>
 800218c:	4b7f      	ldr	r3, [pc, #508]	; (800238c <HAL_RCC_OscConfig+0x604>)
 800218e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002190:	4b7e      	ldr	r3, [pc, #504]	; (800238c <HAL_RCC_OscConfig+0x604>)
 8002192:	2101      	movs	r1, #1
 8002194:	438a      	bics	r2, r1
 8002196:	65da      	str	r2, [r3, #92]	; 0x5c
 8002198:	4b7c      	ldr	r3, [pc, #496]	; (800238c <HAL_RCC_OscConfig+0x604>)
 800219a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800219c:	4b7b      	ldr	r3, [pc, #492]	; (800238c <HAL_RCC_OscConfig+0x604>)
 800219e:	2104      	movs	r1, #4
 80021a0:	438a      	bics	r2, r1
 80021a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d014      	beq.n	80021d6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7fe ffbc 	bl	8001128 <HAL_GetTick>
 80021b0:	0003      	movs	r3, r0
 80021b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b4:	e009      	b.n	80021ca <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7fe ffb7 	bl	8001128 <HAL_GetTick>
 80021ba:	0002      	movs	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	4a74      	ldr	r2, [pc, #464]	; (8002394 <HAL_RCC_OscConfig+0x60c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0db      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ca:	4b70      	ldr	r3, [pc, #448]	; (800238c <HAL_RCC_OscConfig+0x604>)
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	2202      	movs	r2, #2
 80021d0:	4013      	ands	r3, r2
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x42e>
 80021d4:	e013      	b.n	80021fe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d6:	f7fe ffa7 	bl	8001128 <HAL_GetTick>
 80021da:	0003      	movs	r3, r0
 80021dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021de:	e009      	b.n	80021f4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e0:	f7fe ffa2 	bl	8001128 <HAL_GetTick>
 80021e4:	0002      	movs	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	4a6a      	ldr	r2, [pc, #424]	; (8002394 <HAL_RCC_OscConfig+0x60c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e0c6      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021f4:	4b65      	ldr	r3, [pc, #404]	; (800238c <HAL_RCC_OscConfig+0x604>)
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	2202      	movs	r2, #2
 80021fa:	4013      	ands	r3, r2
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80021fe:	231f      	movs	r3, #31
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002208:	4b60      	ldr	r3, [pc, #384]	; (800238c <HAL_RCC_OscConfig+0x604>)
 800220a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800220c:	4b5f      	ldr	r3, [pc, #380]	; (800238c <HAL_RCC_OscConfig+0x604>)
 800220e:	4962      	ldr	r1, [pc, #392]	; (8002398 <HAL_RCC_OscConfig+0x610>)
 8002210:	400a      	ands	r2, r1
 8002212:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d100      	bne.n	800221e <HAL_RCC_OscConfig+0x496>
 800221c:	e0b0      	b.n	8002380 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800221e:	4b5b      	ldr	r3, [pc, #364]	; (800238c <HAL_RCC_OscConfig+0x604>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2238      	movs	r2, #56	; 0x38
 8002224:	4013      	ands	r3, r2
 8002226:	2b10      	cmp	r3, #16
 8002228:	d100      	bne.n	800222c <HAL_RCC_OscConfig+0x4a4>
 800222a:	e078      	b.n	800231e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d153      	bne.n	80022dc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002234:	4b55      	ldr	r3, [pc, #340]	; (800238c <HAL_RCC_OscConfig+0x604>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b54      	ldr	r3, [pc, #336]	; (800238c <HAL_RCC_OscConfig+0x604>)
 800223a:	4958      	ldr	r1, [pc, #352]	; (800239c <HAL_RCC_OscConfig+0x614>)
 800223c:	400a      	ands	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7fe ff72 	bl	8001128 <HAL_GetTick>
 8002244:	0003      	movs	r3, r0
 8002246:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224a:	f7fe ff6d 	bl	8001128 <HAL_GetTick>
 800224e:	0002      	movs	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e092      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800225c:	4b4b      	ldr	r3, [pc, #300]	; (800238c <HAL_RCC_OscConfig+0x604>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	049b      	lsls	r3, r3, #18
 8002264:	4013      	ands	r3, r2
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002268:	4b48      	ldr	r3, [pc, #288]	; (800238c <HAL_RCC_OscConfig+0x604>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a4c      	ldr	r2, [pc, #304]	; (80023a0 <HAL_RCC_OscConfig+0x618>)
 800226e:	4013      	ands	r3, r2
 8002270:	0019      	movs	r1, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1a      	ldr	r2, [r3, #32]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	431a      	orrs	r2, r3
 8002290:	4b3e      	ldr	r3, [pc, #248]	; (800238c <HAL_RCC_OscConfig+0x604>)
 8002292:	430a      	orrs	r2, r1
 8002294:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002296:	4b3d      	ldr	r3, [pc, #244]	; (800238c <HAL_RCC_OscConfig+0x604>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b3c      	ldr	r3, [pc, #240]	; (800238c <HAL_RCC_OscConfig+0x604>)
 800229c:	2180      	movs	r1, #128	; 0x80
 800229e:	0449      	lsls	r1, r1, #17
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80022a4:	4b39      	ldr	r3, [pc, #228]	; (800238c <HAL_RCC_OscConfig+0x604>)
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	4b38      	ldr	r3, [pc, #224]	; (800238c <HAL_RCC_OscConfig+0x604>)
 80022aa:	2180      	movs	r1, #128	; 0x80
 80022ac:	0549      	lsls	r1, r1, #21
 80022ae:	430a      	orrs	r2, r1
 80022b0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b2:	f7fe ff39 	bl	8001128 <HAL_GetTick>
 80022b6:	0003      	movs	r3, r0
 80022b8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022bc:	f7fe ff34 	bl	8001128 <HAL_GetTick>
 80022c0:	0002      	movs	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e059      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ce:	4b2f      	ldr	r3, [pc, #188]	; (800238c <HAL_RCC_OscConfig+0x604>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	2380      	movs	r3, #128	; 0x80
 80022d4:	049b      	lsls	r3, r3, #18
 80022d6:	4013      	ands	r3, r2
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0x534>
 80022da:	e051      	b.n	8002380 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022dc:	4b2b      	ldr	r3, [pc, #172]	; (800238c <HAL_RCC_OscConfig+0x604>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b2a      	ldr	r3, [pc, #168]	; (800238c <HAL_RCC_OscConfig+0x604>)
 80022e2:	492e      	ldr	r1, [pc, #184]	; (800239c <HAL_RCC_OscConfig+0x614>)
 80022e4:	400a      	ands	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe ff1e 	bl	8001128 <HAL_GetTick>
 80022ec:	0003      	movs	r3, r0
 80022ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f2:	f7fe ff19 	bl	8001128 <HAL_GetTick>
 80022f6:	0002      	movs	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e03e      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002304:	4b21      	ldr	r3, [pc, #132]	; (800238c <HAL_RCC_OscConfig+0x604>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	049b      	lsls	r3, r3, #18
 800230c:	4013      	ands	r3, r2
 800230e:	d1f0      	bne.n	80022f2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002310:	4b1e      	ldr	r3, [pc, #120]	; (800238c <HAL_RCC_OscConfig+0x604>)
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	4b1d      	ldr	r3, [pc, #116]	; (800238c <HAL_RCC_OscConfig+0x604>)
 8002316:	4923      	ldr	r1, [pc, #140]	; (80023a4 <HAL_RCC_OscConfig+0x61c>)
 8002318:	400a      	ands	r2, r1
 800231a:	60da      	str	r2, [r3, #12]
 800231c:	e030      	b.n	8002380 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e02b      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_RCC_OscConfig+0x604>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	2203      	movs	r2, #3
 8002334:	401a      	ands	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	429a      	cmp	r2, r3
 800233c:	d11e      	bne.n	800237c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2270      	movs	r2, #112	; 0x70
 8002342:	401a      	ands	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d117      	bne.n	800237c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	23fe      	movs	r3, #254	; 0xfe
 8002350:	01db      	lsls	r3, r3, #7
 8002352:	401a      	ands	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800235a:	429a      	cmp	r2, r3
 800235c:	d10e      	bne.n	800237c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	23f8      	movs	r3, #248	; 0xf8
 8002362:	039b      	lsls	r3, r3, #14
 8002364:	401a      	ands	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d106      	bne.n	800237c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	0f5b      	lsrs	r3, r3, #29
 8002372:	075a      	lsls	r2, r3, #29
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	0018      	movs	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	b008      	add	sp, #32
 8002388:	bd80      	pop	{r7, pc}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	40021000 	.word	0x40021000
 8002390:	40007000 	.word	0x40007000
 8002394:	00001388 	.word	0x00001388
 8002398:	efffffff 	.word	0xefffffff
 800239c:	feffffff 	.word	0xfeffffff
 80023a0:	1fc1808c 	.word	0x1fc1808c
 80023a4:	effefffc 	.word	0xeffefffc

080023a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0e9      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b76      	ldr	r3, [pc, #472]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2207      	movs	r2, #7
 80023c2:	4013      	ands	r3, r2
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d91e      	bls.n	8002408 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b73      	ldr	r3, [pc, #460]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2207      	movs	r2, #7
 80023d0:	4393      	bics	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	4b70      	ldr	r3, [pc, #448]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023dc:	f7fe fea4 	bl	8001128 <HAL_GetTick>
 80023e0:	0003      	movs	r3, r0
 80023e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023e4:	e009      	b.n	80023fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e6:	f7fe fe9f 	bl	8001128 <HAL_GetTick>
 80023ea:	0002      	movs	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	4a6a      	ldr	r2, [pc, #424]	; (800259c <HAL_RCC_ClockConfig+0x1f4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e0ca      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023fa:	4b67      	ldr	r3, [pc, #412]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2207      	movs	r2, #7
 8002400:	4013      	ands	r3, r2
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d1ee      	bne.n	80023e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2202      	movs	r2, #2
 800240e:	4013      	ands	r3, r2
 8002410:	d015      	beq.n	800243e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2204      	movs	r2, #4
 8002418:	4013      	ands	r3, r2
 800241a:	d006      	beq.n	800242a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800241c:	4b60      	ldr	r3, [pc, #384]	; (80025a0 <HAL_RCC_ClockConfig+0x1f8>)
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	4b5f      	ldr	r3, [pc, #380]	; (80025a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002422:	21e0      	movs	r1, #224	; 0xe0
 8002424:	01c9      	lsls	r1, r1, #7
 8002426:	430a      	orrs	r2, r1
 8002428:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800242a:	4b5d      	ldr	r3, [pc, #372]	; (80025a0 <HAL_RCC_ClockConfig+0x1f8>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	4a5d      	ldr	r2, [pc, #372]	; (80025a4 <HAL_RCC_ClockConfig+0x1fc>)
 8002430:	4013      	ands	r3, r2
 8002432:	0019      	movs	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <HAL_RCC_ClockConfig+0x1f8>)
 800243a:	430a      	orrs	r2, r1
 800243c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2201      	movs	r2, #1
 8002444:	4013      	ands	r3, r2
 8002446:	d057      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d107      	bne.n	8002460 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002450:	4b53      	ldr	r3, [pc, #332]	; (80025a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	029b      	lsls	r3, r3, #10
 8002458:	4013      	ands	r3, r2
 800245a:	d12b      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e097      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d107      	bne.n	8002478 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002468:	4b4d      	ldr	r3, [pc, #308]	; (80025a0 <HAL_RCC_ClockConfig+0x1f8>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	049b      	lsls	r3, r3, #18
 8002470:	4013      	ands	r3, r2
 8002472:	d11f      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e08b      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d107      	bne.n	8002490 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002480:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4013      	ands	r3, r2
 800248a:	d113      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e07f      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d106      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002498:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_RCC_ClockConfig+0x1f8>)
 800249a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249c:	2202      	movs	r2, #2
 800249e:	4013      	ands	r3, r2
 80024a0:	d108      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e074      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a6:	4b3e      	ldr	r3, [pc, #248]	; (80025a0 <HAL_RCC_ClockConfig+0x1f8>)
 80024a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024aa:	2202      	movs	r2, #2
 80024ac:	4013      	ands	r3, r2
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e06d      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024b4:	4b3a      	ldr	r3, [pc, #232]	; (80025a0 <HAL_RCC_ClockConfig+0x1f8>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2207      	movs	r2, #7
 80024ba:	4393      	bics	r3, r2
 80024bc:	0019      	movs	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	4b37      	ldr	r3, [pc, #220]	; (80025a0 <HAL_RCC_ClockConfig+0x1f8>)
 80024c4:	430a      	orrs	r2, r1
 80024c6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c8:	f7fe fe2e 	bl	8001128 <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d0:	e009      	b.n	80024e6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d2:	f7fe fe29 	bl	8001128 <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	4a2f      	ldr	r2, [pc, #188]	; (800259c <HAL_RCC_ClockConfig+0x1f4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e054      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <HAL_RCC_ClockConfig+0x1f8>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2238      	movs	r2, #56	; 0x38
 80024ec:	401a      	ands	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d1ec      	bne.n	80024d2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f8:	4b27      	ldr	r3, [pc, #156]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2207      	movs	r2, #7
 80024fe:	4013      	ands	r3, r2
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d21e      	bcs.n	8002544 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2207      	movs	r2, #7
 800250c:	4393      	bics	r3, r2
 800250e:	0019      	movs	r1, r3
 8002510:	4b21      	ldr	r3, [pc, #132]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002518:	f7fe fe06 	bl	8001128 <HAL_GetTick>
 800251c:	0003      	movs	r3, r0
 800251e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002520:	e009      	b.n	8002536 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002522:	f7fe fe01 	bl	8001128 <HAL_GetTick>
 8002526:	0002      	movs	r2, r0
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	4a1b      	ldr	r2, [pc, #108]	; (800259c <HAL_RCC_ClockConfig+0x1f4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e02c      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002536:	4b18      	ldr	r3, [pc, #96]	; (8002598 <HAL_RCC_ClockConfig+0x1f0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2207      	movs	r2, #7
 800253c:	4013      	ands	r3, r2
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d1ee      	bne.n	8002522 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2204      	movs	r2, #4
 800254a:	4013      	ands	r3, r2
 800254c:	d009      	beq.n	8002562 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800254e:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	4a15      	ldr	r2, [pc, #84]	; (80025a8 <HAL_RCC_ClockConfig+0x200>)
 8002554:	4013      	ands	r3, r2
 8002556:	0019      	movs	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_RCC_ClockConfig+0x1f8>)
 800255e:	430a      	orrs	r2, r1
 8002560:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002562:	f000 f829 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8002566:	0001      	movs	r1, r0
 8002568:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <HAL_RCC_ClockConfig+0x1f8>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	220f      	movs	r2, #15
 8002570:	401a      	ands	r2, r3
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <HAL_RCC_ClockConfig+0x204>)
 8002574:	0092      	lsls	r2, r2, #2
 8002576:	58d3      	ldr	r3, [r2, r3]
 8002578:	221f      	movs	r2, #31
 800257a:	4013      	ands	r3, r2
 800257c:	000a      	movs	r2, r1
 800257e:	40da      	lsrs	r2, r3
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_RCC_ClockConfig+0x208>)
 8002582:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_RCC_ClockConfig+0x20c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	0018      	movs	r0, r3
 800258a:	f7fe fd71 	bl	8001070 <HAL_InitTick>
 800258e:	0003      	movs	r3, r0
}
 8002590:	0018      	movs	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	b004      	add	sp, #16
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40022000 	.word	0x40022000
 800259c:	00001388 	.word	0x00001388
 80025a0:	40021000 	.word	0x40021000
 80025a4:	fffff0ff 	.word	0xfffff0ff
 80025a8:	ffff8fff 	.word	0xffff8fff
 80025ac:	08004c04 	.word	0x08004c04
 80025b0:	20000000 	.word	0x20000000
 80025b4:	20000004 	.word	0x20000004

080025b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025be:	4b3c      	ldr	r3, [pc, #240]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2238      	movs	r2, #56	; 0x38
 80025c4:	4013      	ands	r3, r2
 80025c6:	d10f      	bne.n	80025e8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80025c8:	4b39      	ldr	r3, [pc, #228]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	0adb      	lsrs	r3, r3, #11
 80025ce:	2207      	movs	r2, #7
 80025d0:	4013      	ands	r3, r2
 80025d2:	2201      	movs	r2, #1
 80025d4:	409a      	lsls	r2, r3
 80025d6:	0013      	movs	r3, r2
 80025d8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80025da:	6839      	ldr	r1, [r7, #0]
 80025dc:	4835      	ldr	r0, [pc, #212]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025de:	f7fd fd99 	bl	8000114 <__udivsi3>
 80025e2:	0003      	movs	r3, r0
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	e05d      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e8:	4b31      	ldr	r3, [pc, #196]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2238      	movs	r2, #56	; 0x38
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d102      	bne.n	80025fa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025f4:	4b30      	ldr	r3, [pc, #192]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x100>)
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	e054      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025fa:	4b2d      	ldr	r3, [pc, #180]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2238      	movs	r2, #56	; 0x38
 8002600:	4013      	ands	r3, r2
 8002602:	2b10      	cmp	r3, #16
 8002604:	d138      	bne.n	8002678 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002606:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2203      	movs	r2, #3
 800260c:	4013      	ands	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	2207      	movs	r2, #7
 8002618:	4013      	ands	r3, r2
 800261a:	3301      	adds	r3, #1
 800261c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d10d      	bne.n	8002640 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	4824      	ldr	r0, [pc, #144]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002628:	f7fd fd74 	bl	8000114 <__udivsi3>
 800262c:	0003      	movs	r3, r0
 800262e:	0019      	movs	r1, r3
 8002630:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	0a1b      	lsrs	r3, r3, #8
 8002636:	227f      	movs	r2, #127	; 0x7f
 8002638:	4013      	ands	r3, r2
 800263a:	434b      	muls	r3, r1
 800263c:	617b      	str	r3, [r7, #20]
        break;
 800263e:	e00d      	b.n	800265c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	481c      	ldr	r0, [pc, #112]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002644:	f7fd fd66 	bl	8000114 <__udivsi3>
 8002648:	0003      	movs	r3, r0
 800264a:	0019      	movs	r1, r3
 800264c:	4b18      	ldr	r3, [pc, #96]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	227f      	movs	r2, #127	; 0x7f
 8002654:	4013      	ands	r3, r2
 8002656:	434b      	muls	r3, r1
 8002658:	617b      	str	r3, [r7, #20]
        break;
 800265a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800265c:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	0f5b      	lsrs	r3, r3, #29
 8002662:	2207      	movs	r2, #7
 8002664:	4013      	ands	r3, r2
 8002666:	3301      	adds	r3, #1
 8002668:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	6978      	ldr	r0, [r7, #20]
 800266e:	f7fd fd51 	bl	8000114 <__udivsi3>
 8002672:	0003      	movs	r3, r0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	e015      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002678:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2238      	movs	r2, #56	; 0x38
 800267e:	4013      	ands	r3, r2
 8002680:	2b20      	cmp	r3, #32
 8002682:	d103      	bne.n	800268c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2238      	movs	r2, #56	; 0x38
 8002692:	4013      	ands	r3, r2
 8002694:	2b18      	cmp	r3, #24
 8002696:	d103      	bne.n	80026a0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002698:	23fa      	movs	r3, #250	; 0xfa
 800269a:	01db      	lsls	r3, r3, #7
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	e001      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026a4:	693b      	ldr	r3, [r7, #16]
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b006      	add	sp, #24
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	40021000 	.word	0x40021000
 80026b4:	00f42400 	.word	0x00f42400
 80026b8:	007a1200 	.word	0x007a1200

080026bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e04a      	b.n	8002764 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	223d      	movs	r2, #61	; 0x3d
 80026d2:	5c9b      	ldrb	r3, [r3, r2]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d107      	bne.n	80026ea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	223c      	movs	r2, #60	; 0x3c
 80026de:	2100      	movs	r1, #0
 80026e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	0018      	movs	r0, r3
 80026e6:	f7fe fafd 	bl	8000ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	223d      	movs	r2, #61	; 0x3d
 80026ee:	2102      	movs	r1, #2
 80026f0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3304      	adds	r3, #4
 80026fa:	0019      	movs	r1, r3
 80026fc:	0010      	movs	r0, r2
 80026fe:	f000 fe27 	bl	8003350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2248      	movs	r2, #72	; 0x48
 8002706:	2101      	movs	r1, #1
 8002708:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	223e      	movs	r2, #62	; 0x3e
 800270e:	2101      	movs	r1, #1
 8002710:	5499      	strb	r1, [r3, r2]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	223f      	movs	r2, #63	; 0x3f
 8002716:	2101      	movs	r1, #1
 8002718:	5499      	strb	r1, [r3, r2]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2240      	movs	r2, #64	; 0x40
 800271e:	2101      	movs	r1, #1
 8002720:	5499      	strb	r1, [r3, r2]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2241      	movs	r2, #65	; 0x41
 8002726:	2101      	movs	r1, #1
 8002728:	5499      	strb	r1, [r3, r2]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2242      	movs	r2, #66	; 0x42
 800272e:	2101      	movs	r1, #1
 8002730:	5499      	strb	r1, [r3, r2]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2243      	movs	r2, #67	; 0x43
 8002736:	2101      	movs	r1, #1
 8002738:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2244      	movs	r2, #68	; 0x44
 800273e:	2101      	movs	r1, #1
 8002740:	5499      	strb	r1, [r3, r2]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2245      	movs	r2, #69	; 0x45
 8002746:	2101      	movs	r1, #1
 8002748:	5499      	strb	r1, [r3, r2]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2246      	movs	r2, #70	; 0x46
 800274e:	2101      	movs	r1, #1
 8002750:	5499      	strb	r1, [r3, r2]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2247      	movs	r2, #71	; 0x47
 8002756:	2101      	movs	r1, #1
 8002758:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	223d      	movs	r2, #61	; 0x3d
 800275e:	2101      	movs	r1, #1
 8002760:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	0018      	movs	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	b002      	add	sp, #8
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e04a      	b.n	8002814 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	223d      	movs	r2, #61	; 0x3d
 8002782:	5c9b      	ldrb	r3, [r3, r2]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d107      	bne.n	800279a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	223c      	movs	r2, #60	; 0x3c
 800278e:	2100      	movs	r1, #0
 8002790:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	0018      	movs	r0, r3
 8002796:	f000 f841 	bl	800281c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	223d      	movs	r2, #61	; 0x3d
 800279e:	2102      	movs	r1, #2
 80027a0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3304      	adds	r3, #4
 80027aa:	0019      	movs	r1, r3
 80027ac:	0010      	movs	r0, r2
 80027ae:	f000 fdcf 	bl	8003350 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2248      	movs	r2, #72	; 0x48
 80027b6:	2101      	movs	r1, #1
 80027b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	223e      	movs	r2, #62	; 0x3e
 80027be:	2101      	movs	r1, #1
 80027c0:	5499      	strb	r1, [r3, r2]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	223f      	movs	r2, #63	; 0x3f
 80027c6:	2101      	movs	r1, #1
 80027c8:	5499      	strb	r1, [r3, r2]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2240      	movs	r2, #64	; 0x40
 80027ce:	2101      	movs	r1, #1
 80027d0:	5499      	strb	r1, [r3, r2]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2241      	movs	r2, #65	; 0x41
 80027d6:	2101      	movs	r1, #1
 80027d8:	5499      	strb	r1, [r3, r2]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2242      	movs	r2, #66	; 0x42
 80027de:	2101      	movs	r1, #1
 80027e0:	5499      	strb	r1, [r3, r2]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2243      	movs	r2, #67	; 0x43
 80027e6:	2101      	movs	r1, #1
 80027e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2244      	movs	r2, #68	; 0x44
 80027ee:	2101      	movs	r1, #1
 80027f0:	5499      	strb	r1, [r3, r2]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2245      	movs	r2, #69	; 0x45
 80027f6:	2101      	movs	r1, #1
 80027f8:	5499      	strb	r1, [r3, r2]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2246      	movs	r2, #70	; 0x46
 80027fe:	2101      	movs	r1, #1
 8002800:	5499      	strb	r1, [r3, r2]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2247      	movs	r2, #71	; 0x47
 8002806:	2101      	movs	r1, #1
 8002808:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	223d      	movs	r2, #61	; 0x3d
 800280e:	2101      	movs	r1, #1
 8002810:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	b002      	add	sp, #8
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002824:	46c0      	nop			; (mov r8, r8)
 8002826:	46bd      	mov	sp, r7
 8002828:	b002      	add	sp, #8
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	001a      	movs	r2, r3
 800283a:	1cbb      	adds	r3, r7, #2
 800283c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800283e:	2317      	movs	r3, #23
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d108      	bne.n	800285e <HAL_TIM_PWM_Start_DMA+0x32>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	223e      	movs	r2, #62	; 0x3e
 8002850:	5c9b      	ldrb	r3, [r3, r2]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	3b02      	subs	r3, #2
 8002856:	425a      	negs	r2, r3
 8002858:	4153      	adcs	r3, r2
 800285a:	b2db      	uxtb	r3, r3
 800285c:	e037      	b.n	80028ce <HAL_TIM_PWM_Start_DMA+0xa2>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b04      	cmp	r3, #4
 8002862:	d108      	bne.n	8002876 <HAL_TIM_PWM_Start_DMA+0x4a>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	223f      	movs	r2, #63	; 0x3f
 8002868:	5c9b      	ldrb	r3, [r3, r2]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	3b02      	subs	r3, #2
 800286e:	425a      	negs	r2, r3
 8002870:	4153      	adcs	r3, r2
 8002872:	b2db      	uxtb	r3, r3
 8002874:	e02b      	b.n	80028ce <HAL_TIM_PWM_Start_DMA+0xa2>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b08      	cmp	r3, #8
 800287a:	d108      	bne.n	800288e <HAL_TIM_PWM_Start_DMA+0x62>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2240      	movs	r2, #64	; 0x40
 8002880:	5c9b      	ldrb	r3, [r3, r2]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	3b02      	subs	r3, #2
 8002886:	425a      	negs	r2, r3
 8002888:	4153      	adcs	r3, r2
 800288a:	b2db      	uxtb	r3, r3
 800288c:	e01f      	b.n	80028ce <HAL_TIM_PWM_Start_DMA+0xa2>
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b0c      	cmp	r3, #12
 8002892:	d108      	bne.n	80028a6 <HAL_TIM_PWM_Start_DMA+0x7a>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2241      	movs	r2, #65	; 0x41
 8002898:	5c9b      	ldrb	r3, [r3, r2]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	3b02      	subs	r3, #2
 800289e:	425a      	negs	r2, r3
 80028a0:	4153      	adcs	r3, r2
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	e013      	b.n	80028ce <HAL_TIM_PWM_Start_DMA+0xa2>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b10      	cmp	r3, #16
 80028aa:	d108      	bne.n	80028be <HAL_TIM_PWM_Start_DMA+0x92>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2242      	movs	r2, #66	; 0x42
 80028b0:	5c9b      	ldrb	r3, [r3, r2]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	3b02      	subs	r3, #2
 80028b6:	425a      	negs	r2, r3
 80028b8:	4153      	adcs	r3, r2
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	e007      	b.n	80028ce <HAL_TIM_PWM_Start_DMA+0xa2>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2243      	movs	r2, #67	; 0x43
 80028c2:	5c9b      	ldrb	r3, [r3, r2]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	3b02      	subs	r3, #2
 80028c8:	425a      	negs	r2, r3
 80028ca:	4153      	adcs	r3, r2
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 80028d2:	2302      	movs	r3, #2
 80028d4:	e183      	b.n	8002bde <HAL_TIM_PWM_Start_DMA+0x3b2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d108      	bne.n	80028ee <HAL_TIM_PWM_Start_DMA+0xc2>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	223e      	movs	r2, #62	; 0x3e
 80028e0:	5c9b      	ldrb	r3, [r3, r2]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	425a      	negs	r2, r3
 80028e8:	4153      	adcs	r3, r2
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	e037      	b.n	800295e <HAL_TIM_PWM_Start_DMA+0x132>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d108      	bne.n	8002906 <HAL_TIM_PWM_Start_DMA+0xda>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	223f      	movs	r2, #63	; 0x3f
 80028f8:	5c9b      	ldrb	r3, [r3, r2]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	425a      	negs	r2, r3
 8002900:	4153      	adcs	r3, r2
 8002902:	b2db      	uxtb	r3, r3
 8002904:	e02b      	b.n	800295e <HAL_TIM_PWM_Start_DMA+0x132>
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b08      	cmp	r3, #8
 800290a:	d108      	bne.n	800291e <HAL_TIM_PWM_Start_DMA+0xf2>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2240      	movs	r2, #64	; 0x40
 8002910:	5c9b      	ldrb	r3, [r3, r2]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	425a      	negs	r2, r3
 8002918:	4153      	adcs	r3, r2
 800291a:	b2db      	uxtb	r3, r3
 800291c:	e01f      	b.n	800295e <HAL_TIM_PWM_Start_DMA+0x132>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b0c      	cmp	r3, #12
 8002922:	d108      	bne.n	8002936 <HAL_TIM_PWM_Start_DMA+0x10a>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2241      	movs	r2, #65	; 0x41
 8002928:	5c9b      	ldrb	r3, [r3, r2]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	425a      	negs	r2, r3
 8002930:	4153      	adcs	r3, r2
 8002932:	b2db      	uxtb	r3, r3
 8002934:	e013      	b.n	800295e <HAL_TIM_PWM_Start_DMA+0x132>
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b10      	cmp	r3, #16
 800293a:	d108      	bne.n	800294e <HAL_TIM_PWM_Start_DMA+0x122>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2242      	movs	r2, #66	; 0x42
 8002940:	5c9b      	ldrb	r3, [r3, r2]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	425a      	negs	r2, r3
 8002948:	4153      	adcs	r3, r2
 800294a:	b2db      	uxtb	r3, r3
 800294c:	e007      	b.n	800295e <HAL_TIM_PWM_Start_DMA+0x132>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2243      	movs	r2, #67	; 0x43
 8002952:	5c9b      	ldrb	r3, [r3, r2]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	425a      	negs	r2, r3
 800295a:	4153      	adcs	r3, r2
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d035      	beq.n	80029ce <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_TIM_PWM_Start_DMA+0x144>
 8002968:	1cbb      	adds	r3, r7, #2
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e134      	b.n	8002bde <HAL_TIM_PWM_Start_DMA+0x3b2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d104      	bne.n	8002984 <HAL_TIM_PWM_Start_DMA+0x158>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	223e      	movs	r2, #62	; 0x3e
 800297e:	2102      	movs	r1, #2
 8002980:	5499      	strb	r1, [r3, r2]
 8002982:	e026      	b.n	80029d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b04      	cmp	r3, #4
 8002988:	d104      	bne.n	8002994 <HAL_TIM_PWM_Start_DMA+0x168>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	223f      	movs	r2, #63	; 0x3f
 800298e:	2102      	movs	r1, #2
 8002990:	5499      	strb	r1, [r3, r2]
 8002992:	e01e      	b.n	80029d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b08      	cmp	r3, #8
 8002998:	d104      	bne.n	80029a4 <HAL_TIM_PWM_Start_DMA+0x178>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2240      	movs	r2, #64	; 0x40
 800299e:	2102      	movs	r1, #2
 80029a0:	5499      	strb	r1, [r3, r2]
 80029a2:	e016      	b.n	80029d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b0c      	cmp	r3, #12
 80029a8:	d104      	bne.n	80029b4 <HAL_TIM_PWM_Start_DMA+0x188>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2241      	movs	r2, #65	; 0x41
 80029ae:	2102      	movs	r1, #2
 80029b0:	5499      	strb	r1, [r3, r2]
 80029b2:	e00e      	b.n	80029d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b10      	cmp	r3, #16
 80029b8:	d104      	bne.n	80029c4 <HAL_TIM_PWM_Start_DMA+0x198>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2242      	movs	r2, #66	; 0x42
 80029be:	2102      	movs	r1, #2
 80029c0:	5499      	strb	r1, [r3, r2]
 80029c2:	e006      	b.n	80029d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2243      	movs	r2, #67	; 0x43
 80029c8:	2102      	movs	r1, #2
 80029ca:	5499      	strb	r1, [r3, r2]
 80029cc:	e001      	b.n	80029d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e105      	b.n	8002bde <HAL_TIM_PWM_Start_DMA+0x3b2>
  }

  switch (Channel)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b0c      	cmp	r3, #12
 80029d6:	d100      	bne.n	80029da <HAL_TIM_PWM_Start_DMA+0x1ae>
 80029d8:	e080      	b.n	8002adc <HAL_TIM_PWM_Start_DMA+0x2b0>
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b0c      	cmp	r3, #12
 80029de:	d900      	bls.n	80029e2 <HAL_TIM_PWM_Start_DMA+0x1b6>
 80029e0:	e0a1      	b.n	8002b26 <HAL_TIM_PWM_Start_DMA+0x2fa>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d054      	beq.n	8002a92 <HAL_TIM_PWM_Start_DMA+0x266>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d900      	bls.n	80029f0 <HAL_TIM_PWM_Start_DMA+0x1c4>
 80029ee:	e09a      	b.n	8002b26 <HAL_TIM_PWM_Start_DMA+0x2fa>
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_PWM_Start_DMA+0x1d2>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d025      	beq.n	8002a48 <HAL_TIM_PWM_Start_DMA+0x21c>
 80029fc:	e093      	b.n	8002b26 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	4a79      	ldr	r2, [pc, #484]	; (8002be8 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002a04:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	4a78      	ldr	r2, [pc, #480]	; (8002bec <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002a0c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	4a77      	ldr	r2, [pc, #476]	; (8002bf0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002a14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3334      	adds	r3, #52	; 0x34
 8002a22:	001a      	movs	r2, r3
 8002a24:	1cbb      	adds	r3, r7, #2
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	f7fe fd0c 	bl	8001444 <HAL_DMA_Start_IT>
 8002a2c:	1e03      	subs	r3, r0, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0d4      	b.n	8002bde <HAL_TIM_PWM_Start_DMA+0x3b2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2180      	movs	r1, #128	; 0x80
 8002a40:	0089      	lsls	r1, r1, #2
 8002a42:	430a      	orrs	r2, r1
 8002a44:	60da      	str	r2, [r3, #12]
      break;
 8002a46:	e073      	b.n	8002b30 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4c:	4a66      	ldr	r2, [pc, #408]	; (8002be8 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	4a65      	ldr	r2, [pc, #404]	; (8002bec <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5c:	4a64      	ldr	r2, [pc, #400]	; (8002bf0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002a5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	3338      	adds	r3, #56	; 0x38
 8002a6c:	001a      	movs	r2, r3
 8002a6e:	1cbb      	adds	r3, r7, #2
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	f7fe fce7 	bl	8001444 <HAL_DMA_Start_IT>
 8002a76:	1e03      	subs	r3, r0, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e0af      	b.n	8002bde <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2180      	movs	r1, #128	; 0x80
 8002a8a:	00c9      	lsls	r1, r1, #3
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	60da      	str	r2, [r3, #12]
      break;
 8002a90:	e04e      	b.n	8002b30 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	4a54      	ldr	r2, [pc, #336]	; (8002be8 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002a98:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	4a53      	ldr	r2, [pc, #332]	; (8002bec <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002aa0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	4a52      	ldr	r2, [pc, #328]	; (8002bf0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002aa8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	333c      	adds	r3, #60	; 0x3c
 8002ab6:	001a      	movs	r2, r3
 8002ab8:	1cbb      	adds	r3, r7, #2
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	f7fe fcc2 	bl	8001444 <HAL_DMA_Start_IT>
 8002ac0:	1e03      	subs	r3, r0, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e08a      	b.n	8002bde <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2180      	movs	r1, #128	; 0x80
 8002ad4:	0109      	lsls	r1, r1, #4
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	60da      	str	r2, [r3, #12]
      break;
 8002ada:	e029      	b.n	8002b30 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	4a41      	ldr	r2, [pc, #260]	; (8002be8 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	4a40      	ldr	r2, [pc, #256]	; (8002bec <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	4a3f      	ldr	r2, [pc, #252]	; (8002bf0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 8002af2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3340      	adds	r3, #64	; 0x40
 8002b00:	001a      	movs	r2, r3
 8002b02:	1cbb      	adds	r3, r7, #2
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	f7fe fc9d 	bl	8001444 <HAL_DMA_Start_IT>
 8002b0a:	1e03      	subs	r3, r0, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e065      	b.n	8002bde <HAL_TIM_PWM_Start_DMA+0x3b2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2180      	movs	r1, #128	; 0x80
 8002b1e:	0149      	lsls	r1, r1, #5
 8002b20:	430a      	orrs	r2, r1
 8002b22:	60da      	str	r2, [r3, #12]
      break;
 8002b24:	e004      	b.n	8002b30 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8002b26:	2317      	movs	r3, #23
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	701a      	strb	r2, [r3, #0]
      break;
 8002b2e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002b30:	2317      	movs	r3, #23
 8002b32:	18fb      	adds	r3, r7, r3
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d14e      	bne.n	8002bd8 <HAL_TIM_PWM_Start_DMA+0x3ac>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68b9      	ldr	r1, [r7, #8]
 8002b40:	2201      	movs	r2, #1
 8002b42:	0018      	movs	r0, r3
 8002b44:	f000 ffb6 	bl	8003ab4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a29      	ldr	r2, [pc, #164]	; (8002bf4 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d009      	beq.n	8002b66 <HAL_TIM_PWM_Start_DMA+0x33a>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a28      	ldr	r2, [pc, #160]	; (8002bf8 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d004      	beq.n	8002b66 <HAL_TIM_PWM_Start_DMA+0x33a>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a26      	ldr	r2, [pc, #152]	; (8002bfc <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d101      	bne.n	8002b6a <HAL_TIM_PWM_Start_DMA+0x33e>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_TIM_PWM_Start_DMA+0x340>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2180      	movs	r1, #128	; 0x80
 8002b7c:	0209      	lsls	r1, r1, #8
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1b      	ldr	r2, [pc, #108]	; (8002bf4 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d004      	beq.n	8002b96 <HAL_TIM_PWM_Start_DMA+0x36a>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1b      	ldr	r2, [pc, #108]	; (8002c00 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d116      	bne.n	8002bc4 <HAL_TIM_PWM_Start_DMA+0x398>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4a19      	ldr	r2, [pc, #100]	; (8002c04 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	2b06      	cmp	r3, #6
 8002ba6:	d016      	beq.n	8002bd6 <HAL_TIM_PWM_Start_DMA+0x3aa>
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	025b      	lsls	r3, r3, #9
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d011      	beq.n	8002bd6 <HAL_TIM_PWM_Start_DMA+0x3aa>
      {
        __HAL_TIM_ENABLE(htim);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc2:	e008      	b.n	8002bd6 <HAL_TIM_PWM_Start_DMA+0x3aa>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2101      	movs	r1, #1
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	e000      	b.n	8002bd8 <HAL_TIM_PWM_Start_DMA+0x3ac>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd6:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8002bd8:	2317      	movs	r3, #23
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	781b      	ldrb	r3, [r3, #0]
}
 8002bde:	0018      	movs	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b006      	add	sp, #24
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	0800323d 	.word	0x0800323d
 8002bec:	080032e7 	.word	0x080032e7
 8002bf0:	080031a9 	.word	0x080031a9
 8002bf4:	40012c00 	.word	0x40012c00
 8002bf8:	40014400 	.word	0x40014400
 8002bfc:	40014800 	.word	0x40014800
 8002c00:	40000400 	.word	0x40000400
 8002c04:	00010007 	.word	0x00010007

08002c08 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c12:	230f      	movs	r3, #15
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b0c      	cmp	r3, #12
 8002c1e:	d039      	beq.n	8002c94 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b0c      	cmp	r3, #12
 8002c24:	d844      	bhi.n	8002cb0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d025      	beq.n	8002c78 <HAL_TIM_PWM_Stop_DMA+0x70>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d83e      	bhi.n	8002cb0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_TIM_PWM_Stop_DMA+0x38>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d00e      	beq.n	8002c5c <HAL_TIM_PWM_Stop_DMA+0x54>
 8002c3e:	e037      	b.n	8002cb0 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	495a      	ldr	r1, [pc, #360]	; (8002db4 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8002c4c:	400a      	ands	r2, r1
 8002c4e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7fe fc7b 	bl	8001550 <HAL_DMA_Abort_IT>
      break;
 8002c5a:	e02e      	b.n	8002cba <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4954      	ldr	r1, [pc, #336]	; (8002db8 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8002c68:	400a      	ands	r2, r1
 8002c6a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	0018      	movs	r0, r3
 8002c72:	f7fe fc6d 	bl	8001550 <HAL_DMA_Abort_IT>
      break;
 8002c76:	e020      	b.n	8002cba <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	494e      	ldr	r1, [pc, #312]	; (8002dbc <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8002c84:	400a      	ands	r2, r1
 8002c86:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7fe fc5f 	bl	8001550 <HAL_DMA_Abort_IT>
      break;
 8002c92:	e012      	b.n	8002cba <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4948      	ldr	r1, [pc, #288]	; (8002dc0 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8002ca0:	400a      	ands	r2, r1
 8002ca2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7fe fc51 	bl	8001550 <HAL_DMA_Abort_IT>
      break;
 8002cae:	e004      	b.n	8002cba <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8002cb0:	230f      	movs	r3, #15
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]
      break;
 8002cb8:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002cba:	230f      	movs	r3, #15
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d000      	beq.n	8002cc6 <HAL_TIM_PWM_Stop_DMA+0xbe>
 8002cc4:	e06e      	b.n	8002da4 <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6839      	ldr	r1, [r7, #0]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f000 fef0 	bl	8003ab4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a3a      	ldr	r2, [pc, #232]	; (8002dc4 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d009      	beq.n	8002cf2 <HAL_TIM_PWM_Stop_DMA+0xea>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a39      	ldr	r2, [pc, #228]	; (8002dc8 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d004      	beq.n	8002cf2 <HAL_TIM_PWM_Stop_DMA+0xea>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a37      	ldr	r2, [pc, #220]	; (8002dcc <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <HAL_TIM_PWM_Stop_DMA+0xee>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_TIM_PWM_Stop_DMA+0xf0>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d013      	beq.n	8002d24 <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4a33      	ldr	r2, [pc, #204]	; (8002dd0 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	d10d      	bne.n	8002d24 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	4a31      	ldr	r2, [pc, #196]	; (8002dd4 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	d107      	bne.n	8002d24 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	492e      	ldr	r1, [pc, #184]	; (8002dd8 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8002d20:	400a      	ands	r2, r1
 8002d22:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4a29      	ldr	r2, [pc, #164]	; (8002dd0 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d10d      	bne.n	8002d4c <HAL_TIM_PWM_Stop_DMA+0x144>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4a27      	ldr	r2, [pc, #156]	; (8002dd4 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d107      	bne.n	8002d4c <HAL_TIM_PWM_Stop_DMA+0x144>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2101      	movs	r1, #1
 8002d48:	438a      	bics	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d104      	bne.n	8002d5c <HAL_TIM_PWM_Stop_DMA+0x154>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	223e      	movs	r2, #62	; 0x3e
 8002d56:	2101      	movs	r1, #1
 8002d58:	5499      	strb	r1, [r3, r2]
 8002d5a:	e023      	b.n	8002da4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d104      	bne.n	8002d6c <HAL_TIM_PWM_Stop_DMA+0x164>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	223f      	movs	r2, #63	; 0x3f
 8002d66:	2101      	movs	r1, #1
 8002d68:	5499      	strb	r1, [r3, r2]
 8002d6a:	e01b      	b.n	8002da4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d104      	bne.n	8002d7c <HAL_TIM_PWM_Stop_DMA+0x174>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2240      	movs	r2, #64	; 0x40
 8002d76:	2101      	movs	r1, #1
 8002d78:	5499      	strb	r1, [r3, r2]
 8002d7a:	e013      	b.n	8002da4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b0c      	cmp	r3, #12
 8002d80:	d104      	bne.n	8002d8c <HAL_TIM_PWM_Stop_DMA+0x184>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2241      	movs	r2, #65	; 0x41
 8002d86:	2101      	movs	r1, #1
 8002d88:	5499      	strb	r1, [r3, r2]
 8002d8a:	e00b      	b.n	8002da4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b10      	cmp	r3, #16
 8002d90:	d104      	bne.n	8002d9c <HAL_TIM_PWM_Stop_DMA+0x194>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2242      	movs	r2, #66	; 0x42
 8002d96:	2101      	movs	r1, #1
 8002d98:	5499      	strb	r1, [r3, r2]
 8002d9a:	e003      	b.n	8002da4 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2243      	movs	r2, #67	; 0x43
 8002da0:	2101      	movs	r1, #1
 8002da2:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002da4:	230f      	movs	r3, #15
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	781b      	ldrb	r3, [r3, #0]
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b004      	add	sp, #16
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	fffffdff 	.word	0xfffffdff
 8002db8:	fffffbff 	.word	0xfffffbff
 8002dbc:	fffff7ff 	.word	0xfffff7ff
 8002dc0:	ffffefff 	.word	0xffffefff
 8002dc4:	40012c00 	.word	0x40012c00
 8002dc8:	40014400 	.word	0x40014400
 8002dcc:	40014800 	.word	0x40014800
 8002dd0:	00001111 	.word	0x00001111
 8002dd4:	00000444 	.word	0x00000444
 8002dd8:	ffff7fff 	.word	0xffff7fff

08002ddc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de8:	2317      	movs	r3, #23
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	223c      	movs	r2, #60	; 0x3c
 8002df4:	5c9b      	ldrb	r3, [r3, r2]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_TIM_PWM_ConfigChannel+0x22>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e0e5      	b.n	8002fca <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	223c      	movs	r2, #60	; 0x3c
 8002e02:	2101      	movs	r1, #1
 8002e04:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b14      	cmp	r3, #20
 8002e0a:	d900      	bls.n	8002e0e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002e0c:	e0d1      	b.n	8002fb2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	009a      	lsls	r2, r3, #2
 8002e12:	4b70      	ldr	r3, [pc, #448]	; (8002fd4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002e14:	18d3      	adds	r3, r2, r3
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	0011      	movs	r1, r2
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 fb0e 	bl	8003444 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2108      	movs	r1, #8
 8002e34:	430a      	orrs	r2, r1
 8002e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	699a      	ldr	r2, [r3, #24]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2104      	movs	r1, #4
 8002e44:	438a      	bics	r2, r1
 8002e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6999      	ldr	r1, [r3, #24]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	619a      	str	r2, [r3, #24]
      break;
 8002e5a:	e0af      	b.n	8002fbc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	0011      	movs	r1, r2
 8002e64:	0018      	movs	r0, r3
 8002e66:	f000 fb6d 	bl	8003544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699a      	ldr	r2, [r3, #24]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2180      	movs	r1, #128	; 0x80
 8002e76:	0109      	lsls	r1, r1, #4
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4954      	ldr	r1, [pc, #336]	; (8002fd8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002e88:	400a      	ands	r2, r1
 8002e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6999      	ldr	r1, [r3, #24]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	021a      	lsls	r2, r3, #8
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	619a      	str	r2, [r3, #24]
      break;
 8002ea0:	e08c      	b.n	8002fbc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	0011      	movs	r1, r2
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 fbc8 	bl	8003640 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2108      	movs	r1, #8
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	69da      	ldr	r2, [r3, #28]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2104      	movs	r1, #4
 8002ecc:	438a      	bics	r2, r1
 8002ece:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	69d9      	ldr	r1, [r3, #28]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	691a      	ldr	r2, [r3, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	61da      	str	r2, [r3, #28]
      break;
 8002ee2:	e06b      	b.n	8002fbc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	0011      	movs	r1, r2
 8002eec:	0018      	movs	r0, r3
 8002eee:	f000 fc29 	bl	8003744 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	69da      	ldr	r2, [r3, #28]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2180      	movs	r1, #128	; 0x80
 8002efe:	0109      	lsls	r1, r1, #4
 8002f00:	430a      	orrs	r2, r1
 8002f02:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	69da      	ldr	r2, [r3, #28]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4932      	ldr	r1, [pc, #200]	; (8002fd8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002f10:	400a      	ands	r2, r1
 8002f12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	69d9      	ldr	r1, [r3, #28]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	021a      	lsls	r2, r3, #8
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	61da      	str	r2, [r3, #28]
      break;
 8002f28:	e048      	b.n	8002fbc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	0011      	movs	r1, r2
 8002f32:	0018      	movs	r0, r3
 8002f34:	f000 fc6a 	bl	800380c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2108      	movs	r1, #8
 8002f44:	430a      	orrs	r2, r1
 8002f46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2104      	movs	r1, #4
 8002f54:	438a      	bics	r2, r1
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f6a:	e027      	b.n	8002fbc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	0011      	movs	r1, r2
 8002f74:	0018      	movs	r0, r3
 8002f76:	f000 fca3 	bl	80038c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2180      	movs	r1, #128	; 0x80
 8002f86:	0109      	lsls	r1, r1, #4
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4910      	ldr	r1, [pc, #64]	; (8002fd8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002f98:	400a      	ands	r2, r1
 8002f9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	021a      	lsls	r2, r3, #8
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002fb0:	e004      	b.n	8002fbc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002fb2:	2317      	movs	r3, #23
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	701a      	strb	r2, [r3, #0]
      break;
 8002fba:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	223c      	movs	r2, #60	; 0x3c
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	5499      	strb	r1, [r3, r2]

  return status;
 8002fc4:	2317      	movs	r3, #23
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	781b      	ldrb	r3, [r3, #0]
}
 8002fca:	0018      	movs	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b006      	add	sp, #24
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	08004c44 	.word	0x08004c44
 8002fd8:	fffffbff 	.word	0xfffffbff

08002fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe6:	230f      	movs	r3, #15
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	223c      	movs	r2, #60	; 0x3c
 8002ff2:	5c9b      	ldrb	r3, [r3, r2]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_TIM_ConfigClockSource+0x20>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e0bc      	b.n	8003176 <HAL_TIM_ConfigClockSource+0x19a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	223c      	movs	r2, #60	; 0x3c
 8003000:	2101      	movs	r1, #1
 8003002:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	223d      	movs	r2, #61	; 0x3d
 8003008:	2102      	movs	r1, #2
 800300a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4a5a      	ldr	r2, [pc, #360]	; (8003180 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003018:	4013      	ands	r3, r2
 800301a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4a59      	ldr	r2, [pc, #356]	; (8003184 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003020:	4013      	ands	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2280      	movs	r2, #128	; 0x80
 8003032:	0192      	lsls	r2, r2, #6
 8003034:	4293      	cmp	r3, r2
 8003036:	d040      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0xde>
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	0192      	lsls	r2, r2, #6
 800303c:	4293      	cmp	r3, r2
 800303e:	d900      	bls.n	8003042 <HAL_TIM_ConfigClockSource+0x66>
 8003040:	e088      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x178>
 8003042:	2280      	movs	r2, #128	; 0x80
 8003044:	0152      	lsls	r2, r2, #5
 8003046:	4293      	cmp	r3, r2
 8003048:	d100      	bne.n	800304c <HAL_TIM_ConfigClockSource+0x70>
 800304a:	e088      	b.n	800315e <HAL_TIM_ConfigClockSource+0x182>
 800304c:	2280      	movs	r2, #128	; 0x80
 800304e:	0152      	lsls	r2, r2, #5
 8003050:	4293      	cmp	r3, r2
 8003052:	d900      	bls.n	8003056 <HAL_TIM_ConfigClockSource+0x7a>
 8003054:	e07e      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x178>
 8003056:	2b70      	cmp	r3, #112	; 0x70
 8003058:	d018      	beq.n	800308c <HAL_TIM_ConfigClockSource+0xb0>
 800305a:	d900      	bls.n	800305e <HAL_TIM_ConfigClockSource+0x82>
 800305c:	e07a      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x178>
 800305e:	2b60      	cmp	r3, #96	; 0x60
 8003060:	d04f      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0x126>
 8003062:	d900      	bls.n	8003066 <HAL_TIM_ConfigClockSource+0x8a>
 8003064:	e076      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x178>
 8003066:	2b50      	cmp	r3, #80	; 0x50
 8003068:	d03b      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0x106>
 800306a:	d900      	bls.n	800306e <HAL_TIM_ConfigClockSource+0x92>
 800306c:	e072      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x178>
 800306e:	2b40      	cmp	r3, #64	; 0x40
 8003070:	d057      	beq.n	8003122 <HAL_TIM_ConfigClockSource+0x146>
 8003072:	d900      	bls.n	8003076 <HAL_TIM_ConfigClockSource+0x9a>
 8003074:	e06e      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x178>
 8003076:	2b30      	cmp	r3, #48	; 0x30
 8003078:	d063      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0x166>
 800307a:	d86b      	bhi.n	8003154 <HAL_TIM_ConfigClockSource+0x178>
 800307c:	2b20      	cmp	r3, #32
 800307e:	d060      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0x166>
 8003080:	d868      	bhi.n	8003154 <HAL_TIM_ConfigClockSource+0x178>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d05d      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0x166>
 8003086:	2b10      	cmp	r3, #16
 8003088:	d05b      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0x166>
 800308a:	e063      	b.n	8003154 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800309c:	f000 fcea 	bl	8003a74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2277      	movs	r2, #119	; 0x77
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	609a      	str	r2, [r3, #8]
      break;
 80030b8:	e052      	b.n	8003160 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030ca:	f000 fcd3 	bl	8003a74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2180      	movs	r1, #128	; 0x80
 80030da:	01c9      	lsls	r1, r1, #7
 80030dc:	430a      	orrs	r2, r1
 80030de:	609a      	str	r2, [r3, #8]
      break;
 80030e0:	e03e      	b.n	8003160 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ee:	001a      	movs	r2, r3
 80030f0:	f000 fc44 	bl	800397c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2150      	movs	r1, #80	; 0x50
 80030fa:	0018      	movs	r0, r3
 80030fc:	f000 fc9e 	bl	8003a3c <TIM_ITRx_SetConfig>
      break;
 8003100:	e02e      	b.n	8003160 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800310e:	001a      	movs	r2, r3
 8003110:	f000 fc62 	bl	80039d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2160      	movs	r1, #96	; 0x60
 800311a:	0018      	movs	r0, r3
 800311c:	f000 fc8e 	bl	8003a3c <TIM_ITRx_SetConfig>
      break;
 8003120:	e01e      	b.n	8003160 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800312e:	001a      	movs	r2, r3
 8003130:	f000 fc24 	bl	800397c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2140      	movs	r1, #64	; 0x40
 800313a:	0018      	movs	r0, r3
 800313c:	f000 fc7e 	bl	8003a3c <TIM_ITRx_SetConfig>
      break;
 8003140:	e00e      	b.n	8003160 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	0019      	movs	r1, r3
 800314c:	0010      	movs	r0, r2
 800314e:	f000 fc75 	bl	8003a3c <TIM_ITRx_SetConfig>
      break;
 8003152:	e005      	b.n	8003160 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003154:	230f      	movs	r3, #15
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	2201      	movs	r2, #1
 800315a:	701a      	strb	r2, [r3, #0]
      break;
 800315c:	e000      	b.n	8003160 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800315e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	223d      	movs	r2, #61	; 0x3d
 8003164:	2101      	movs	r1, #1
 8003166:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	223c      	movs	r2, #60	; 0x3c
 800316c:	2100      	movs	r1, #0
 800316e:	5499      	strb	r1, [r3, r2]

  return status;
 8003170:	230f      	movs	r3, #15
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	781b      	ldrb	r3, [r3, #0]
}
 8003176:	0018      	movs	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	b004      	add	sp, #16
 800317c:	bd80      	pop	{r7, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	ffceff88 	.word	0xffceff88
 8003184:	ffff00ff 	.word	0xffff00ff

08003188 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	b002      	add	sp, #8
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80031a0:	46c0      	nop			; (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b002      	add	sp, #8
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d107      	bne.n	80031d0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2201      	movs	r2, #1
 80031c4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	223e      	movs	r2, #62	; 0x3e
 80031ca:	2101      	movs	r1, #1
 80031cc:	5499      	strb	r1, [r3, r2]
 80031ce:	e02a      	b.n	8003226 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d107      	bne.n	80031ea <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2202      	movs	r2, #2
 80031de:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	223f      	movs	r2, #63	; 0x3f
 80031e4:	2101      	movs	r1, #1
 80031e6:	5499      	strb	r1, [r3, r2]
 80031e8:	e01d      	b.n	8003226 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d107      	bne.n	8003204 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2204      	movs	r2, #4
 80031f8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2240      	movs	r2, #64	; 0x40
 80031fe:	2101      	movs	r1, #1
 8003200:	5499      	strb	r1, [r3, r2]
 8003202:	e010      	b.n	8003226 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	429a      	cmp	r2, r3
 800320c:	d107      	bne.n	800321e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2208      	movs	r2, #8
 8003212:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2241      	movs	r2, #65	; 0x41
 8003218:	2101      	movs	r1, #1
 800321a:	5499      	strb	r1, [r3, r2]
 800321c:	e003      	b.n	8003226 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	223d      	movs	r2, #61	; 0x3d
 8003222:	2101      	movs	r1, #1
 8003224:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	0018      	movs	r0, r3
 800322a:	f7ff ffb5 	bl	8003198 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	771a      	strb	r2, [r3, #28]
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b004      	add	sp, #16
 800323a:	bd80      	pop	{r7, pc}

0800323c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	429a      	cmp	r2, r3
 8003252:	d10b      	bne.n	800326c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d136      	bne.n	80032d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	223e      	movs	r2, #62	; 0x3e
 8003266:	2101      	movs	r1, #1
 8003268:	5499      	strb	r1, [r3, r2]
 800326a:	e031      	b.n	80032d0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	429a      	cmp	r2, r3
 8003274:	d10b      	bne.n	800328e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2202      	movs	r2, #2
 800327a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d125      	bne.n	80032d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	223f      	movs	r2, #63	; 0x3f
 8003288:	2101      	movs	r1, #1
 800328a:	5499      	strb	r1, [r3, r2]
 800328c:	e020      	b.n	80032d0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	429a      	cmp	r2, r3
 8003296:	d10b      	bne.n	80032b0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2204      	movs	r2, #4
 800329c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d114      	bne.n	80032d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2240      	movs	r2, #64	; 0x40
 80032aa:	2101      	movs	r1, #1
 80032ac:	5499      	strb	r1, [r3, r2]
 80032ae:	e00f      	b.n	80032d0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d10a      	bne.n	80032d0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2208      	movs	r2, #8
 80032be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d103      	bne.n	80032d0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2241      	movs	r2, #65	; 0x41
 80032cc:	2101      	movs	r1, #1
 80032ce:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	0018      	movs	r0, r3
 80032d4:	f7fd fa96 	bl	8000804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	771a      	strb	r2, [r3, #28]
}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b004      	add	sp, #16
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b084      	sub	sp, #16
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d103      	bne.n	8003306 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	771a      	strb	r2, [r3, #28]
 8003304:	e019      	b.n	800333a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	429a      	cmp	r2, r3
 800330e:	d103      	bne.n	8003318 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2202      	movs	r2, #2
 8003314:	771a      	strb	r2, [r3, #28]
 8003316:	e010      	b.n	800333a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	429a      	cmp	r2, r3
 8003320:	d103      	bne.n	800332a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2204      	movs	r2, #4
 8003326:	771a      	strb	r2, [r3, #28]
 8003328:	e007      	b.n	800333a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	429a      	cmp	r2, r3
 8003332:	d102      	bne.n	800333a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2208      	movs	r2, #8
 8003338:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	0018      	movs	r0, r3
 800333e:	f7ff ff23 	bl	8003188 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	771a      	strb	r2, [r3, #28]
}
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	b004      	add	sp, #16
 800334e:	bd80      	pop	{r7, pc}

08003350 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a32      	ldr	r2, [pc, #200]	; (800342c <TIM_Base_SetConfig+0xdc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d003      	beq.n	8003370 <TIM_Base_SetConfig+0x20>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a31      	ldr	r2, [pc, #196]	; (8003430 <TIM_Base_SetConfig+0xe0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d108      	bne.n	8003382 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2270      	movs	r2, #112	; 0x70
 8003374:	4393      	bics	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a29      	ldr	r2, [pc, #164]	; (800342c <TIM_Base_SetConfig+0xdc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00f      	beq.n	80033aa <TIM_Base_SetConfig+0x5a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a28      	ldr	r2, [pc, #160]	; (8003430 <TIM_Base_SetConfig+0xe0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00b      	beq.n	80033aa <TIM_Base_SetConfig+0x5a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a27      	ldr	r2, [pc, #156]	; (8003434 <TIM_Base_SetConfig+0xe4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d007      	beq.n	80033aa <TIM_Base_SetConfig+0x5a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a26      	ldr	r2, [pc, #152]	; (8003438 <TIM_Base_SetConfig+0xe8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d003      	beq.n	80033aa <TIM_Base_SetConfig+0x5a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a25      	ldr	r2, [pc, #148]	; (800343c <TIM_Base_SetConfig+0xec>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d108      	bne.n	80033bc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4a24      	ldr	r2, [pc, #144]	; (8003440 <TIM_Base_SetConfig+0xf0>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2280      	movs	r2, #128	; 0x80
 80033c0:	4393      	bics	r3, r2
 80033c2:	001a      	movs	r2, r3
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a11      	ldr	r2, [pc, #68]	; (800342c <TIM_Base_SetConfig+0xdc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <TIM_Base_SetConfig+0xaa>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a12      	ldr	r2, [pc, #72]	; (8003438 <TIM_Base_SetConfig+0xe8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d003      	beq.n	80033fa <TIM_Base_SetConfig+0xaa>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a11      	ldr	r2, [pc, #68]	; (800343c <TIM_Base_SetConfig+0xec>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d103      	bne.n	8003402 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2201      	movs	r2, #1
 800340e:	4013      	ands	r3, r2
 8003410:	2b01      	cmp	r3, #1
 8003412:	d106      	bne.n	8003422 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2201      	movs	r2, #1
 800341a:	4393      	bics	r3, r2
 800341c:	001a      	movs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	611a      	str	r2, [r3, #16]
  }
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	46bd      	mov	sp, r7
 8003426:	b004      	add	sp, #16
 8003428:	bd80      	pop	{r7, pc}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	40012c00 	.word	0x40012c00
 8003430:	40000400 	.word	0x40000400
 8003434:	40002000 	.word	0x40002000
 8003438:	40014400 	.word	0x40014400
 800343c:	40014800 	.word	0x40014800
 8003440:	fffffcff 	.word	0xfffffcff

08003444 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	2201      	movs	r2, #1
 800345a:	4393      	bics	r3, r2
 800345c:	001a      	movs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4a2e      	ldr	r2, [pc, #184]	; (800352c <TIM_OC1_SetConfig+0xe8>)
 8003472:	4013      	ands	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2203      	movs	r2, #3
 800347a:	4393      	bics	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4313      	orrs	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2202      	movs	r2, #2
 800348c:	4393      	bics	r3, r2
 800348e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a24      	ldr	r2, [pc, #144]	; (8003530 <TIM_OC1_SetConfig+0xec>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <TIM_OC1_SetConfig+0x6e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a23      	ldr	r2, [pc, #140]	; (8003534 <TIM_OC1_SetConfig+0xf0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d003      	beq.n	80034b2 <TIM_OC1_SetConfig+0x6e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a22      	ldr	r2, [pc, #136]	; (8003538 <TIM_OC1_SetConfig+0xf4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d10c      	bne.n	80034cc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2208      	movs	r2, #8
 80034b6:	4393      	bics	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2204      	movs	r2, #4
 80034c8:	4393      	bics	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a18      	ldr	r2, [pc, #96]	; (8003530 <TIM_OC1_SetConfig+0xec>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d007      	beq.n	80034e4 <TIM_OC1_SetConfig+0xa0>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a17      	ldr	r2, [pc, #92]	; (8003534 <TIM_OC1_SetConfig+0xf0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d003      	beq.n	80034e4 <TIM_OC1_SetConfig+0xa0>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a16      	ldr	r2, [pc, #88]	; (8003538 <TIM_OC1_SetConfig+0xf4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d111      	bne.n	8003508 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4a15      	ldr	r2, [pc, #84]	; (800353c <TIM_OC1_SetConfig+0xf8>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	4a14      	ldr	r2, [pc, #80]	; (8003540 <TIM_OC1_SetConfig+0xfc>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	621a      	str	r2, [r3, #32]
}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	b006      	add	sp, #24
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	fffeff8f 	.word	0xfffeff8f
 8003530:	40012c00 	.word	0x40012c00
 8003534:	40014400 	.word	0x40014400
 8003538:	40014800 	.word	0x40014800
 800353c:	fffffeff 	.word	0xfffffeff
 8003540:	fffffdff 	.word	0xfffffdff

08003544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	2210      	movs	r2, #16
 800355a:	4393      	bics	r3, r2
 800355c:	001a      	movs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4a2c      	ldr	r2, [pc, #176]	; (8003624 <TIM_OC2_SetConfig+0xe0>)
 8003572:	4013      	ands	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4a2b      	ldr	r2, [pc, #172]	; (8003628 <TIM_OC2_SetConfig+0xe4>)
 800357a:	4013      	ands	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	021b      	lsls	r3, r3, #8
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2220      	movs	r2, #32
 800358e:	4393      	bics	r3, r2
 8003590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a22      	ldr	r2, [pc, #136]	; (800362c <TIM_OC2_SetConfig+0xe8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d10d      	bne.n	80035c2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2280      	movs	r2, #128	; 0x80
 80035aa:	4393      	bics	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2240      	movs	r2, #64	; 0x40
 80035be:	4393      	bics	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a19      	ldr	r2, [pc, #100]	; (800362c <TIM_OC2_SetConfig+0xe8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d007      	beq.n	80035da <TIM_OC2_SetConfig+0x96>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a18      	ldr	r2, [pc, #96]	; (8003630 <TIM_OC2_SetConfig+0xec>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d003      	beq.n	80035da <TIM_OC2_SetConfig+0x96>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a17      	ldr	r2, [pc, #92]	; (8003634 <TIM_OC2_SetConfig+0xf0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d113      	bne.n	8003602 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4a16      	ldr	r2, [pc, #88]	; (8003638 <TIM_OC2_SetConfig+0xf4>)
 80035de:	4013      	ands	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4a15      	ldr	r2, [pc, #84]	; (800363c <TIM_OC2_SetConfig+0xf8>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	621a      	str	r2, [r3, #32]
}
 800361c:	46c0      	nop			; (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	b006      	add	sp, #24
 8003622:	bd80      	pop	{r7, pc}
 8003624:	feff8fff 	.word	0xfeff8fff
 8003628:	fffffcff 	.word	0xfffffcff
 800362c:	40012c00 	.word	0x40012c00
 8003630:	40014400 	.word	0x40014400
 8003634:	40014800 	.word	0x40014800
 8003638:	fffffbff 	.word	0xfffffbff
 800363c:	fffff7ff 	.word	0xfffff7ff

08003640 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	4a31      	ldr	r2, [pc, #196]	; (800371c <TIM_OC3_SetConfig+0xdc>)
 8003656:	401a      	ands	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4a2d      	ldr	r2, [pc, #180]	; (8003720 <TIM_OC3_SetConfig+0xe0>)
 800366c:	4013      	ands	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2203      	movs	r2, #3
 8003674:	4393      	bics	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	4a27      	ldr	r2, [pc, #156]	; (8003724 <TIM_OC3_SetConfig+0xe4>)
 8003686:	4013      	ands	r3, r2
 8003688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	021b      	lsls	r3, r3, #8
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a23      	ldr	r2, [pc, #140]	; (8003728 <TIM_OC3_SetConfig+0xe8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d10d      	bne.n	80036ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	4a22      	ldr	r2, [pc, #136]	; (800372c <TIM_OC3_SetConfig+0xec>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	021b      	lsls	r3, r3, #8
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	4a1e      	ldr	r2, [pc, #120]	; (8003730 <TIM_OC3_SetConfig+0xf0>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a1a      	ldr	r2, [pc, #104]	; (8003728 <TIM_OC3_SetConfig+0xe8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d007      	beq.n	80036d2 <TIM_OC3_SetConfig+0x92>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a1b      	ldr	r2, [pc, #108]	; (8003734 <TIM_OC3_SetConfig+0xf4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d003      	beq.n	80036d2 <TIM_OC3_SetConfig+0x92>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a1a      	ldr	r2, [pc, #104]	; (8003738 <TIM_OC3_SetConfig+0xf8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d113      	bne.n	80036fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	4a19      	ldr	r2, [pc, #100]	; (800373c <TIM_OC3_SetConfig+0xfc>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4a18      	ldr	r2, [pc, #96]	; (8003740 <TIM_OC3_SetConfig+0x100>)
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	621a      	str	r2, [r3, #32]
}
 8003714:	46c0      	nop			; (mov r8, r8)
 8003716:	46bd      	mov	sp, r7
 8003718:	b006      	add	sp, #24
 800371a:	bd80      	pop	{r7, pc}
 800371c:	fffffeff 	.word	0xfffffeff
 8003720:	fffeff8f 	.word	0xfffeff8f
 8003724:	fffffdff 	.word	0xfffffdff
 8003728:	40012c00 	.word	0x40012c00
 800372c:	fffff7ff 	.word	0xfffff7ff
 8003730:	fffffbff 	.word	0xfffffbff
 8003734:	40014400 	.word	0x40014400
 8003738:	40014800 	.word	0x40014800
 800373c:	ffffefff 	.word	0xffffefff
 8003740:	ffffdfff 	.word	0xffffdfff

08003744 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	4a24      	ldr	r2, [pc, #144]	; (80037ec <TIM_OC4_SetConfig+0xa8>)
 800375a:	401a      	ands	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a20      	ldr	r2, [pc, #128]	; (80037f0 <TIM_OC4_SetConfig+0xac>)
 8003770:	4013      	ands	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4a1f      	ldr	r2, [pc, #124]	; (80037f4 <TIM_OC4_SetConfig+0xb0>)
 8003778:	4013      	ands	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	021b      	lsls	r3, r3, #8
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4a1b      	ldr	r2, [pc, #108]	; (80037f8 <TIM_OC4_SetConfig+0xb4>)
 800378c:	4013      	ands	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	031b      	lsls	r3, r3, #12
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a17      	ldr	r2, [pc, #92]	; (80037fc <TIM_OC4_SetConfig+0xb8>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d007      	beq.n	80037b4 <TIM_OC4_SetConfig+0x70>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a16      	ldr	r2, [pc, #88]	; (8003800 <TIM_OC4_SetConfig+0xbc>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d003      	beq.n	80037b4 <TIM_OC4_SetConfig+0x70>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a15      	ldr	r2, [pc, #84]	; (8003804 <TIM_OC4_SetConfig+0xc0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d109      	bne.n	80037c8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	4a14      	ldr	r2, [pc, #80]	; (8003808 <TIM_OC4_SetConfig+0xc4>)
 80037b8:	4013      	ands	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	019b      	lsls	r3, r3, #6
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	621a      	str	r2, [r3, #32]
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b006      	add	sp, #24
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	ffffefff 	.word	0xffffefff
 80037f0:	feff8fff 	.word	0xfeff8fff
 80037f4:	fffffcff 	.word	0xfffffcff
 80037f8:	ffffdfff 	.word	0xffffdfff
 80037fc:	40012c00 	.word	0x40012c00
 8003800:	40014400 	.word	0x40014400
 8003804:	40014800 	.word	0x40014800
 8003808:	ffffbfff 	.word	0xffffbfff

0800380c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	4a21      	ldr	r2, [pc, #132]	; (80038a8 <TIM_OC5_SetConfig+0x9c>)
 8003822:	401a      	ands	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4a1d      	ldr	r2, [pc, #116]	; (80038ac <TIM_OC5_SetConfig+0xa0>)
 8003838:	4013      	ands	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4a19      	ldr	r2, [pc, #100]	; (80038b0 <TIM_OC5_SetConfig+0xa4>)
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	041b      	lsls	r3, r3, #16
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a15      	ldr	r2, [pc, #84]	; (80038b4 <TIM_OC5_SetConfig+0xa8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d007      	beq.n	8003872 <TIM_OC5_SetConfig+0x66>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a14      	ldr	r2, [pc, #80]	; (80038b8 <TIM_OC5_SetConfig+0xac>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d003      	beq.n	8003872 <TIM_OC5_SetConfig+0x66>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a13      	ldr	r2, [pc, #76]	; (80038bc <TIM_OC5_SetConfig+0xb0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d109      	bne.n	8003886 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	4a0c      	ldr	r2, [pc, #48]	; (80038a8 <TIM_OC5_SetConfig+0x9c>)
 8003876:	4013      	ands	r3, r2
 8003878:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	021b      	lsls	r3, r3, #8
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	621a      	str	r2, [r3, #32]
}
 80038a0:	46c0      	nop			; (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b006      	add	sp, #24
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	fffeffff 	.word	0xfffeffff
 80038ac:	fffeff8f 	.word	0xfffeff8f
 80038b0:	fffdffff 	.word	0xfffdffff
 80038b4:	40012c00 	.word	0x40012c00
 80038b8:	40014400 	.word	0x40014400
 80038bc:	40014800 	.word	0x40014800

080038c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	4a22      	ldr	r2, [pc, #136]	; (8003960 <TIM_OC6_SetConfig+0xa0>)
 80038d6:	401a      	ands	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4a1e      	ldr	r2, [pc, #120]	; (8003964 <TIM_OC6_SetConfig+0xa4>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4a1a      	ldr	r2, [pc, #104]	; (8003968 <TIM_OC6_SetConfig+0xa8>)
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	051b      	lsls	r3, r3, #20
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a16      	ldr	r2, [pc, #88]	; (800396c <TIM_OC6_SetConfig+0xac>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d007      	beq.n	8003928 <TIM_OC6_SetConfig+0x68>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a15      	ldr	r2, [pc, #84]	; (8003970 <TIM_OC6_SetConfig+0xb0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_OC6_SetConfig+0x68>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a14      	ldr	r2, [pc, #80]	; (8003974 <TIM_OC6_SetConfig+0xb4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d109      	bne.n	800393c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	4a13      	ldr	r2, [pc, #76]	; (8003978 <TIM_OC6_SetConfig+0xb8>)
 800392c:	4013      	ands	r3, r2
 800392e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	029b      	lsls	r3, r3, #10
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	621a      	str	r2, [r3, #32]
}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	46bd      	mov	sp, r7
 800395a:	b006      	add	sp, #24
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	ffefffff 	.word	0xffefffff
 8003964:	feff8fff 	.word	0xfeff8fff
 8003968:	ffdfffff 	.word	0xffdfffff
 800396c:	40012c00 	.word	0x40012c00
 8003970:	40014400 	.word	0x40014400
 8003974:	40014800 	.word	0x40014800
 8003978:	fffbffff 	.word	0xfffbffff

0800397c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	2201      	movs	r2, #1
 8003994:	4393      	bics	r3, r2
 8003996:	001a      	movs	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	22f0      	movs	r2, #240	; 0xf0
 80039a6:	4393      	bics	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	220a      	movs	r2, #10
 80039b8:	4393      	bics	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	621a      	str	r2, [r3, #32]
}
 80039d0:	46c0      	nop			; (mov r8, r8)
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b006      	add	sp, #24
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	2210      	movs	r2, #16
 80039f0:	4393      	bics	r3, r2
 80039f2:	001a      	movs	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <TIM_TI2_ConfigInputStage+0x60>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	031b      	lsls	r3, r3, #12
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	22a0      	movs	r2, #160	; 0xa0
 8003a14:	4393      	bics	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b006      	add	sp, #24
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	ffff0fff 	.word	0xffff0fff

08003a3c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a08      	ldr	r2, [pc, #32]	; (8003a70 <TIM_ITRx_SetConfig+0x34>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	2207      	movs	r2, #7
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	609a      	str	r2, [r3, #8]
}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b004      	add	sp, #16
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	ffcfff8f 	.word	0xffcfff8f

08003a74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <TIM_ETR_SetConfig+0x3c>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	021a      	lsls	r2, r3, #8
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	609a      	str	r2, [r3, #8]
}
 8003aa8:	46c0      	nop			; (mov r8, r8)
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b006      	add	sp, #24
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	ffff00ff 	.word	0xffff00ff

08003ab4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	221f      	movs	r2, #31
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	0013      	movs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	43d2      	mvns	r2, r2
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a1a      	ldr	r2, [r3, #32]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	211f      	movs	r1, #31
 8003ae4:	400b      	ands	r3, r1
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4099      	lsls	r1, r3
 8003aea:	000b      	movs	r3, r1
 8003aec:	431a      	orrs	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	621a      	str	r2, [r3, #32]
}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b006      	add	sp, #24
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	223c      	movs	r2, #60	; 0x3c
 8003b0a:	5c9b      	ldrb	r3, [r3, r2]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e04a      	b.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	223c      	movs	r2, #60	; 0x3c
 8003b18:	2101      	movs	r1, #1
 8003b1a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	223d      	movs	r2, #61	; 0x3d
 8003b20:	2102      	movs	r1, #2
 8003b22:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1e      	ldr	r2, [pc, #120]	; (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d108      	bne.n	8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4a1d      	ldr	r2, [pc, #116]	; (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2270      	movs	r2, #112	; 0x70
 8003b54:	4393      	bics	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a11      	ldr	r2, [pc, #68]	; (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d004      	beq.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a10      	ldr	r2, [pc, #64]	; (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d10c      	bne.n	8003b98 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2280      	movs	r2, #128	; 0x80
 8003b82:	4393      	bics	r3, r2
 8003b84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	223d      	movs	r2, #61	; 0x3d
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	223c      	movs	r2, #60	; 0x3c
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	0018      	movs	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b004      	add	sp, #16
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	ff0fffff 	.word	0xff0fffff
 8003bbc:	40000400 	.word	0x40000400

08003bc0 <rand>:
 8003bc0:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <rand+0x5c>)
 8003bc2:	b510      	push	{r4, lr}
 8003bc4:	681c      	ldr	r4, [r3, #0]
 8003bc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d116      	bne.n	8003bfa <rand+0x3a>
 8003bcc:	2018      	movs	r0, #24
 8003bce:	f000 fa1d 	bl	800400c <malloc>
 8003bd2:	1e02      	subs	r2, r0, #0
 8003bd4:	6320      	str	r0, [r4, #48]	; 0x30
 8003bd6:	d104      	bne.n	8003be2 <rand+0x22>
 8003bd8:	2152      	movs	r1, #82	; 0x52
 8003bda:	4b11      	ldr	r3, [pc, #68]	; (8003c20 <rand+0x60>)
 8003bdc:	4811      	ldr	r0, [pc, #68]	; (8003c24 <rand+0x64>)
 8003bde:	f000 f9ad 	bl	8003f3c <__assert_func>
 8003be2:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <rand+0x68>)
 8003be4:	2100      	movs	r1, #0
 8003be6:	6003      	str	r3, [r0, #0]
 8003be8:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <rand+0x6c>)
 8003bea:	6043      	str	r3, [r0, #4]
 8003bec:	4b10      	ldr	r3, [pc, #64]	; (8003c30 <rand+0x70>)
 8003bee:	6083      	str	r3, [r0, #8]
 8003bf0:	230b      	movs	r3, #11
 8003bf2:	8183      	strh	r3, [r0, #12]
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	6110      	str	r0, [r2, #16]
 8003bf8:	6151      	str	r1, [r2, #20]
 8003bfa:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8003bfc:	4a0d      	ldr	r2, [pc, #52]	; (8003c34 <rand+0x74>)
 8003bfe:	6920      	ldr	r0, [r4, #16]
 8003c00:	6961      	ldr	r1, [r4, #20]
 8003c02:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <rand+0x78>)
 8003c04:	f7fc fbfc 	bl	8000400 <__aeabi_lmul>
 8003c08:	2201      	movs	r2, #1
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	1880      	adds	r0, r0, r2
 8003c0e:	4159      	adcs	r1, r3
 8003c10:	6120      	str	r0, [r4, #16]
 8003c12:	6161      	str	r1, [r4, #20]
 8003c14:	0048      	lsls	r0, r1, #1
 8003c16:	0840      	lsrs	r0, r0, #1
 8003c18:	bd10      	pop	{r4, pc}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	20000064 	.word	0x20000064
 8003c20:	08004c98 	.word	0x08004c98
 8003c24:	08004caf 	.word	0x08004caf
 8003c28:	abcd330e 	.word	0xabcd330e
 8003c2c:	e66d1234 	.word	0xe66d1234
 8003c30:	0005deec 	.word	0x0005deec
 8003c34:	4c957f2d 	.word	0x4c957f2d
 8003c38:	5851f42d 	.word	0x5851f42d

08003c3c <std>:
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	b510      	push	{r4, lr}
 8003c40:	0004      	movs	r4, r0
 8003c42:	6003      	str	r3, [r0, #0]
 8003c44:	6043      	str	r3, [r0, #4]
 8003c46:	6083      	str	r3, [r0, #8]
 8003c48:	8181      	strh	r1, [r0, #12]
 8003c4a:	6643      	str	r3, [r0, #100]	; 0x64
 8003c4c:	0019      	movs	r1, r3
 8003c4e:	81c2      	strh	r2, [r0, #14]
 8003c50:	6103      	str	r3, [r0, #16]
 8003c52:	6143      	str	r3, [r0, #20]
 8003c54:	6183      	str	r3, [r0, #24]
 8003c56:	2208      	movs	r2, #8
 8003c58:	305c      	adds	r0, #92	; 0x5c
 8003c5a:	f000 f8ed 	bl	8003e38 <memset>
 8003c5e:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <std+0x38>)
 8003c60:	6224      	str	r4, [r4, #32]
 8003c62:	6263      	str	r3, [r4, #36]	; 0x24
 8003c64:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <std+0x3c>)
 8003c66:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <std+0x40>)
 8003c6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <std+0x44>)
 8003c6e:	6323      	str	r3, [r4, #48]	; 0x30
 8003c70:	bd10      	pop	{r4, pc}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	08003da1 	.word	0x08003da1
 8003c78:	08003dc9 	.word	0x08003dc9
 8003c7c:	08003e01 	.word	0x08003e01
 8003c80:	08003e2d 	.word	0x08003e2d

08003c84 <stdio_exit_handler>:
 8003c84:	b510      	push	{r4, lr}
 8003c86:	4a03      	ldr	r2, [pc, #12]	; (8003c94 <stdio_exit_handler+0x10>)
 8003c88:	4903      	ldr	r1, [pc, #12]	; (8003c98 <stdio_exit_handler+0x14>)
 8003c8a:	4804      	ldr	r0, [pc, #16]	; (8003c9c <stdio_exit_handler+0x18>)
 8003c8c:	f000 f86c 	bl	8003d68 <_fwalk_sglue>
 8003c90:	bd10      	pop	{r4, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	2000000c 	.word	0x2000000c
 8003c98:	0800429d 	.word	0x0800429d
 8003c9c:	20000018 	.word	0x20000018

08003ca0 <cleanup_stdio>:
 8003ca0:	6841      	ldr	r1, [r0, #4]
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <cleanup_stdio+0x30>)
 8003ca4:	b510      	push	{r4, lr}
 8003ca6:	0004      	movs	r4, r0
 8003ca8:	4299      	cmp	r1, r3
 8003caa:	d001      	beq.n	8003cb0 <cleanup_stdio+0x10>
 8003cac:	f000 faf6 	bl	800429c <_fflush_r>
 8003cb0:	68a1      	ldr	r1, [r4, #8]
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <cleanup_stdio+0x34>)
 8003cb4:	4299      	cmp	r1, r3
 8003cb6:	d002      	beq.n	8003cbe <cleanup_stdio+0x1e>
 8003cb8:	0020      	movs	r0, r4
 8003cba:	f000 faef 	bl	800429c <_fflush_r>
 8003cbe:	68e1      	ldr	r1, [r4, #12]
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <cleanup_stdio+0x38>)
 8003cc2:	4299      	cmp	r1, r3
 8003cc4:	d002      	beq.n	8003ccc <cleanup_stdio+0x2c>
 8003cc6:	0020      	movs	r0, r4
 8003cc8:	f000 fae8 	bl	800429c <_fflush_r>
 8003ccc:	bd10      	pop	{r4, pc}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	20000aac 	.word	0x20000aac
 8003cd4:	20000b14 	.word	0x20000b14
 8003cd8:	20000b7c 	.word	0x20000b7c

08003cdc <global_stdio_init.part.0>:
 8003cdc:	b510      	push	{r4, lr}
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <global_stdio_init.part.0+0x28>)
 8003ce0:	4a09      	ldr	r2, [pc, #36]	; (8003d08 <global_stdio_init.part.0+0x2c>)
 8003ce2:	2104      	movs	r1, #4
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	4809      	ldr	r0, [pc, #36]	; (8003d0c <global_stdio_init.part.0+0x30>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f7ff ffa7 	bl	8003c3c <std>
 8003cee:	2201      	movs	r2, #1
 8003cf0:	2109      	movs	r1, #9
 8003cf2:	4807      	ldr	r0, [pc, #28]	; (8003d10 <global_stdio_init.part.0+0x34>)
 8003cf4:	f7ff ffa2 	bl	8003c3c <std>
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	2112      	movs	r1, #18
 8003cfc:	4805      	ldr	r0, [pc, #20]	; (8003d14 <global_stdio_init.part.0+0x38>)
 8003cfe:	f7ff ff9d 	bl	8003c3c <std>
 8003d02:	bd10      	pop	{r4, pc}
 8003d04:	20000be4 	.word	0x20000be4
 8003d08:	08003c85 	.word	0x08003c85
 8003d0c:	20000aac 	.word	0x20000aac
 8003d10:	20000b14 	.word	0x20000b14
 8003d14:	20000b7c 	.word	0x20000b7c

08003d18 <__sfp_lock_acquire>:
 8003d18:	b510      	push	{r4, lr}
 8003d1a:	4802      	ldr	r0, [pc, #8]	; (8003d24 <__sfp_lock_acquire+0xc>)
 8003d1c:	f000 f90c 	bl	8003f38 <__retarget_lock_acquire_recursive>
 8003d20:	bd10      	pop	{r4, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	20000bed 	.word	0x20000bed

08003d28 <__sfp_lock_release>:
 8003d28:	b510      	push	{r4, lr}
 8003d2a:	4802      	ldr	r0, [pc, #8]	; (8003d34 <__sfp_lock_release+0xc>)
 8003d2c:	f000 f905 	bl	8003f3a <__retarget_lock_release_recursive>
 8003d30:	bd10      	pop	{r4, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	20000bed 	.word	0x20000bed

08003d38 <__sinit>:
 8003d38:	b510      	push	{r4, lr}
 8003d3a:	0004      	movs	r4, r0
 8003d3c:	f7ff ffec 	bl	8003d18 <__sfp_lock_acquire>
 8003d40:	6a23      	ldr	r3, [r4, #32]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <__sinit+0x14>
 8003d46:	f7ff ffef 	bl	8003d28 <__sfp_lock_release>
 8003d4a:	bd10      	pop	{r4, pc}
 8003d4c:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <__sinit+0x28>)
 8003d4e:	6223      	str	r3, [r4, #32]
 8003d50:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <__sinit+0x2c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1f6      	bne.n	8003d46 <__sinit+0xe>
 8003d58:	f7ff ffc0 	bl	8003cdc <global_stdio_init.part.0>
 8003d5c:	e7f3      	b.n	8003d46 <__sinit+0xe>
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	08003ca1 	.word	0x08003ca1
 8003d64:	20000be4 	.word	0x20000be4

08003d68 <_fwalk_sglue>:
 8003d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d6a:	0014      	movs	r4, r2
 8003d6c:	2600      	movs	r6, #0
 8003d6e:	9000      	str	r0, [sp, #0]
 8003d70:	9101      	str	r1, [sp, #4]
 8003d72:	68a5      	ldr	r5, [r4, #8]
 8003d74:	6867      	ldr	r7, [r4, #4]
 8003d76:	3f01      	subs	r7, #1
 8003d78:	d504      	bpl.n	8003d84 <_fwalk_sglue+0x1c>
 8003d7a:	6824      	ldr	r4, [r4, #0]
 8003d7c:	2c00      	cmp	r4, #0
 8003d7e:	d1f8      	bne.n	8003d72 <_fwalk_sglue+0xa>
 8003d80:	0030      	movs	r0, r6
 8003d82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d84:	89ab      	ldrh	r3, [r5, #12]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d908      	bls.n	8003d9c <_fwalk_sglue+0x34>
 8003d8a:	220e      	movs	r2, #14
 8003d8c:	5eab      	ldrsh	r3, [r5, r2]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	d004      	beq.n	8003d9c <_fwalk_sglue+0x34>
 8003d92:	0029      	movs	r1, r5
 8003d94:	9800      	ldr	r0, [sp, #0]
 8003d96:	9b01      	ldr	r3, [sp, #4]
 8003d98:	4798      	blx	r3
 8003d9a:	4306      	orrs	r6, r0
 8003d9c:	3568      	adds	r5, #104	; 0x68
 8003d9e:	e7ea      	b.n	8003d76 <_fwalk_sglue+0xe>

08003da0 <__sread>:
 8003da0:	b570      	push	{r4, r5, r6, lr}
 8003da2:	000c      	movs	r4, r1
 8003da4:	250e      	movs	r5, #14
 8003da6:	5f49      	ldrsh	r1, [r1, r5]
 8003da8:	f000 f874 	bl	8003e94 <_read_r>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	db03      	blt.n	8003db8 <__sread+0x18>
 8003db0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003db2:	181b      	adds	r3, r3, r0
 8003db4:	6563      	str	r3, [r4, #84]	; 0x54
 8003db6:	bd70      	pop	{r4, r5, r6, pc}
 8003db8:	89a3      	ldrh	r3, [r4, #12]
 8003dba:	4a02      	ldr	r2, [pc, #8]	; (8003dc4 <__sread+0x24>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	81a3      	strh	r3, [r4, #12]
 8003dc0:	e7f9      	b.n	8003db6 <__sread+0x16>
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	ffffefff 	.word	0xffffefff

08003dc8 <__swrite>:
 8003dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dca:	001f      	movs	r7, r3
 8003dcc:	898b      	ldrh	r3, [r1, #12]
 8003dce:	0005      	movs	r5, r0
 8003dd0:	000c      	movs	r4, r1
 8003dd2:	0016      	movs	r6, r2
 8003dd4:	05db      	lsls	r3, r3, #23
 8003dd6:	d505      	bpl.n	8003de4 <__swrite+0x1c>
 8003dd8:	230e      	movs	r3, #14
 8003dda:	5ec9      	ldrsh	r1, [r1, r3]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2302      	movs	r3, #2
 8003de0:	f000 f844 	bl	8003e6c <_lseek_r>
 8003de4:	89a3      	ldrh	r3, [r4, #12]
 8003de6:	4a05      	ldr	r2, [pc, #20]	; (8003dfc <__swrite+0x34>)
 8003de8:	0028      	movs	r0, r5
 8003dea:	4013      	ands	r3, r2
 8003dec:	81a3      	strh	r3, [r4, #12]
 8003dee:	0032      	movs	r2, r6
 8003df0:	230e      	movs	r3, #14
 8003df2:	5ee1      	ldrsh	r1, [r4, r3]
 8003df4:	003b      	movs	r3, r7
 8003df6:	f000 f861 	bl	8003ebc <_write_r>
 8003dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dfc:	ffffefff 	.word	0xffffefff

08003e00 <__sseek>:
 8003e00:	b570      	push	{r4, r5, r6, lr}
 8003e02:	000c      	movs	r4, r1
 8003e04:	250e      	movs	r5, #14
 8003e06:	5f49      	ldrsh	r1, [r1, r5]
 8003e08:	f000 f830 	bl	8003e6c <_lseek_r>
 8003e0c:	89a3      	ldrh	r3, [r4, #12]
 8003e0e:	1c42      	adds	r2, r0, #1
 8003e10:	d103      	bne.n	8003e1a <__sseek+0x1a>
 8003e12:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <__sseek+0x28>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	81a3      	strh	r3, [r4, #12]
 8003e18:	bd70      	pop	{r4, r5, r6, pc}
 8003e1a:	2280      	movs	r2, #128	; 0x80
 8003e1c:	0152      	lsls	r2, r2, #5
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	81a3      	strh	r3, [r4, #12]
 8003e22:	6560      	str	r0, [r4, #84]	; 0x54
 8003e24:	e7f8      	b.n	8003e18 <__sseek+0x18>
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	ffffefff 	.word	0xffffefff

08003e2c <__sclose>:
 8003e2c:	b510      	push	{r4, lr}
 8003e2e:	230e      	movs	r3, #14
 8003e30:	5ec9      	ldrsh	r1, [r1, r3]
 8003e32:	f000 f809 	bl	8003e48 <_close_r>
 8003e36:	bd10      	pop	{r4, pc}

08003e38 <memset>:
 8003e38:	0003      	movs	r3, r0
 8003e3a:	1882      	adds	r2, r0, r2
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d100      	bne.n	8003e42 <memset+0xa>
 8003e40:	4770      	bx	lr
 8003e42:	7019      	strb	r1, [r3, #0]
 8003e44:	3301      	adds	r3, #1
 8003e46:	e7f9      	b.n	8003e3c <memset+0x4>

08003e48 <_close_r>:
 8003e48:	2300      	movs	r3, #0
 8003e4a:	b570      	push	{r4, r5, r6, lr}
 8003e4c:	4d06      	ldr	r5, [pc, #24]	; (8003e68 <_close_r+0x20>)
 8003e4e:	0004      	movs	r4, r0
 8003e50:	0008      	movs	r0, r1
 8003e52:	602b      	str	r3, [r5, #0]
 8003e54:	f7fd f859 	bl	8000f0a <_close>
 8003e58:	1c43      	adds	r3, r0, #1
 8003e5a:	d103      	bne.n	8003e64 <_close_r+0x1c>
 8003e5c:	682b      	ldr	r3, [r5, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d000      	beq.n	8003e64 <_close_r+0x1c>
 8003e62:	6023      	str	r3, [r4, #0]
 8003e64:	bd70      	pop	{r4, r5, r6, pc}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	20000be8 	.word	0x20000be8

08003e6c <_lseek_r>:
 8003e6c:	b570      	push	{r4, r5, r6, lr}
 8003e6e:	0004      	movs	r4, r0
 8003e70:	0008      	movs	r0, r1
 8003e72:	0011      	movs	r1, r2
 8003e74:	001a      	movs	r2, r3
 8003e76:	2300      	movs	r3, #0
 8003e78:	4d05      	ldr	r5, [pc, #20]	; (8003e90 <_lseek_r+0x24>)
 8003e7a:	602b      	str	r3, [r5, #0]
 8003e7c:	f7fd f866 	bl	8000f4c <_lseek>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d103      	bne.n	8003e8c <_lseek_r+0x20>
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d000      	beq.n	8003e8c <_lseek_r+0x20>
 8003e8a:	6023      	str	r3, [r4, #0]
 8003e8c:	bd70      	pop	{r4, r5, r6, pc}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	20000be8 	.word	0x20000be8

08003e94 <_read_r>:
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	0004      	movs	r4, r0
 8003e98:	0008      	movs	r0, r1
 8003e9a:	0011      	movs	r1, r2
 8003e9c:	001a      	movs	r2, r3
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	4d05      	ldr	r5, [pc, #20]	; (8003eb8 <_read_r+0x24>)
 8003ea2:	602b      	str	r3, [r5, #0]
 8003ea4:	f7fc fff8 	bl	8000e98 <_read>
 8003ea8:	1c43      	adds	r3, r0, #1
 8003eaa:	d103      	bne.n	8003eb4 <_read_r+0x20>
 8003eac:	682b      	ldr	r3, [r5, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d000      	beq.n	8003eb4 <_read_r+0x20>
 8003eb2:	6023      	str	r3, [r4, #0]
 8003eb4:	bd70      	pop	{r4, r5, r6, pc}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	20000be8 	.word	0x20000be8

08003ebc <_write_r>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	0004      	movs	r4, r0
 8003ec0:	0008      	movs	r0, r1
 8003ec2:	0011      	movs	r1, r2
 8003ec4:	001a      	movs	r2, r3
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	4d05      	ldr	r5, [pc, #20]	; (8003ee0 <_write_r+0x24>)
 8003eca:	602b      	str	r3, [r5, #0]
 8003ecc:	f7fd f801 	bl	8000ed2 <_write>
 8003ed0:	1c43      	adds	r3, r0, #1
 8003ed2:	d103      	bne.n	8003edc <_write_r+0x20>
 8003ed4:	682b      	ldr	r3, [r5, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d000      	beq.n	8003edc <_write_r+0x20>
 8003eda:	6023      	str	r3, [r4, #0]
 8003edc:	bd70      	pop	{r4, r5, r6, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	20000be8 	.word	0x20000be8

08003ee4 <__errno>:
 8003ee4:	4b01      	ldr	r3, [pc, #4]	; (8003eec <__errno+0x8>)
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	4770      	bx	lr
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	20000064 	.word	0x20000064

08003ef0 <__libc_init_array>:
 8003ef0:	b570      	push	{r4, r5, r6, lr}
 8003ef2:	2600      	movs	r6, #0
 8003ef4:	4c0c      	ldr	r4, [pc, #48]	; (8003f28 <__libc_init_array+0x38>)
 8003ef6:	4d0d      	ldr	r5, [pc, #52]	; (8003f2c <__libc_init_array+0x3c>)
 8003ef8:	1b64      	subs	r4, r4, r5
 8003efa:	10a4      	asrs	r4, r4, #2
 8003efc:	42a6      	cmp	r6, r4
 8003efe:	d109      	bne.n	8003f14 <__libc_init_array+0x24>
 8003f00:	2600      	movs	r6, #0
 8003f02:	f000 fe69 	bl	8004bd8 <_init>
 8003f06:	4c0a      	ldr	r4, [pc, #40]	; (8003f30 <__libc_init_array+0x40>)
 8003f08:	4d0a      	ldr	r5, [pc, #40]	; (8003f34 <__libc_init_array+0x44>)
 8003f0a:	1b64      	subs	r4, r4, r5
 8003f0c:	10a4      	asrs	r4, r4, #2
 8003f0e:	42a6      	cmp	r6, r4
 8003f10:	d105      	bne.n	8003f1e <__libc_init_array+0x2e>
 8003f12:	bd70      	pop	{r4, r5, r6, pc}
 8003f14:	00b3      	lsls	r3, r6, #2
 8003f16:	58eb      	ldr	r3, [r5, r3]
 8003f18:	4798      	blx	r3
 8003f1a:	3601      	adds	r6, #1
 8003f1c:	e7ee      	b.n	8003efc <__libc_init_array+0xc>
 8003f1e:	00b3      	lsls	r3, r6, #2
 8003f20:	58eb      	ldr	r3, [r5, r3]
 8003f22:	4798      	blx	r3
 8003f24:	3601      	adds	r6, #1
 8003f26:	e7f2      	b.n	8003f0e <__libc_init_array+0x1e>
 8003f28:	08004d78 	.word	0x08004d78
 8003f2c:	08004d78 	.word	0x08004d78
 8003f30:	08004d7c 	.word	0x08004d7c
 8003f34:	08004d78 	.word	0x08004d78

08003f38 <__retarget_lock_acquire_recursive>:
 8003f38:	4770      	bx	lr

08003f3a <__retarget_lock_release_recursive>:
 8003f3a:	4770      	bx	lr

08003f3c <__assert_func>:
 8003f3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003f3e:	0014      	movs	r4, r2
 8003f40:	001a      	movs	r2, r3
 8003f42:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <__assert_func+0x2c>)
 8003f44:	0005      	movs	r5, r0
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	000e      	movs	r6, r1
 8003f4a:	68d8      	ldr	r0, [r3, #12]
 8003f4c:	4b07      	ldr	r3, [pc, #28]	; (8003f6c <__assert_func+0x30>)
 8003f4e:	2c00      	cmp	r4, #0
 8003f50:	d101      	bne.n	8003f56 <__assert_func+0x1a>
 8003f52:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <__assert_func+0x34>)
 8003f54:	001c      	movs	r4, r3
 8003f56:	4907      	ldr	r1, [pc, #28]	; (8003f74 <__assert_func+0x38>)
 8003f58:	9301      	str	r3, [sp, #4]
 8003f5a:	9402      	str	r4, [sp, #8]
 8003f5c:	002b      	movs	r3, r5
 8003f5e:	9600      	str	r6, [sp, #0]
 8003f60:	f000 f9c8 	bl	80042f4 <fiprintf>
 8003f64:	f000 f9e8 	bl	8004338 <abort>
 8003f68:	20000064 	.word	0x20000064
 8003f6c:	08004d07 	.word	0x08004d07
 8003f70:	08004d42 	.word	0x08004d42
 8003f74:	08004d14 	.word	0x08004d14

08003f78 <_free_r>:
 8003f78:	b570      	push	{r4, r5, r6, lr}
 8003f7a:	0005      	movs	r5, r0
 8003f7c:	2900      	cmp	r1, #0
 8003f7e:	d010      	beq.n	8003fa2 <_free_r+0x2a>
 8003f80:	1f0c      	subs	r4, r1, #4
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	da00      	bge.n	8003f8a <_free_r+0x12>
 8003f88:	18e4      	adds	r4, r4, r3
 8003f8a:	0028      	movs	r0, r5
 8003f8c:	f000 f8ec 	bl	8004168 <__malloc_lock>
 8003f90:	4a1d      	ldr	r2, [pc, #116]	; (8004008 <_free_r+0x90>)
 8003f92:	6813      	ldr	r3, [r2, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d105      	bne.n	8003fa4 <_free_r+0x2c>
 8003f98:	6063      	str	r3, [r4, #4]
 8003f9a:	6014      	str	r4, [r2, #0]
 8003f9c:	0028      	movs	r0, r5
 8003f9e:	f000 f8eb 	bl	8004178 <__malloc_unlock>
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
 8003fa4:	42a3      	cmp	r3, r4
 8003fa6:	d908      	bls.n	8003fba <_free_r+0x42>
 8003fa8:	6820      	ldr	r0, [r4, #0]
 8003faa:	1821      	adds	r1, r4, r0
 8003fac:	428b      	cmp	r3, r1
 8003fae:	d1f3      	bne.n	8003f98 <_free_r+0x20>
 8003fb0:	6819      	ldr	r1, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	1809      	adds	r1, r1, r0
 8003fb6:	6021      	str	r1, [r4, #0]
 8003fb8:	e7ee      	b.n	8003f98 <_free_r+0x20>
 8003fba:	001a      	movs	r2, r3
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <_free_r+0x4e>
 8003fc2:	42a3      	cmp	r3, r4
 8003fc4:	d9f9      	bls.n	8003fba <_free_r+0x42>
 8003fc6:	6811      	ldr	r1, [r2, #0]
 8003fc8:	1850      	adds	r0, r2, r1
 8003fca:	42a0      	cmp	r0, r4
 8003fcc:	d10b      	bne.n	8003fe6 <_free_r+0x6e>
 8003fce:	6820      	ldr	r0, [r4, #0]
 8003fd0:	1809      	adds	r1, r1, r0
 8003fd2:	1850      	adds	r0, r2, r1
 8003fd4:	6011      	str	r1, [r2, #0]
 8003fd6:	4283      	cmp	r3, r0
 8003fd8:	d1e0      	bne.n	8003f9c <_free_r+0x24>
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	1841      	adds	r1, r0, r1
 8003fe0:	6011      	str	r1, [r2, #0]
 8003fe2:	6053      	str	r3, [r2, #4]
 8003fe4:	e7da      	b.n	8003f9c <_free_r+0x24>
 8003fe6:	42a0      	cmp	r0, r4
 8003fe8:	d902      	bls.n	8003ff0 <_free_r+0x78>
 8003fea:	230c      	movs	r3, #12
 8003fec:	602b      	str	r3, [r5, #0]
 8003fee:	e7d5      	b.n	8003f9c <_free_r+0x24>
 8003ff0:	6820      	ldr	r0, [r4, #0]
 8003ff2:	1821      	adds	r1, r4, r0
 8003ff4:	428b      	cmp	r3, r1
 8003ff6:	d103      	bne.n	8004000 <_free_r+0x88>
 8003ff8:	6819      	ldr	r1, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	1809      	adds	r1, r1, r0
 8003ffe:	6021      	str	r1, [r4, #0]
 8004000:	6063      	str	r3, [r4, #4]
 8004002:	6054      	str	r4, [r2, #4]
 8004004:	e7ca      	b.n	8003f9c <_free_r+0x24>
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	20000bf0 	.word	0x20000bf0

0800400c <malloc>:
 800400c:	b510      	push	{r4, lr}
 800400e:	4b03      	ldr	r3, [pc, #12]	; (800401c <malloc+0x10>)
 8004010:	0001      	movs	r1, r0
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	f000 f826 	bl	8004064 <_malloc_r>
 8004018:	bd10      	pop	{r4, pc}
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	20000064 	.word	0x20000064

08004020 <sbrk_aligned>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	4e0f      	ldr	r6, [pc, #60]	; (8004060 <sbrk_aligned+0x40>)
 8004024:	000d      	movs	r5, r1
 8004026:	6831      	ldr	r1, [r6, #0]
 8004028:	0004      	movs	r4, r0
 800402a:	2900      	cmp	r1, #0
 800402c:	d102      	bne.n	8004034 <sbrk_aligned+0x14>
 800402e:	f000 f971 	bl	8004314 <_sbrk_r>
 8004032:	6030      	str	r0, [r6, #0]
 8004034:	0029      	movs	r1, r5
 8004036:	0020      	movs	r0, r4
 8004038:	f000 f96c 	bl	8004314 <_sbrk_r>
 800403c:	1c43      	adds	r3, r0, #1
 800403e:	d00a      	beq.n	8004056 <sbrk_aligned+0x36>
 8004040:	2303      	movs	r3, #3
 8004042:	1cc5      	adds	r5, r0, #3
 8004044:	439d      	bics	r5, r3
 8004046:	42a8      	cmp	r0, r5
 8004048:	d007      	beq.n	800405a <sbrk_aligned+0x3a>
 800404a:	1a29      	subs	r1, r5, r0
 800404c:	0020      	movs	r0, r4
 800404e:	f000 f961 	bl	8004314 <_sbrk_r>
 8004052:	3001      	adds	r0, #1
 8004054:	d101      	bne.n	800405a <sbrk_aligned+0x3a>
 8004056:	2501      	movs	r5, #1
 8004058:	426d      	negs	r5, r5
 800405a:	0028      	movs	r0, r5
 800405c:	bd70      	pop	{r4, r5, r6, pc}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	20000bf4 	.word	0x20000bf4

08004064 <_malloc_r>:
 8004064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004066:	2203      	movs	r2, #3
 8004068:	1ccb      	adds	r3, r1, #3
 800406a:	4393      	bics	r3, r2
 800406c:	3308      	adds	r3, #8
 800406e:	0006      	movs	r6, r0
 8004070:	001f      	movs	r7, r3
 8004072:	2b0c      	cmp	r3, #12
 8004074:	d238      	bcs.n	80040e8 <_malloc_r+0x84>
 8004076:	270c      	movs	r7, #12
 8004078:	42b9      	cmp	r1, r7
 800407a:	d837      	bhi.n	80040ec <_malloc_r+0x88>
 800407c:	0030      	movs	r0, r6
 800407e:	f000 f873 	bl	8004168 <__malloc_lock>
 8004082:	4b38      	ldr	r3, [pc, #224]	; (8004164 <_malloc_r+0x100>)
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	001c      	movs	r4, r3
 800408a:	2c00      	cmp	r4, #0
 800408c:	d133      	bne.n	80040f6 <_malloc_r+0x92>
 800408e:	0039      	movs	r1, r7
 8004090:	0030      	movs	r0, r6
 8004092:	f7ff ffc5 	bl	8004020 <sbrk_aligned>
 8004096:	0004      	movs	r4, r0
 8004098:	1c43      	adds	r3, r0, #1
 800409a:	d15e      	bne.n	800415a <_malloc_r+0xf6>
 800409c:	9b00      	ldr	r3, [sp, #0]
 800409e:	681c      	ldr	r4, [r3, #0]
 80040a0:	0025      	movs	r5, r4
 80040a2:	2d00      	cmp	r5, #0
 80040a4:	d14e      	bne.n	8004144 <_malloc_r+0xe0>
 80040a6:	2c00      	cmp	r4, #0
 80040a8:	d051      	beq.n	800414e <_malloc_r+0xea>
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	0029      	movs	r1, r5
 80040ae:	18e3      	adds	r3, r4, r3
 80040b0:	0030      	movs	r0, r6
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	f000 f92e 	bl	8004314 <_sbrk_r>
 80040b8:	9b01      	ldr	r3, [sp, #4]
 80040ba:	4283      	cmp	r3, r0
 80040bc:	d147      	bne.n	800414e <_malloc_r+0xea>
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	0030      	movs	r0, r6
 80040c2:	1aff      	subs	r7, r7, r3
 80040c4:	0039      	movs	r1, r7
 80040c6:	f7ff ffab 	bl	8004020 <sbrk_aligned>
 80040ca:	3001      	adds	r0, #1
 80040cc:	d03f      	beq.n	800414e <_malloc_r+0xea>
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	19db      	adds	r3, r3, r7
 80040d2:	6023      	str	r3, [r4, #0]
 80040d4:	9b00      	ldr	r3, [sp, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d040      	beq.n	800415e <_malloc_r+0xfa>
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	42a2      	cmp	r2, r4
 80040e0:	d133      	bne.n	800414a <_malloc_r+0xe6>
 80040e2:	2200      	movs	r2, #0
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	e014      	b.n	8004112 <_malloc_r+0xae>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	dac5      	bge.n	8004078 <_malloc_r+0x14>
 80040ec:	230c      	movs	r3, #12
 80040ee:	2500      	movs	r5, #0
 80040f0:	6033      	str	r3, [r6, #0]
 80040f2:	0028      	movs	r0, r5
 80040f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040f6:	6821      	ldr	r1, [r4, #0]
 80040f8:	1bc9      	subs	r1, r1, r7
 80040fa:	d420      	bmi.n	800413e <_malloc_r+0xda>
 80040fc:	290b      	cmp	r1, #11
 80040fe:	d918      	bls.n	8004132 <_malloc_r+0xce>
 8004100:	19e2      	adds	r2, r4, r7
 8004102:	6027      	str	r7, [r4, #0]
 8004104:	42a3      	cmp	r3, r4
 8004106:	d112      	bne.n	800412e <_malloc_r+0xca>
 8004108:	9b00      	ldr	r3, [sp, #0]
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	6863      	ldr	r3, [r4, #4]
 800410e:	6011      	str	r1, [r2, #0]
 8004110:	6053      	str	r3, [r2, #4]
 8004112:	0030      	movs	r0, r6
 8004114:	0025      	movs	r5, r4
 8004116:	f000 f82f 	bl	8004178 <__malloc_unlock>
 800411a:	2207      	movs	r2, #7
 800411c:	350b      	adds	r5, #11
 800411e:	1d23      	adds	r3, r4, #4
 8004120:	4395      	bics	r5, r2
 8004122:	1aea      	subs	r2, r5, r3
 8004124:	429d      	cmp	r5, r3
 8004126:	d0e4      	beq.n	80040f2 <_malloc_r+0x8e>
 8004128:	1b5b      	subs	r3, r3, r5
 800412a:	50a3      	str	r3, [r4, r2]
 800412c:	e7e1      	b.n	80040f2 <_malloc_r+0x8e>
 800412e:	605a      	str	r2, [r3, #4]
 8004130:	e7ec      	b.n	800410c <_malloc_r+0xa8>
 8004132:	6862      	ldr	r2, [r4, #4]
 8004134:	42a3      	cmp	r3, r4
 8004136:	d1d5      	bne.n	80040e4 <_malloc_r+0x80>
 8004138:	9b00      	ldr	r3, [sp, #0]
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	e7e9      	b.n	8004112 <_malloc_r+0xae>
 800413e:	0023      	movs	r3, r4
 8004140:	6864      	ldr	r4, [r4, #4]
 8004142:	e7a2      	b.n	800408a <_malloc_r+0x26>
 8004144:	002c      	movs	r4, r5
 8004146:	686d      	ldr	r5, [r5, #4]
 8004148:	e7ab      	b.n	80040a2 <_malloc_r+0x3e>
 800414a:	0013      	movs	r3, r2
 800414c:	e7c4      	b.n	80040d8 <_malloc_r+0x74>
 800414e:	230c      	movs	r3, #12
 8004150:	0030      	movs	r0, r6
 8004152:	6033      	str	r3, [r6, #0]
 8004154:	f000 f810 	bl	8004178 <__malloc_unlock>
 8004158:	e7cb      	b.n	80040f2 <_malloc_r+0x8e>
 800415a:	6027      	str	r7, [r4, #0]
 800415c:	e7d9      	b.n	8004112 <_malloc_r+0xae>
 800415e:	605b      	str	r3, [r3, #4]
 8004160:	deff      	udf	#255	; 0xff
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	20000bf0 	.word	0x20000bf0

08004168 <__malloc_lock>:
 8004168:	b510      	push	{r4, lr}
 800416a:	4802      	ldr	r0, [pc, #8]	; (8004174 <__malloc_lock+0xc>)
 800416c:	f7ff fee4 	bl	8003f38 <__retarget_lock_acquire_recursive>
 8004170:	bd10      	pop	{r4, pc}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	20000bec 	.word	0x20000bec

08004178 <__malloc_unlock>:
 8004178:	b510      	push	{r4, lr}
 800417a:	4802      	ldr	r0, [pc, #8]	; (8004184 <__malloc_unlock+0xc>)
 800417c:	f7ff fedd 	bl	8003f3a <__retarget_lock_release_recursive>
 8004180:	bd10      	pop	{r4, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	20000bec 	.word	0x20000bec

08004188 <__sflush_r>:
 8004188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800418a:	898b      	ldrh	r3, [r1, #12]
 800418c:	0005      	movs	r5, r0
 800418e:	000c      	movs	r4, r1
 8004190:	071a      	lsls	r2, r3, #28
 8004192:	d45c      	bmi.n	800424e <__sflush_r+0xc6>
 8004194:	684a      	ldr	r2, [r1, #4]
 8004196:	2a00      	cmp	r2, #0
 8004198:	dc04      	bgt.n	80041a4 <__sflush_r+0x1c>
 800419a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800419c:	2a00      	cmp	r2, #0
 800419e:	dc01      	bgt.n	80041a4 <__sflush_r+0x1c>
 80041a0:	2000      	movs	r0, #0
 80041a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041a4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80041a6:	2f00      	cmp	r7, #0
 80041a8:	d0fa      	beq.n	80041a0 <__sflush_r+0x18>
 80041aa:	2200      	movs	r2, #0
 80041ac:	2080      	movs	r0, #128	; 0x80
 80041ae:	682e      	ldr	r6, [r5, #0]
 80041b0:	602a      	str	r2, [r5, #0]
 80041b2:	001a      	movs	r2, r3
 80041b4:	0140      	lsls	r0, r0, #5
 80041b6:	6a21      	ldr	r1, [r4, #32]
 80041b8:	4002      	ands	r2, r0
 80041ba:	4203      	tst	r3, r0
 80041bc:	d034      	beq.n	8004228 <__sflush_r+0xa0>
 80041be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	075b      	lsls	r3, r3, #29
 80041c4:	d506      	bpl.n	80041d4 <__sflush_r+0x4c>
 80041c6:	6863      	ldr	r3, [r4, #4]
 80041c8:	1ac0      	subs	r0, r0, r3
 80041ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <__sflush_r+0x4c>
 80041d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041d2:	1ac0      	subs	r0, r0, r3
 80041d4:	0002      	movs	r2, r0
 80041d6:	2300      	movs	r3, #0
 80041d8:	0028      	movs	r0, r5
 80041da:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80041dc:	6a21      	ldr	r1, [r4, #32]
 80041de:	47b8      	blx	r7
 80041e0:	89a2      	ldrh	r2, [r4, #12]
 80041e2:	1c43      	adds	r3, r0, #1
 80041e4:	d106      	bne.n	80041f4 <__sflush_r+0x6c>
 80041e6:	6829      	ldr	r1, [r5, #0]
 80041e8:	291d      	cmp	r1, #29
 80041ea:	d82c      	bhi.n	8004246 <__sflush_r+0xbe>
 80041ec:	4b2a      	ldr	r3, [pc, #168]	; (8004298 <__sflush_r+0x110>)
 80041ee:	410b      	asrs	r3, r1
 80041f0:	07db      	lsls	r3, r3, #31
 80041f2:	d428      	bmi.n	8004246 <__sflush_r+0xbe>
 80041f4:	2300      	movs	r3, #0
 80041f6:	6063      	str	r3, [r4, #4]
 80041f8:	6923      	ldr	r3, [r4, #16]
 80041fa:	6023      	str	r3, [r4, #0]
 80041fc:	04d2      	lsls	r2, r2, #19
 80041fe:	d505      	bpl.n	800420c <__sflush_r+0x84>
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	d102      	bne.n	800420a <__sflush_r+0x82>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d100      	bne.n	800420c <__sflush_r+0x84>
 800420a:	6560      	str	r0, [r4, #84]	; 0x54
 800420c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800420e:	602e      	str	r6, [r5, #0]
 8004210:	2900      	cmp	r1, #0
 8004212:	d0c5      	beq.n	80041a0 <__sflush_r+0x18>
 8004214:	0023      	movs	r3, r4
 8004216:	3344      	adds	r3, #68	; 0x44
 8004218:	4299      	cmp	r1, r3
 800421a:	d002      	beq.n	8004222 <__sflush_r+0x9a>
 800421c:	0028      	movs	r0, r5
 800421e:	f7ff feab 	bl	8003f78 <_free_r>
 8004222:	2000      	movs	r0, #0
 8004224:	6360      	str	r0, [r4, #52]	; 0x34
 8004226:	e7bc      	b.n	80041a2 <__sflush_r+0x1a>
 8004228:	2301      	movs	r3, #1
 800422a:	0028      	movs	r0, r5
 800422c:	47b8      	blx	r7
 800422e:	1c43      	adds	r3, r0, #1
 8004230:	d1c6      	bne.n	80041c0 <__sflush_r+0x38>
 8004232:	682b      	ldr	r3, [r5, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0c3      	beq.n	80041c0 <__sflush_r+0x38>
 8004238:	2b1d      	cmp	r3, #29
 800423a:	d001      	beq.n	8004240 <__sflush_r+0xb8>
 800423c:	2b16      	cmp	r3, #22
 800423e:	d101      	bne.n	8004244 <__sflush_r+0xbc>
 8004240:	602e      	str	r6, [r5, #0]
 8004242:	e7ad      	b.n	80041a0 <__sflush_r+0x18>
 8004244:	89a2      	ldrh	r2, [r4, #12]
 8004246:	2340      	movs	r3, #64	; 0x40
 8004248:	4313      	orrs	r3, r2
 800424a:	81a3      	strh	r3, [r4, #12]
 800424c:	e7a9      	b.n	80041a2 <__sflush_r+0x1a>
 800424e:	690e      	ldr	r6, [r1, #16]
 8004250:	2e00      	cmp	r6, #0
 8004252:	d0a5      	beq.n	80041a0 <__sflush_r+0x18>
 8004254:	680f      	ldr	r7, [r1, #0]
 8004256:	600e      	str	r6, [r1, #0]
 8004258:	1bba      	subs	r2, r7, r6
 800425a:	9201      	str	r2, [sp, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	079b      	lsls	r3, r3, #30
 8004260:	d100      	bne.n	8004264 <__sflush_r+0xdc>
 8004262:	694a      	ldr	r2, [r1, #20]
 8004264:	60a2      	str	r2, [r4, #8]
 8004266:	9b01      	ldr	r3, [sp, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	dd99      	ble.n	80041a0 <__sflush_r+0x18>
 800426c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800426e:	0032      	movs	r2, r6
 8004270:	001f      	movs	r7, r3
 8004272:	0028      	movs	r0, r5
 8004274:	9b01      	ldr	r3, [sp, #4]
 8004276:	6a21      	ldr	r1, [r4, #32]
 8004278:	47b8      	blx	r7
 800427a:	2800      	cmp	r0, #0
 800427c:	dc06      	bgt.n	800428c <__sflush_r+0x104>
 800427e:	2340      	movs	r3, #64	; 0x40
 8004280:	2001      	movs	r0, #1
 8004282:	89a2      	ldrh	r2, [r4, #12]
 8004284:	4240      	negs	r0, r0
 8004286:	4313      	orrs	r3, r2
 8004288:	81a3      	strh	r3, [r4, #12]
 800428a:	e78a      	b.n	80041a2 <__sflush_r+0x1a>
 800428c:	9b01      	ldr	r3, [sp, #4]
 800428e:	1836      	adds	r6, r6, r0
 8004290:	1a1b      	subs	r3, r3, r0
 8004292:	9301      	str	r3, [sp, #4]
 8004294:	e7e7      	b.n	8004266 <__sflush_r+0xde>
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	dfbffffe 	.word	0xdfbffffe

0800429c <_fflush_r>:
 800429c:	690b      	ldr	r3, [r1, #16]
 800429e:	b570      	push	{r4, r5, r6, lr}
 80042a0:	0005      	movs	r5, r0
 80042a2:	000c      	movs	r4, r1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d102      	bne.n	80042ae <_fflush_r+0x12>
 80042a8:	2500      	movs	r5, #0
 80042aa:	0028      	movs	r0, r5
 80042ac:	bd70      	pop	{r4, r5, r6, pc}
 80042ae:	2800      	cmp	r0, #0
 80042b0:	d004      	beq.n	80042bc <_fflush_r+0x20>
 80042b2:	6a03      	ldr	r3, [r0, #32]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <_fflush_r+0x20>
 80042b8:	f7ff fd3e 	bl	8003d38 <__sinit>
 80042bc:	220c      	movs	r2, #12
 80042be:	5ea3      	ldrsh	r3, [r4, r2]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f1      	beq.n	80042a8 <_fflush_r+0xc>
 80042c4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042c6:	07d2      	lsls	r2, r2, #31
 80042c8:	d404      	bmi.n	80042d4 <_fflush_r+0x38>
 80042ca:	059b      	lsls	r3, r3, #22
 80042cc:	d402      	bmi.n	80042d4 <_fflush_r+0x38>
 80042ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042d0:	f7ff fe32 	bl	8003f38 <__retarget_lock_acquire_recursive>
 80042d4:	0028      	movs	r0, r5
 80042d6:	0021      	movs	r1, r4
 80042d8:	f7ff ff56 	bl	8004188 <__sflush_r>
 80042dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042de:	0005      	movs	r5, r0
 80042e0:	07db      	lsls	r3, r3, #31
 80042e2:	d4e2      	bmi.n	80042aa <_fflush_r+0xe>
 80042e4:	89a3      	ldrh	r3, [r4, #12]
 80042e6:	059b      	lsls	r3, r3, #22
 80042e8:	d4df      	bmi.n	80042aa <_fflush_r+0xe>
 80042ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042ec:	f7ff fe25 	bl	8003f3a <__retarget_lock_release_recursive>
 80042f0:	e7db      	b.n	80042aa <_fflush_r+0xe>
	...

080042f4 <fiprintf>:
 80042f4:	b40e      	push	{r1, r2, r3}
 80042f6:	b517      	push	{r0, r1, r2, r4, lr}
 80042f8:	4c05      	ldr	r4, [pc, #20]	; (8004310 <fiprintf+0x1c>)
 80042fa:	ab05      	add	r3, sp, #20
 80042fc:	cb04      	ldmia	r3!, {r2}
 80042fe:	0001      	movs	r1, r0
 8004300:	6820      	ldr	r0, [r4, #0]
 8004302:	9301      	str	r3, [sp, #4]
 8004304:	f000 f846 	bl	8004394 <_vfiprintf_r>
 8004308:	bc1e      	pop	{r1, r2, r3, r4}
 800430a:	bc08      	pop	{r3}
 800430c:	b003      	add	sp, #12
 800430e:	4718      	bx	r3
 8004310:	20000064 	.word	0x20000064

08004314 <_sbrk_r>:
 8004314:	2300      	movs	r3, #0
 8004316:	b570      	push	{r4, r5, r6, lr}
 8004318:	4d06      	ldr	r5, [pc, #24]	; (8004334 <_sbrk_r+0x20>)
 800431a:	0004      	movs	r4, r0
 800431c:	0008      	movs	r0, r1
 800431e:	602b      	str	r3, [r5, #0]
 8004320:	f7fc fe20 	bl	8000f64 <_sbrk>
 8004324:	1c43      	adds	r3, r0, #1
 8004326:	d103      	bne.n	8004330 <_sbrk_r+0x1c>
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d000      	beq.n	8004330 <_sbrk_r+0x1c>
 800432e:	6023      	str	r3, [r4, #0]
 8004330:	bd70      	pop	{r4, r5, r6, pc}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	20000be8 	.word	0x20000be8

08004338 <abort>:
 8004338:	2006      	movs	r0, #6
 800433a:	b510      	push	{r4, lr}
 800433c:	f000 fb96 	bl	8004a6c <raise>
 8004340:	2001      	movs	r0, #1
 8004342:	f7fc fd9d 	bl	8000e80 <_exit>

08004346 <__sfputc_r>:
 8004346:	6893      	ldr	r3, [r2, #8]
 8004348:	b510      	push	{r4, lr}
 800434a:	3b01      	subs	r3, #1
 800434c:	6093      	str	r3, [r2, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	da04      	bge.n	800435c <__sfputc_r+0x16>
 8004352:	6994      	ldr	r4, [r2, #24]
 8004354:	42a3      	cmp	r3, r4
 8004356:	db07      	blt.n	8004368 <__sfputc_r+0x22>
 8004358:	290a      	cmp	r1, #10
 800435a:	d005      	beq.n	8004368 <__sfputc_r+0x22>
 800435c:	6813      	ldr	r3, [r2, #0]
 800435e:	1c58      	adds	r0, r3, #1
 8004360:	6010      	str	r0, [r2, #0]
 8004362:	7019      	strb	r1, [r3, #0]
 8004364:	0008      	movs	r0, r1
 8004366:	bd10      	pop	{r4, pc}
 8004368:	f000 fab0 	bl	80048cc <__swbuf_r>
 800436c:	0001      	movs	r1, r0
 800436e:	e7f9      	b.n	8004364 <__sfputc_r+0x1e>

08004370 <__sfputs_r>:
 8004370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004372:	0006      	movs	r6, r0
 8004374:	000f      	movs	r7, r1
 8004376:	0014      	movs	r4, r2
 8004378:	18d5      	adds	r5, r2, r3
 800437a:	42ac      	cmp	r4, r5
 800437c:	d101      	bne.n	8004382 <__sfputs_r+0x12>
 800437e:	2000      	movs	r0, #0
 8004380:	e007      	b.n	8004392 <__sfputs_r+0x22>
 8004382:	7821      	ldrb	r1, [r4, #0]
 8004384:	003a      	movs	r2, r7
 8004386:	0030      	movs	r0, r6
 8004388:	f7ff ffdd 	bl	8004346 <__sfputc_r>
 800438c:	3401      	adds	r4, #1
 800438e:	1c43      	adds	r3, r0, #1
 8004390:	d1f3      	bne.n	800437a <__sfputs_r+0xa>
 8004392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004394 <_vfiprintf_r>:
 8004394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004396:	b0a1      	sub	sp, #132	; 0x84
 8004398:	000f      	movs	r7, r1
 800439a:	0015      	movs	r5, r2
 800439c:	001e      	movs	r6, r3
 800439e:	9003      	str	r0, [sp, #12]
 80043a0:	2800      	cmp	r0, #0
 80043a2:	d004      	beq.n	80043ae <_vfiprintf_r+0x1a>
 80043a4:	6a03      	ldr	r3, [r0, #32]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <_vfiprintf_r+0x1a>
 80043aa:	f7ff fcc5 	bl	8003d38 <__sinit>
 80043ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043b0:	07db      	lsls	r3, r3, #31
 80043b2:	d405      	bmi.n	80043c0 <_vfiprintf_r+0x2c>
 80043b4:	89bb      	ldrh	r3, [r7, #12]
 80043b6:	059b      	lsls	r3, r3, #22
 80043b8:	d402      	bmi.n	80043c0 <_vfiprintf_r+0x2c>
 80043ba:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80043bc:	f7ff fdbc 	bl	8003f38 <__retarget_lock_acquire_recursive>
 80043c0:	89bb      	ldrh	r3, [r7, #12]
 80043c2:	071b      	lsls	r3, r3, #28
 80043c4:	d502      	bpl.n	80043cc <_vfiprintf_r+0x38>
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d113      	bne.n	80043f4 <_vfiprintf_r+0x60>
 80043cc:	0039      	movs	r1, r7
 80043ce:	9803      	ldr	r0, [sp, #12]
 80043d0:	f000 fabe 	bl	8004950 <__swsetup_r>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d00d      	beq.n	80043f4 <_vfiprintf_r+0x60>
 80043d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043da:	07db      	lsls	r3, r3, #31
 80043dc:	d503      	bpl.n	80043e6 <_vfiprintf_r+0x52>
 80043de:	2001      	movs	r0, #1
 80043e0:	4240      	negs	r0, r0
 80043e2:	b021      	add	sp, #132	; 0x84
 80043e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043e6:	89bb      	ldrh	r3, [r7, #12]
 80043e8:	059b      	lsls	r3, r3, #22
 80043ea:	d4f8      	bmi.n	80043de <_vfiprintf_r+0x4a>
 80043ec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80043ee:	f7ff fda4 	bl	8003f3a <__retarget_lock_release_recursive>
 80043f2:	e7f4      	b.n	80043de <_vfiprintf_r+0x4a>
 80043f4:	2300      	movs	r3, #0
 80043f6:	ac08      	add	r4, sp, #32
 80043f8:	6163      	str	r3, [r4, #20]
 80043fa:	3320      	adds	r3, #32
 80043fc:	7663      	strb	r3, [r4, #25]
 80043fe:	3310      	adds	r3, #16
 8004400:	76a3      	strb	r3, [r4, #26]
 8004402:	9607      	str	r6, [sp, #28]
 8004404:	002e      	movs	r6, r5
 8004406:	7833      	ldrb	r3, [r6, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <_vfiprintf_r+0x7c>
 800440c:	2b25      	cmp	r3, #37	; 0x25
 800440e:	d148      	bne.n	80044a2 <_vfiprintf_r+0x10e>
 8004410:	1b73      	subs	r3, r6, r5
 8004412:	9305      	str	r3, [sp, #20]
 8004414:	42ae      	cmp	r6, r5
 8004416:	d00b      	beq.n	8004430 <_vfiprintf_r+0x9c>
 8004418:	002a      	movs	r2, r5
 800441a:	0039      	movs	r1, r7
 800441c:	9803      	ldr	r0, [sp, #12]
 800441e:	f7ff ffa7 	bl	8004370 <__sfputs_r>
 8004422:	3001      	adds	r0, #1
 8004424:	d100      	bne.n	8004428 <_vfiprintf_r+0x94>
 8004426:	e0af      	b.n	8004588 <_vfiprintf_r+0x1f4>
 8004428:	6963      	ldr	r3, [r4, #20]
 800442a:	9a05      	ldr	r2, [sp, #20]
 800442c:	189b      	adds	r3, r3, r2
 800442e:	6163      	str	r3, [r4, #20]
 8004430:	7833      	ldrb	r3, [r6, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d100      	bne.n	8004438 <_vfiprintf_r+0xa4>
 8004436:	e0a7      	b.n	8004588 <_vfiprintf_r+0x1f4>
 8004438:	2201      	movs	r2, #1
 800443a:	2300      	movs	r3, #0
 800443c:	4252      	negs	r2, r2
 800443e:	6062      	str	r2, [r4, #4]
 8004440:	a904      	add	r1, sp, #16
 8004442:	3254      	adds	r2, #84	; 0x54
 8004444:	1852      	adds	r2, r2, r1
 8004446:	1c75      	adds	r5, r6, #1
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	60e3      	str	r3, [r4, #12]
 800444c:	60a3      	str	r3, [r4, #8]
 800444e:	7013      	strb	r3, [r2, #0]
 8004450:	65a3      	str	r3, [r4, #88]	; 0x58
 8004452:	4b59      	ldr	r3, [pc, #356]	; (80045b8 <_vfiprintf_r+0x224>)
 8004454:	2205      	movs	r2, #5
 8004456:	0018      	movs	r0, r3
 8004458:	7829      	ldrb	r1, [r5, #0]
 800445a:	9305      	str	r3, [sp, #20]
 800445c:	f000 fb26 	bl	8004aac <memchr>
 8004460:	1c6e      	adds	r6, r5, #1
 8004462:	2800      	cmp	r0, #0
 8004464:	d11f      	bne.n	80044a6 <_vfiprintf_r+0x112>
 8004466:	6822      	ldr	r2, [r4, #0]
 8004468:	06d3      	lsls	r3, r2, #27
 800446a:	d504      	bpl.n	8004476 <_vfiprintf_r+0xe2>
 800446c:	2353      	movs	r3, #83	; 0x53
 800446e:	a904      	add	r1, sp, #16
 8004470:	185b      	adds	r3, r3, r1
 8004472:	2120      	movs	r1, #32
 8004474:	7019      	strb	r1, [r3, #0]
 8004476:	0713      	lsls	r3, r2, #28
 8004478:	d504      	bpl.n	8004484 <_vfiprintf_r+0xf0>
 800447a:	2353      	movs	r3, #83	; 0x53
 800447c:	a904      	add	r1, sp, #16
 800447e:	185b      	adds	r3, r3, r1
 8004480:	212b      	movs	r1, #43	; 0x2b
 8004482:	7019      	strb	r1, [r3, #0]
 8004484:	782b      	ldrb	r3, [r5, #0]
 8004486:	2b2a      	cmp	r3, #42	; 0x2a
 8004488:	d016      	beq.n	80044b8 <_vfiprintf_r+0x124>
 800448a:	002e      	movs	r6, r5
 800448c:	2100      	movs	r1, #0
 800448e:	200a      	movs	r0, #10
 8004490:	68e3      	ldr	r3, [r4, #12]
 8004492:	7832      	ldrb	r2, [r6, #0]
 8004494:	1c75      	adds	r5, r6, #1
 8004496:	3a30      	subs	r2, #48	; 0x30
 8004498:	2a09      	cmp	r2, #9
 800449a:	d94e      	bls.n	800453a <_vfiprintf_r+0x1a6>
 800449c:	2900      	cmp	r1, #0
 800449e:	d111      	bne.n	80044c4 <_vfiprintf_r+0x130>
 80044a0:	e017      	b.n	80044d2 <_vfiprintf_r+0x13e>
 80044a2:	3601      	adds	r6, #1
 80044a4:	e7af      	b.n	8004406 <_vfiprintf_r+0x72>
 80044a6:	9b05      	ldr	r3, [sp, #20]
 80044a8:	6822      	ldr	r2, [r4, #0]
 80044aa:	1ac0      	subs	r0, r0, r3
 80044ac:	2301      	movs	r3, #1
 80044ae:	4083      	lsls	r3, r0
 80044b0:	4313      	orrs	r3, r2
 80044b2:	0035      	movs	r5, r6
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	e7cc      	b.n	8004452 <_vfiprintf_r+0xbe>
 80044b8:	9b07      	ldr	r3, [sp, #28]
 80044ba:	1d19      	adds	r1, r3, #4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	9107      	str	r1, [sp, #28]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	db01      	blt.n	80044c8 <_vfiprintf_r+0x134>
 80044c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80044c6:	e004      	b.n	80044d2 <_vfiprintf_r+0x13e>
 80044c8:	425b      	negs	r3, r3
 80044ca:	60e3      	str	r3, [r4, #12]
 80044cc:	2302      	movs	r3, #2
 80044ce:	4313      	orrs	r3, r2
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	7833      	ldrb	r3, [r6, #0]
 80044d4:	2b2e      	cmp	r3, #46	; 0x2e
 80044d6:	d10a      	bne.n	80044ee <_vfiprintf_r+0x15a>
 80044d8:	7873      	ldrb	r3, [r6, #1]
 80044da:	2b2a      	cmp	r3, #42	; 0x2a
 80044dc:	d135      	bne.n	800454a <_vfiprintf_r+0x1b6>
 80044de:	9b07      	ldr	r3, [sp, #28]
 80044e0:	3602      	adds	r6, #2
 80044e2:	1d1a      	adds	r2, r3, #4
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	9207      	str	r2, [sp, #28]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	db2b      	blt.n	8004544 <_vfiprintf_r+0x1b0>
 80044ec:	9309      	str	r3, [sp, #36]	; 0x24
 80044ee:	4d33      	ldr	r5, [pc, #204]	; (80045bc <_vfiprintf_r+0x228>)
 80044f0:	2203      	movs	r2, #3
 80044f2:	0028      	movs	r0, r5
 80044f4:	7831      	ldrb	r1, [r6, #0]
 80044f6:	f000 fad9 	bl	8004aac <memchr>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d006      	beq.n	800450c <_vfiprintf_r+0x178>
 80044fe:	2340      	movs	r3, #64	; 0x40
 8004500:	1b40      	subs	r0, r0, r5
 8004502:	4083      	lsls	r3, r0
 8004504:	6822      	ldr	r2, [r4, #0]
 8004506:	3601      	adds	r6, #1
 8004508:	4313      	orrs	r3, r2
 800450a:	6023      	str	r3, [r4, #0]
 800450c:	7831      	ldrb	r1, [r6, #0]
 800450e:	2206      	movs	r2, #6
 8004510:	482b      	ldr	r0, [pc, #172]	; (80045c0 <_vfiprintf_r+0x22c>)
 8004512:	1c75      	adds	r5, r6, #1
 8004514:	7621      	strb	r1, [r4, #24]
 8004516:	f000 fac9 	bl	8004aac <memchr>
 800451a:	2800      	cmp	r0, #0
 800451c:	d043      	beq.n	80045a6 <_vfiprintf_r+0x212>
 800451e:	4b29      	ldr	r3, [pc, #164]	; (80045c4 <_vfiprintf_r+0x230>)
 8004520:	2b00      	cmp	r3, #0
 8004522:	d125      	bne.n	8004570 <_vfiprintf_r+0x1dc>
 8004524:	2207      	movs	r2, #7
 8004526:	9b07      	ldr	r3, [sp, #28]
 8004528:	3307      	adds	r3, #7
 800452a:	4393      	bics	r3, r2
 800452c:	3308      	adds	r3, #8
 800452e:	9307      	str	r3, [sp, #28]
 8004530:	6963      	ldr	r3, [r4, #20]
 8004532:	9a04      	ldr	r2, [sp, #16]
 8004534:	189b      	adds	r3, r3, r2
 8004536:	6163      	str	r3, [r4, #20]
 8004538:	e764      	b.n	8004404 <_vfiprintf_r+0x70>
 800453a:	4343      	muls	r3, r0
 800453c:	002e      	movs	r6, r5
 800453e:	2101      	movs	r1, #1
 8004540:	189b      	adds	r3, r3, r2
 8004542:	e7a6      	b.n	8004492 <_vfiprintf_r+0xfe>
 8004544:	2301      	movs	r3, #1
 8004546:	425b      	negs	r3, r3
 8004548:	e7d0      	b.n	80044ec <_vfiprintf_r+0x158>
 800454a:	2300      	movs	r3, #0
 800454c:	200a      	movs	r0, #10
 800454e:	001a      	movs	r2, r3
 8004550:	3601      	adds	r6, #1
 8004552:	6063      	str	r3, [r4, #4]
 8004554:	7831      	ldrb	r1, [r6, #0]
 8004556:	1c75      	adds	r5, r6, #1
 8004558:	3930      	subs	r1, #48	; 0x30
 800455a:	2909      	cmp	r1, #9
 800455c:	d903      	bls.n	8004566 <_vfiprintf_r+0x1d2>
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0c5      	beq.n	80044ee <_vfiprintf_r+0x15a>
 8004562:	9209      	str	r2, [sp, #36]	; 0x24
 8004564:	e7c3      	b.n	80044ee <_vfiprintf_r+0x15a>
 8004566:	4342      	muls	r2, r0
 8004568:	002e      	movs	r6, r5
 800456a:	2301      	movs	r3, #1
 800456c:	1852      	adds	r2, r2, r1
 800456e:	e7f1      	b.n	8004554 <_vfiprintf_r+0x1c0>
 8004570:	aa07      	add	r2, sp, #28
 8004572:	9200      	str	r2, [sp, #0]
 8004574:	0021      	movs	r1, r4
 8004576:	003a      	movs	r2, r7
 8004578:	4b13      	ldr	r3, [pc, #76]	; (80045c8 <_vfiprintf_r+0x234>)
 800457a:	9803      	ldr	r0, [sp, #12]
 800457c:	e000      	b.n	8004580 <_vfiprintf_r+0x1ec>
 800457e:	bf00      	nop
 8004580:	9004      	str	r0, [sp, #16]
 8004582:	9b04      	ldr	r3, [sp, #16]
 8004584:	3301      	adds	r3, #1
 8004586:	d1d3      	bne.n	8004530 <_vfiprintf_r+0x19c>
 8004588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800458a:	07db      	lsls	r3, r3, #31
 800458c:	d405      	bmi.n	800459a <_vfiprintf_r+0x206>
 800458e:	89bb      	ldrh	r3, [r7, #12]
 8004590:	059b      	lsls	r3, r3, #22
 8004592:	d402      	bmi.n	800459a <_vfiprintf_r+0x206>
 8004594:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004596:	f7ff fcd0 	bl	8003f3a <__retarget_lock_release_recursive>
 800459a:	89bb      	ldrh	r3, [r7, #12]
 800459c:	065b      	lsls	r3, r3, #25
 800459e:	d500      	bpl.n	80045a2 <_vfiprintf_r+0x20e>
 80045a0:	e71d      	b.n	80043de <_vfiprintf_r+0x4a>
 80045a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80045a4:	e71d      	b.n	80043e2 <_vfiprintf_r+0x4e>
 80045a6:	aa07      	add	r2, sp, #28
 80045a8:	9200      	str	r2, [sp, #0]
 80045aa:	0021      	movs	r1, r4
 80045ac:	003a      	movs	r2, r7
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <_vfiprintf_r+0x234>)
 80045b0:	9803      	ldr	r0, [sp, #12]
 80045b2:	f000 f87b 	bl	80046ac <_printf_i>
 80045b6:	e7e3      	b.n	8004580 <_vfiprintf_r+0x1ec>
 80045b8:	08004d43 	.word	0x08004d43
 80045bc:	08004d49 	.word	0x08004d49
 80045c0:	08004d4d 	.word	0x08004d4d
 80045c4:	00000000 	.word	0x00000000
 80045c8:	08004371 	.word	0x08004371

080045cc <_printf_common>:
 80045cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ce:	0016      	movs	r6, r2
 80045d0:	9301      	str	r3, [sp, #4]
 80045d2:	688a      	ldr	r2, [r1, #8]
 80045d4:	690b      	ldr	r3, [r1, #16]
 80045d6:	000c      	movs	r4, r1
 80045d8:	9000      	str	r0, [sp, #0]
 80045da:	4293      	cmp	r3, r2
 80045dc:	da00      	bge.n	80045e0 <_printf_common+0x14>
 80045de:	0013      	movs	r3, r2
 80045e0:	0022      	movs	r2, r4
 80045e2:	6033      	str	r3, [r6, #0]
 80045e4:	3243      	adds	r2, #67	; 0x43
 80045e6:	7812      	ldrb	r2, [r2, #0]
 80045e8:	2a00      	cmp	r2, #0
 80045ea:	d001      	beq.n	80045f0 <_printf_common+0x24>
 80045ec:	3301      	adds	r3, #1
 80045ee:	6033      	str	r3, [r6, #0]
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	069b      	lsls	r3, r3, #26
 80045f4:	d502      	bpl.n	80045fc <_printf_common+0x30>
 80045f6:	6833      	ldr	r3, [r6, #0]
 80045f8:	3302      	adds	r3, #2
 80045fa:	6033      	str	r3, [r6, #0]
 80045fc:	6822      	ldr	r2, [r4, #0]
 80045fe:	2306      	movs	r3, #6
 8004600:	0015      	movs	r5, r2
 8004602:	401d      	ands	r5, r3
 8004604:	421a      	tst	r2, r3
 8004606:	d027      	beq.n	8004658 <_printf_common+0x8c>
 8004608:	0023      	movs	r3, r4
 800460a:	3343      	adds	r3, #67	; 0x43
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	1e5a      	subs	r2, r3, #1
 8004610:	4193      	sbcs	r3, r2
 8004612:	6822      	ldr	r2, [r4, #0]
 8004614:	0692      	lsls	r2, r2, #26
 8004616:	d430      	bmi.n	800467a <_printf_common+0xae>
 8004618:	0022      	movs	r2, r4
 800461a:	9901      	ldr	r1, [sp, #4]
 800461c:	9800      	ldr	r0, [sp, #0]
 800461e:	9d08      	ldr	r5, [sp, #32]
 8004620:	3243      	adds	r2, #67	; 0x43
 8004622:	47a8      	blx	r5
 8004624:	3001      	adds	r0, #1
 8004626:	d025      	beq.n	8004674 <_printf_common+0xa8>
 8004628:	2206      	movs	r2, #6
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	2500      	movs	r5, #0
 800462e:	4013      	ands	r3, r2
 8004630:	2b04      	cmp	r3, #4
 8004632:	d105      	bne.n	8004640 <_printf_common+0x74>
 8004634:	6833      	ldr	r3, [r6, #0]
 8004636:	68e5      	ldr	r5, [r4, #12]
 8004638:	1aed      	subs	r5, r5, r3
 800463a:	43eb      	mvns	r3, r5
 800463c:	17db      	asrs	r3, r3, #31
 800463e:	401d      	ands	r5, r3
 8004640:	68a3      	ldr	r3, [r4, #8]
 8004642:	6922      	ldr	r2, [r4, #16]
 8004644:	4293      	cmp	r3, r2
 8004646:	dd01      	ble.n	800464c <_printf_common+0x80>
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	18ed      	adds	r5, r5, r3
 800464c:	2600      	movs	r6, #0
 800464e:	42b5      	cmp	r5, r6
 8004650:	d120      	bne.n	8004694 <_printf_common+0xc8>
 8004652:	2000      	movs	r0, #0
 8004654:	e010      	b.n	8004678 <_printf_common+0xac>
 8004656:	3501      	adds	r5, #1
 8004658:	68e3      	ldr	r3, [r4, #12]
 800465a:	6832      	ldr	r2, [r6, #0]
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	42ab      	cmp	r3, r5
 8004660:	ddd2      	ble.n	8004608 <_printf_common+0x3c>
 8004662:	0022      	movs	r2, r4
 8004664:	2301      	movs	r3, #1
 8004666:	9901      	ldr	r1, [sp, #4]
 8004668:	9800      	ldr	r0, [sp, #0]
 800466a:	9f08      	ldr	r7, [sp, #32]
 800466c:	3219      	adds	r2, #25
 800466e:	47b8      	blx	r7
 8004670:	3001      	adds	r0, #1
 8004672:	d1f0      	bne.n	8004656 <_printf_common+0x8a>
 8004674:	2001      	movs	r0, #1
 8004676:	4240      	negs	r0, r0
 8004678:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800467a:	2030      	movs	r0, #48	; 0x30
 800467c:	18e1      	adds	r1, r4, r3
 800467e:	3143      	adds	r1, #67	; 0x43
 8004680:	7008      	strb	r0, [r1, #0]
 8004682:	0021      	movs	r1, r4
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	3145      	adds	r1, #69	; 0x45
 8004688:	7809      	ldrb	r1, [r1, #0]
 800468a:	18a2      	adds	r2, r4, r2
 800468c:	3243      	adds	r2, #67	; 0x43
 800468e:	3302      	adds	r3, #2
 8004690:	7011      	strb	r1, [r2, #0]
 8004692:	e7c1      	b.n	8004618 <_printf_common+0x4c>
 8004694:	0022      	movs	r2, r4
 8004696:	2301      	movs	r3, #1
 8004698:	9901      	ldr	r1, [sp, #4]
 800469a:	9800      	ldr	r0, [sp, #0]
 800469c:	9f08      	ldr	r7, [sp, #32]
 800469e:	321a      	adds	r2, #26
 80046a0:	47b8      	blx	r7
 80046a2:	3001      	adds	r0, #1
 80046a4:	d0e6      	beq.n	8004674 <_printf_common+0xa8>
 80046a6:	3601      	adds	r6, #1
 80046a8:	e7d1      	b.n	800464e <_printf_common+0x82>
	...

080046ac <_printf_i>:
 80046ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ae:	b08b      	sub	sp, #44	; 0x2c
 80046b0:	9206      	str	r2, [sp, #24]
 80046b2:	000a      	movs	r2, r1
 80046b4:	3243      	adds	r2, #67	; 0x43
 80046b6:	9307      	str	r3, [sp, #28]
 80046b8:	9005      	str	r0, [sp, #20]
 80046ba:	9204      	str	r2, [sp, #16]
 80046bc:	7e0a      	ldrb	r2, [r1, #24]
 80046be:	000c      	movs	r4, r1
 80046c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80046c2:	2a78      	cmp	r2, #120	; 0x78
 80046c4:	d809      	bhi.n	80046da <_printf_i+0x2e>
 80046c6:	2a62      	cmp	r2, #98	; 0x62
 80046c8:	d80b      	bhi.n	80046e2 <_printf_i+0x36>
 80046ca:	2a00      	cmp	r2, #0
 80046cc:	d100      	bne.n	80046d0 <_printf_i+0x24>
 80046ce:	e0be      	b.n	800484e <_printf_i+0x1a2>
 80046d0:	497c      	ldr	r1, [pc, #496]	; (80048c4 <_printf_i+0x218>)
 80046d2:	9103      	str	r1, [sp, #12]
 80046d4:	2a58      	cmp	r2, #88	; 0x58
 80046d6:	d100      	bne.n	80046da <_printf_i+0x2e>
 80046d8:	e093      	b.n	8004802 <_printf_i+0x156>
 80046da:	0026      	movs	r6, r4
 80046dc:	3642      	adds	r6, #66	; 0x42
 80046de:	7032      	strb	r2, [r6, #0]
 80046e0:	e022      	b.n	8004728 <_printf_i+0x7c>
 80046e2:	0010      	movs	r0, r2
 80046e4:	3863      	subs	r0, #99	; 0x63
 80046e6:	2815      	cmp	r0, #21
 80046e8:	d8f7      	bhi.n	80046da <_printf_i+0x2e>
 80046ea:	f7fb fd09 	bl	8000100 <__gnu_thumb1_case_shi>
 80046ee:	0016      	.short	0x0016
 80046f0:	fff6001f 	.word	0xfff6001f
 80046f4:	fff6fff6 	.word	0xfff6fff6
 80046f8:	001ffff6 	.word	0x001ffff6
 80046fc:	fff6fff6 	.word	0xfff6fff6
 8004700:	fff6fff6 	.word	0xfff6fff6
 8004704:	003600a3 	.word	0x003600a3
 8004708:	fff60083 	.word	0xfff60083
 800470c:	00b4fff6 	.word	0x00b4fff6
 8004710:	0036fff6 	.word	0x0036fff6
 8004714:	fff6fff6 	.word	0xfff6fff6
 8004718:	0087      	.short	0x0087
 800471a:	0026      	movs	r6, r4
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	3642      	adds	r6, #66	; 0x42
 8004720:	1d11      	adds	r1, r2, #4
 8004722:	6019      	str	r1, [r3, #0]
 8004724:	6813      	ldr	r3, [r2, #0]
 8004726:	7033      	strb	r3, [r6, #0]
 8004728:	2301      	movs	r3, #1
 800472a:	e0a2      	b.n	8004872 <_printf_i+0x1c6>
 800472c:	6818      	ldr	r0, [r3, #0]
 800472e:	6809      	ldr	r1, [r1, #0]
 8004730:	1d02      	adds	r2, r0, #4
 8004732:	060d      	lsls	r5, r1, #24
 8004734:	d50b      	bpl.n	800474e <_printf_i+0xa2>
 8004736:	6805      	ldr	r5, [r0, #0]
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	2d00      	cmp	r5, #0
 800473c:	da03      	bge.n	8004746 <_printf_i+0x9a>
 800473e:	232d      	movs	r3, #45	; 0x2d
 8004740:	9a04      	ldr	r2, [sp, #16]
 8004742:	426d      	negs	r5, r5
 8004744:	7013      	strb	r3, [r2, #0]
 8004746:	4b5f      	ldr	r3, [pc, #380]	; (80048c4 <_printf_i+0x218>)
 8004748:	270a      	movs	r7, #10
 800474a:	9303      	str	r3, [sp, #12]
 800474c:	e01b      	b.n	8004786 <_printf_i+0xda>
 800474e:	6805      	ldr	r5, [r0, #0]
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	0649      	lsls	r1, r1, #25
 8004754:	d5f1      	bpl.n	800473a <_printf_i+0x8e>
 8004756:	b22d      	sxth	r5, r5
 8004758:	e7ef      	b.n	800473a <_printf_i+0x8e>
 800475a:	680d      	ldr	r5, [r1, #0]
 800475c:	6819      	ldr	r1, [r3, #0]
 800475e:	1d08      	adds	r0, r1, #4
 8004760:	6018      	str	r0, [r3, #0]
 8004762:	062e      	lsls	r6, r5, #24
 8004764:	d501      	bpl.n	800476a <_printf_i+0xbe>
 8004766:	680d      	ldr	r5, [r1, #0]
 8004768:	e003      	b.n	8004772 <_printf_i+0xc6>
 800476a:	066d      	lsls	r5, r5, #25
 800476c:	d5fb      	bpl.n	8004766 <_printf_i+0xba>
 800476e:	680d      	ldr	r5, [r1, #0]
 8004770:	b2ad      	uxth	r5, r5
 8004772:	4b54      	ldr	r3, [pc, #336]	; (80048c4 <_printf_i+0x218>)
 8004774:	2708      	movs	r7, #8
 8004776:	9303      	str	r3, [sp, #12]
 8004778:	2a6f      	cmp	r2, #111	; 0x6f
 800477a:	d000      	beq.n	800477e <_printf_i+0xd2>
 800477c:	3702      	adds	r7, #2
 800477e:	0023      	movs	r3, r4
 8004780:	2200      	movs	r2, #0
 8004782:	3343      	adds	r3, #67	; 0x43
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	6863      	ldr	r3, [r4, #4]
 8004788:	60a3      	str	r3, [r4, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	db03      	blt.n	8004796 <_printf_i+0xea>
 800478e:	2104      	movs	r1, #4
 8004790:	6822      	ldr	r2, [r4, #0]
 8004792:	438a      	bics	r2, r1
 8004794:	6022      	str	r2, [r4, #0]
 8004796:	2d00      	cmp	r5, #0
 8004798:	d102      	bne.n	80047a0 <_printf_i+0xf4>
 800479a:	9e04      	ldr	r6, [sp, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00c      	beq.n	80047ba <_printf_i+0x10e>
 80047a0:	9e04      	ldr	r6, [sp, #16]
 80047a2:	0028      	movs	r0, r5
 80047a4:	0039      	movs	r1, r7
 80047a6:	f7fb fd3b 	bl	8000220 <__aeabi_uidivmod>
 80047aa:	9b03      	ldr	r3, [sp, #12]
 80047ac:	3e01      	subs	r6, #1
 80047ae:	5c5b      	ldrb	r3, [r3, r1]
 80047b0:	7033      	strb	r3, [r6, #0]
 80047b2:	002b      	movs	r3, r5
 80047b4:	0005      	movs	r5, r0
 80047b6:	429f      	cmp	r7, r3
 80047b8:	d9f3      	bls.n	80047a2 <_printf_i+0xf6>
 80047ba:	2f08      	cmp	r7, #8
 80047bc:	d109      	bne.n	80047d2 <_printf_i+0x126>
 80047be:	6823      	ldr	r3, [r4, #0]
 80047c0:	07db      	lsls	r3, r3, #31
 80047c2:	d506      	bpl.n	80047d2 <_printf_i+0x126>
 80047c4:	6862      	ldr	r2, [r4, #4]
 80047c6:	6923      	ldr	r3, [r4, #16]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	dc02      	bgt.n	80047d2 <_printf_i+0x126>
 80047cc:	2330      	movs	r3, #48	; 0x30
 80047ce:	3e01      	subs	r6, #1
 80047d0:	7033      	strb	r3, [r6, #0]
 80047d2:	9b04      	ldr	r3, [sp, #16]
 80047d4:	1b9b      	subs	r3, r3, r6
 80047d6:	6123      	str	r3, [r4, #16]
 80047d8:	9b07      	ldr	r3, [sp, #28]
 80047da:	0021      	movs	r1, r4
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	9805      	ldr	r0, [sp, #20]
 80047e0:	9b06      	ldr	r3, [sp, #24]
 80047e2:	aa09      	add	r2, sp, #36	; 0x24
 80047e4:	f7ff fef2 	bl	80045cc <_printf_common>
 80047e8:	3001      	adds	r0, #1
 80047ea:	d147      	bne.n	800487c <_printf_i+0x1d0>
 80047ec:	2001      	movs	r0, #1
 80047ee:	4240      	negs	r0, r0
 80047f0:	b00b      	add	sp, #44	; 0x2c
 80047f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047f4:	2220      	movs	r2, #32
 80047f6:	6809      	ldr	r1, [r1, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	6022      	str	r2, [r4, #0]
 80047fc:	2278      	movs	r2, #120	; 0x78
 80047fe:	4932      	ldr	r1, [pc, #200]	; (80048c8 <_printf_i+0x21c>)
 8004800:	9103      	str	r1, [sp, #12]
 8004802:	0021      	movs	r1, r4
 8004804:	3145      	adds	r1, #69	; 0x45
 8004806:	700a      	strb	r2, [r1, #0]
 8004808:	6819      	ldr	r1, [r3, #0]
 800480a:	6822      	ldr	r2, [r4, #0]
 800480c:	c920      	ldmia	r1!, {r5}
 800480e:	0610      	lsls	r0, r2, #24
 8004810:	d402      	bmi.n	8004818 <_printf_i+0x16c>
 8004812:	0650      	lsls	r0, r2, #25
 8004814:	d500      	bpl.n	8004818 <_printf_i+0x16c>
 8004816:	b2ad      	uxth	r5, r5
 8004818:	6019      	str	r1, [r3, #0]
 800481a:	07d3      	lsls	r3, r2, #31
 800481c:	d502      	bpl.n	8004824 <_printf_i+0x178>
 800481e:	2320      	movs	r3, #32
 8004820:	4313      	orrs	r3, r2
 8004822:	6023      	str	r3, [r4, #0]
 8004824:	2710      	movs	r7, #16
 8004826:	2d00      	cmp	r5, #0
 8004828:	d1a9      	bne.n	800477e <_printf_i+0xd2>
 800482a:	2220      	movs	r2, #32
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	4393      	bics	r3, r2
 8004830:	6023      	str	r3, [r4, #0]
 8004832:	e7a4      	b.n	800477e <_printf_i+0xd2>
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	680d      	ldr	r5, [r1, #0]
 8004838:	1d10      	adds	r0, r2, #4
 800483a:	6949      	ldr	r1, [r1, #20]
 800483c:	6018      	str	r0, [r3, #0]
 800483e:	6813      	ldr	r3, [r2, #0]
 8004840:	062e      	lsls	r6, r5, #24
 8004842:	d501      	bpl.n	8004848 <_printf_i+0x19c>
 8004844:	6019      	str	r1, [r3, #0]
 8004846:	e002      	b.n	800484e <_printf_i+0x1a2>
 8004848:	066d      	lsls	r5, r5, #25
 800484a:	d5fb      	bpl.n	8004844 <_printf_i+0x198>
 800484c:	8019      	strh	r1, [r3, #0]
 800484e:	2300      	movs	r3, #0
 8004850:	9e04      	ldr	r6, [sp, #16]
 8004852:	6123      	str	r3, [r4, #16]
 8004854:	e7c0      	b.n	80047d8 <_printf_i+0x12c>
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	1d11      	adds	r1, r2, #4
 800485a:	6019      	str	r1, [r3, #0]
 800485c:	6816      	ldr	r6, [r2, #0]
 800485e:	2100      	movs	r1, #0
 8004860:	0030      	movs	r0, r6
 8004862:	6862      	ldr	r2, [r4, #4]
 8004864:	f000 f922 	bl	8004aac <memchr>
 8004868:	2800      	cmp	r0, #0
 800486a:	d001      	beq.n	8004870 <_printf_i+0x1c4>
 800486c:	1b80      	subs	r0, r0, r6
 800486e:	6060      	str	r0, [r4, #4]
 8004870:	6863      	ldr	r3, [r4, #4]
 8004872:	6123      	str	r3, [r4, #16]
 8004874:	2300      	movs	r3, #0
 8004876:	9a04      	ldr	r2, [sp, #16]
 8004878:	7013      	strb	r3, [r2, #0]
 800487a:	e7ad      	b.n	80047d8 <_printf_i+0x12c>
 800487c:	0032      	movs	r2, r6
 800487e:	6923      	ldr	r3, [r4, #16]
 8004880:	9906      	ldr	r1, [sp, #24]
 8004882:	9805      	ldr	r0, [sp, #20]
 8004884:	9d07      	ldr	r5, [sp, #28]
 8004886:	47a8      	blx	r5
 8004888:	3001      	adds	r0, #1
 800488a:	d0af      	beq.n	80047ec <_printf_i+0x140>
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	079b      	lsls	r3, r3, #30
 8004890:	d415      	bmi.n	80048be <_printf_i+0x212>
 8004892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004894:	68e0      	ldr	r0, [r4, #12]
 8004896:	4298      	cmp	r0, r3
 8004898:	daaa      	bge.n	80047f0 <_printf_i+0x144>
 800489a:	0018      	movs	r0, r3
 800489c:	e7a8      	b.n	80047f0 <_printf_i+0x144>
 800489e:	0022      	movs	r2, r4
 80048a0:	2301      	movs	r3, #1
 80048a2:	9906      	ldr	r1, [sp, #24]
 80048a4:	9805      	ldr	r0, [sp, #20]
 80048a6:	9e07      	ldr	r6, [sp, #28]
 80048a8:	3219      	adds	r2, #25
 80048aa:	47b0      	blx	r6
 80048ac:	3001      	adds	r0, #1
 80048ae:	d09d      	beq.n	80047ec <_printf_i+0x140>
 80048b0:	3501      	adds	r5, #1
 80048b2:	68e3      	ldr	r3, [r4, #12]
 80048b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	42ab      	cmp	r3, r5
 80048ba:	dcf0      	bgt.n	800489e <_printf_i+0x1f2>
 80048bc:	e7e9      	b.n	8004892 <_printf_i+0x1e6>
 80048be:	2500      	movs	r5, #0
 80048c0:	e7f7      	b.n	80048b2 <_printf_i+0x206>
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	08004d54 	.word	0x08004d54
 80048c8:	08004d65 	.word	0x08004d65

080048cc <__swbuf_r>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	0006      	movs	r6, r0
 80048d0:	000d      	movs	r5, r1
 80048d2:	0014      	movs	r4, r2
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d004      	beq.n	80048e2 <__swbuf_r+0x16>
 80048d8:	6a03      	ldr	r3, [r0, #32]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <__swbuf_r+0x16>
 80048de:	f7ff fa2b 	bl	8003d38 <__sinit>
 80048e2:	69a3      	ldr	r3, [r4, #24]
 80048e4:	60a3      	str	r3, [r4, #8]
 80048e6:	89a3      	ldrh	r3, [r4, #12]
 80048e8:	071b      	lsls	r3, r3, #28
 80048ea:	d528      	bpl.n	800493e <__swbuf_r+0x72>
 80048ec:	6923      	ldr	r3, [r4, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d025      	beq.n	800493e <__swbuf_r+0x72>
 80048f2:	6923      	ldr	r3, [r4, #16]
 80048f4:	6820      	ldr	r0, [r4, #0]
 80048f6:	b2ef      	uxtb	r7, r5
 80048f8:	1ac0      	subs	r0, r0, r3
 80048fa:	6963      	ldr	r3, [r4, #20]
 80048fc:	b2ed      	uxtb	r5, r5
 80048fe:	4283      	cmp	r3, r0
 8004900:	dc05      	bgt.n	800490e <__swbuf_r+0x42>
 8004902:	0021      	movs	r1, r4
 8004904:	0030      	movs	r0, r6
 8004906:	f7ff fcc9 	bl	800429c <_fflush_r>
 800490a:	2800      	cmp	r0, #0
 800490c:	d11d      	bne.n	800494a <__swbuf_r+0x7e>
 800490e:	68a3      	ldr	r3, [r4, #8]
 8004910:	3001      	adds	r0, #1
 8004912:	3b01      	subs	r3, #1
 8004914:	60a3      	str	r3, [r4, #8]
 8004916:	6823      	ldr	r3, [r4, #0]
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	6022      	str	r2, [r4, #0]
 800491c:	701f      	strb	r7, [r3, #0]
 800491e:	6963      	ldr	r3, [r4, #20]
 8004920:	4283      	cmp	r3, r0
 8004922:	d004      	beq.n	800492e <__swbuf_r+0x62>
 8004924:	89a3      	ldrh	r3, [r4, #12]
 8004926:	07db      	lsls	r3, r3, #31
 8004928:	d507      	bpl.n	800493a <__swbuf_r+0x6e>
 800492a:	2d0a      	cmp	r5, #10
 800492c:	d105      	bne.n	800493a <__swbuf_r+0x6e>
 800492e:	0021      	movs	r1, r4
 8004930:	0030      	movs	r0, r6
 8004932:	f7ff fcb3 	bl	800429c <_fflush_r>
 8004936:	2800      	cmp	r0, #0
 8004938:	d107      	bne.n	800494a <__swbuf_r+0x7e>
 800493a:	0028      	movs	r0, r5
 800493c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800493e:	0021      	movs	r1, r4
 8004940:	0030      	movs	r0, r6
 8004942:	f000 f805 	bl	8004950 <__swsetup_r>
 8004946:	2800      	cmp	r0, #0
 8004948:	d0d3      	beq.n	80048f2 <__swbuf_r+0x26>
 800494a:	2501      	movs	r5, #1
 800494c:	426d      	negs	r5, r5
 800494e:	e7f4      	b.n	800493a <__swbuf_r+0x6e>

08004950 <__swsetup_r>:
 8004950:	4b30      	ldr	r3, [pc, #192]	; (8004a14 <__swsetup_r+0xc4>)
 8004952:	b570      	push	{r4, r5, r6, lr}
 8004954:	0005      	movs	r5, r0
 8004956:	6818      	ldr	r0, [r3, #0]
 8004958:	000c      	movs	r4, r1
 800495a:	2800      	cmp	r0, #0
 800495c:	d004      	beq.n	8004968 <__swsetup_r+0x18>
 800495e:	6a03      	ldr	r3, [r0, #32]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <__swsetup_r+0x18>
 8004964:	f7ff f9e8 	bl	8003d38 <__sinit>
 8004968:	230c      	movs	r3, #12
 800496a:	5ee2      	ldrsh	r2, [r4, r3]
 800496c:	b293      	uxth	r3, r2
 800496e:	0711      	lsls	r1, r2, #28
 8004970:	d423      	bmi.n	80049ba <__swsetup_r+0x6a>
 8004972:	06d9      	lsls	r1, r3, #27
 8004974:	d407      	bmi.n	8004986 <__swsetup_r+0x36>
 8004976:	2309      	movs	r3, #9
 8004978:	2001      	movs	r0, #1
 800497a:	602b      	str	r3, [r5, #0]
 800497c:	3337      	adds	r3, #55	; 0x37
 800497e:	4313      	orrs	r3, r2
 8004980:	81a3      	strh	r3, [r4, #12]
 8004982:	4240      	negs	r0, r0
 8004984:	bd70      	pop	{r4, r5, r6, pc}
 8004986:	075b      	lsls	r3, r3, #29
 8004988:	d513      	bpl.n	80049b2 <__swsetup_r+0x62>
 800498a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800498c:	2900      	cmp	r1, #0
 800498e:	d008      	beq.n	80049a2 <__swsetup_r+0x52>
 8004990:	0023      	movs	r3, r4
 8004992:	3344      	adds	r3, #68	; 0x44
 8004994:	4299      	cmp	r1, r3
 8004996:	d002      	beq.n	800499e <__swsetup_r+0x4e>
 8004998:	0028      	movs	r0, r5
 800499a:	f7ff faed 	bl	8003f78 <_free_r>
 800499e:	2300      	movs	r3, #0
 80049a0:	6363      	str	r3, [r4, #52]	; 0x34
 80049a2:	2224      	movs	r2, #36	; 0x24
 80049a4:	89a3      	ldrh	r3, [r4, #12]
 80049a6:	4393      	bics	r3, r2
 80049a8:	81a3      	strh	r3, [r4, #12]
 80049aa:	2300      	movs	r3, #0
 80049ac:	6063      	str	r3, [r4, #4]
 80049ae:	6923      	ldr	r3, [r4, #16]
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	2308      	movs	r3, #8
 80049b4:	89a2      	ldrh	r2, [r4, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	81a3      	strh	r3, [r4, #12]
 80049ba:	6923      	ldr	r3, [r4, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10b      	bne.n	80049d8 <__swsetup_r+0x88>
 80049c0:	21a0      	movs	r1, #160	; 0xa0
 80049c2:	2280      	movs	r2, #128	; 0x80
 80049c4:	89a3      	ldrh	r3, [r4, #12]
 80049c6:	0089      	lsls	r1, r1, #2
 80049c8:	0092      	lsls	r2, r2, #2
 80049ca:	400b      	ands	r3, r1
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d003      	beq.n	80049d8 <__swsetup_r+0x88>
 80049d0:	0021      	movs	r1, r4
 80049d2:	0028      	movs	r0, r5
 80049d4:	f000 f89e 	bl	8004b14 <__smakebuf_r>
 80049d8:	220c      	movs	r2, #12
 80049da:	5ea3      	ldrsh	r3, [r4, r2]
 80049dc:	2001      	movs	r0, #1
 80049de:	001a      	movs	r2, r3
 80049e0:	b299      	uxth	r1, r3
 80049e2:	4002      	ands	r2, r0
 80049e4:	4203      	tst	r3, r0
 80049e6:	d00f      	beq.n	8004a08 <__swsetup_r+0xb8>
 80049e8:	2200      	movs	r2, #0
 80049ea:	60a2      	str	r2, [r4, #8]
 80049ec:	6962      	ldr	r2, [r4, #20]
 80049ee:	4252      	negs	r2, r2
 80049f0:	61a2      	str	r2, [r4, #24]
 80049f2:	2000      	movs	r0, #0
 80049f4:	6922      	ldr	r2, [r4, #16]
 80049f6:	4282      	cmp	r2, r0
 80049f8:	d1c4      	bne.n	8004984 <__swsetup_r+0x34>
 80049fa:	0609      	lsls	r1, r1, #24
 80049fc:	d5c2      	bpl.n	8004984 <__swsetup_r+0x34>
 80049fe:	2240      	movs	r2, #64	; 0x40
 8004a00:	4313      	orrs	r3, r2
 8004a02:	81a3      	strh	r3, [r4, #12]
 8004a04:	3801      	subs	r0, #1
 8004a06:	e7bd      	b.n	8004984 <__swsetup_r+0x34>
 8004a08:	0788      	lsls	r0, r1, #30
 8004a0a:	d400      	bmi.n	8004a0e <__swsetup_r+0xbe>
 8004a0c:	6962      	ldr	r2, [r4, #20]
 8004a0e:	60a2      	str	r2, [r4, #8]
 8004a10:	e7ef      	b.n	80049f2 <__swsetup_r+0xa2>
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	20000064 	.word	0x20000064

08004a18 <_raise_r>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	0004      	movs	r4, r0
 8004a1c:	000d      	movs	r5, r1
 8004a1e:	291f      	cmp	r1, #31
 8004a20:	d904      	bls.n	8004a2c <_raise_r+0x14>
 8004a22:	2316      	movs	r3, #22
 8004a24:	6003      	str	r3, [r0, #0]
 8004a26:	2001      	movs	r0, #1
 8004a28:	4240      	negs	r0, r0
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d004      	beq.n	8004a3c <_raise_r+0x24>
 8004a32:	008a      	lsls	r2, r1, #2
 8004a34:	189b      	adds	r3, r3, r2
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	2a00      	cmp	r2, #0
 8004a3a:	d108      	bne.n	8004a4e <_raise_r+0x36>
 8004a3c:	0020      	movs	r0, r4
 8004a3e:	f000 f831 	bl	8004aa4 <_getpid_r>
 8004a42:	002a      	movs	r2, r5
 8004a44:	0001      	movs	r1, r0
 8004a46:	0020      	movs	r0, r4
 8004a48:	f000 f81a 	bl	8004a80 <_kill_r>
 8004a4c:	e7ed      	b.n	8004a2a <_raise_r+0x12>
 8004a4e:	2000      	movs	r0, #0
 8004a50:	2a01      	cmp	r2, #1
 8004a52:	d0ea      	beq.n	8004a2a <_raise_r+0x12>
 8004a54:	1c51      	adds	r1, r2, #1
 8004a56:	d103      	bne.n	8004a60 <_raise_r+0x48>
 8004a58:	2316      	movs	r3, #22
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	e7e4      	b.n	8004a2a <_raise_r+0x12>
 8004a60:	2400      	movs	r4, #0
 8004a62:	0028      	movs	r0, r5
 8004a64:	601c      	str	r4, [r3, #0]
 8004a66:	4790      	blx	r2
 8004a68:	0020      	movs	r0, r4
 8004a6a:	e7de      	b.n	8004a2a <_raise_r+0x12>

08004a6c <raise>:
 8004a6c:	b510      	push	{r4, lr}
 8004a6e:	4b03      	ldr	r3, [pc, #12]	; (8004a7c <raise+0x10>)
 8004a70:	0001      	movs	r1, r0
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	f7ff ffd0 	bl	8004a18 <_raise_r>
 8004a78:	bd10      	pop	{r4, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	20000064 	.word	0x20000064

08004a80 <_kill_r>:
 8004a80:	2300      	movs	r3, #0
 8004a82:	b570      	push	{r4, r5, r6, lr}
 8004a84:	4d06      	ldr	r5, [pc, #24]	; (8004aa0 <_kill_r+0x20>)
 8004a86:	0004      	movs	r4, r0
 8004a88:	0008      	movs	r0, r1
 8004a8a:	0011      	movs	r1, r2
 8004a8c:	602b      	str	r3, [r5, #0]
 8004a8e:	f7fc f9e7 	bl	8000e60 <_kill>
 8004a92:	1c43      	adds	r3, r0, #1
 8004a94:	d103      	bne.n	8004a9e <_kill_r+0x1e>
 8004a96:	682b      	ldr	r3, [r5, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d000      	beq.n	8004a9e <_kill_r+0x1e>
 8004a9c:	6023      	str	r3, [r4, #0]
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
 8004aa0:	20000be8 	.word	0x20000be8

08004aa4 <_getpid_r>:
 8004aa4:	b510      	push	{r4, lr}
 8004aa6:	f7fc f9d5 	bl	8000e54 <_getpid>
 8004aaa:	bd10      	pop	{r4, pc}

08004aac <memchr>:
 8004aac:	b2c9      	uxtb	r1, r1
 8004aae:	1882      	adds	r2, r0, r2
 8004ab0:	4290      	cmp	r0, r2
 8004ab2:	d101      	bne.n	8004ab8 <memchr+0xc>
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	4770      	bx	lr
 8004ab8:	7803      	ldrb	r3, [r0, #0]
 8004aba:	428b      	cmp	r3, r1
 8004abc:	d0fb      	beq.n	8004ab6 <memchr+0xa>
 8004abe:	3001      	adds	r0, #1
 8004ac0:	e7f6      	b.n	8004ab0 <memchr+0x4>
	...

08004ac4 <__swhatbuf_r>:
 8004ac4:	b570      	push	{r4, r5, r6, lr}
 8004ac6:	000e      	movs	r6, r1
 8004ac8:	001d      	movs	r5, r3
 8004aca:	230e      	movs	r3, #14
 8004acc:	5ec9      	ldrsh	r1, [r1, r3]
 8004ace:	0014      	movs	r4, r2
 8004ad0:	b096      	sub	sp, #88	; 0x58
 8004ad2:	2900      	cmp	r1, #0
 8004ad4:	da0c      	bge.n	8004af0 <__swhatbuf_r+0x2c>
 8004ad6:	89b2      	ldrh	r2, [r6, #12]
 8004ad8:	2380      	movs	r3, #128	; 0x80
 8004ada:	0011      	movs	r1, r2
 8004adc:	4019      	ands	r1, r3
 8004ade:	421a      	tst	r2, r3
 8004ae0:	d013      	beq.n	8004b0a <__swhatbuf_r+0x46>
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	3b40      	subs	r3, #64	; 0x40
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	6029      	str	r1, [r5, #0]
 8004aea:	6023      	str	r3, [r4, #0]
 8004aec:	b016      	add	sp, #88	; 0x58
 8004aee:	bd70      	pop	{r4, r5, r6, pc}
 8004af0:	466a      	mov	r2, sp
 8004af2:	f000 f84d 	bl	8004b90 <_fstat_r>
 8004af6:	2800      	cmp	r0, #0
 8004af8:	dbed      	blt.n	8004ad6 <__swhatbuf_r+0x12>
 8004afa:	23f0      	movs	r3, #240	; 0xf0
 8004afc:	9901      	ldr	r1, [sp, #4]
 8004afe:	021b      	lsls	r3, r3, #8
 8004b00:	4019      	ands	r1, r3
 8004b02:	4b03      	ldr	r3, [pc, #12]	; (8004b10 <__swhatbuf_r+0x4c>)
 8004b04:	18c9      	adds	r1, r1, r3
 8004b06:	424b      	negs	r3, r1
 8004b08:	4159      	adcs	r1, r3
 8004b0a:	2380      	movs	r3, #128	; 0x80
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	e7ea      	b.n	8004ae6 <__swhatbuf_r+0x22>
 8004b10:	ffffe000 	.word	0xffffe000

08004b14 <__smakebuf_r>:
 8004b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b16:	2602      	movs	r6, #2
 8004b18:	898b      	ldrh	r3, [r1, #12]
 8004b1a:	0005      	movs	r5, r0
 8004b1c:	000c      	movs	r4, r1
 8004b1e:	4233      	tst	r3, r6
 8004b20:	d006      	beq.n	8004b30 <__smakebuf_r+0x1c>
 8004b22:	0023      	movs	r3, r4
 8004b24:	3347      	adds	r3, #71	; 0x47
 8004b26:	6023      	str	r3, [r4, #0]
 8004b28:	6123      	str	r3, [r4, #16]
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	6163      	str	r3, [r4, #20]
 8004b2e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004b30:	466a      	mov	r2, sp
 8004b32:	ab01      	add	r3, sp, #4
 8004b34:	f7ff ffc6 	bl	8004ac4 <__swhatbuf_r>
 8004b38:	9900      	ldr	r1, [sp, #0]
 8004b3a:	0007      	movs	r7, r0
 8004b3c:	0028      	movs	r0, r5
 8004b3e:	f7ff fa91 	bl	8004064 <_malloc_r>
 8004b42:	2800      	cmp	r0, #0
 8004b44:	d108      	bne.n	8004b58 <__smakebuf_r+0x44>
 8004b46:	220c      	movs	r2, #12
 8004b48:	5ea3      	ldrsh	r3, [r4, r2]
 8004b4a:	059a      	lsls	r2, r3, #22
 8004b4c:	d4ef      	bmi.n	8004b2e <__smakebuf_r+0x1a>
 8004b4e:	2203      	movs	r2, #3
 8004b50:	4393      	bics	r3, r2
 8004b52:	431e      	orrs	r6, r3
 8004b54:	81a6      	strh	r6, [r4, #12]
 8004b56:	e7e4      	b.n	8004b22 <__smakebuf_r+0xe>
 8004b58:	2380      	movs	r3, #128	; 0x80
 8004b5a:	89a2      	ldrh	r2, [r4, #12]
 8004b5c:	6020      	str	r0, [r4, #0]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	81a3      	strh	r3, [r4, #12]
 8004b62:	9b00      	ldr	r3, [sp, #0]
 8004b64:	6120      	str	r0, [r4, #16]
 8004b66:	6163      	str	r3, [r4, #20]
 8004b68:	9b01      	ldr	r3, [sp, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00c      	beq.n	8004b88 <__smakebuf_r+0x74>
 8004b6e:	0028      	movs	r0, r5
 8004b70:	230e      	movs	r3, #14
 8004b72:	5ee1      	ldrsh	r1, [r4, r3]
 8004b74:	f000 f81e 	bl	8004bb4 <_isatty_r>
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	d005      	beq.n	8004b88 <__smakebuf_r+0x74>
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	89a2      	ldrh	r2, [r4, #12]
 8004b80:	439a      	bics	r2, r3
 8004b82:	3b02      	subs	r3, #2
 8004b84:	4313      	orrs	r3, r2
 8004b86:	81a3      	strh	r3, [r4, #12]
 8004b88:	89a3      	ldrh	r3, [r4, #12]
 8004b8a:	433b      	orrs	r3, r7
 8004b8c:	81a3      	strh	r3, [r4, #12]
 8004b8e:	e7ce      	b.n	8004b2e <__smakebuf_r+0x1a>

08004b90 <_fstat_r>:
 8004b90:	2300      	movs	r3, #0
 8004b92:	b570      	push	{r4, r5, r6, lr}
 8004b94:	4d06      	ldr	r5, [pc, #24]	; (8004bb0 <_fstat_r+0x20>)
 8004b96:	0004      	movs	r4, r0
 8004b98:	0008      	movs	r0, r1
 8004b9a:	0011      	movs	r1, r2
 8004b9c:	602b      	str	r3, [r5, #0]
 8004b9e:	f7fc f9be 	bl	8000f1e <_fstat>
 8004ba2:	1c43      	adds	r3, r0, #1
 8004ba4:	d103      	bne.n	8004bae <_fstat_r+0x1e>
 8004ba6:	682b      	ldr	r3, [r5, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d000      	beq.n	8004bae <_fstat_r+0x1e>
 8004bac:	6023      	str	r3, [r4, #0]
 8004bae:	bd70      	pop	{r4, r5, r6, pc}
 8004bb0:	20000be8 	.word	0x20000be8

08004bb4 <_isatty_r>:
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	b570      	push	{r4, r5, r6, lr}
 8004bb8:	4d06      	ldr	r5, [pc, #24]	; (8004bd4 <_isatty_r+0x20>)
 8004bba:	0004      	movs	r4, r0
 8004bbc:	0008      	movs	r0, r1
 8004bbe:	602b      	str	r3, [r5, #0]
 8004bc0:	f7fc f9bb 	bl	8000f3a <_isatty>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d103      	bne.n	8004bd0 <_isatty_r+0x1c>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d000      	beq.n	8004bd0 <_isatty_r+0x1c>
 8004bce:	6023      	str	r3, [r4, #0]
 8004bd0:	bd70      	pop	{r4, r5, r6, pc}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	20000be8 	.word	0x20000be8

08004bd8 <_init>:
 8004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bde:	bc08      	pop	{r3}
 8004be0:	469e      	mov	lr, r3
 8004be2:	4770      	bx	lr

08004be4 <_fini>:
 8004be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be6:	46c0      	nop			; (mov r8, r8)
 8004be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bea:	bc08      	pop	{r3}
 8004bec:	469e      	mov	lr, r3
 8004bee:	4770      	bx	lr
